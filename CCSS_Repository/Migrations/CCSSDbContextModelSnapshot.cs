// <auto-generated />
using System;
using CCSS_Repository.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CCSS_Repository.Migrations
{
    [DbContext(typeof(CCSSDbContext))]
    partial class CCSSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AverageStar")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Leader")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnTask")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("SalaryIndex")
                        .HasColumnType("float");

                    b.Property<int?>("TaskQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountId = "A001",
                            AverageStar = 4.5,
                            Email = "john@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "John Doe",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 45000.0,
                            Weight = 75f
                        },
                        new
                        {
                            AccountId = "A002",
                            Email = "jane@example.com",
                            IsActive = true,
                            Name = "Jane Smith",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R001"
                        },
                        new
                        {
                            AccountId = "A003",
                            Email = "phuongnam26012002@gmail.com",
                            IsActive = true,
                            Name = "Nammmmmmmm",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A004",
                            AverageStar = 4.2000000000000002,
                            Email = "bob@example.com",
                            Height = 175f,
                            IsActive = true,
                            Name = "Bob Brown",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 42000.0,
                            Weight = 80f
                        },
                        new
                        {
                            AccountId = "A005",
                            AverageStar = 3.5,
                            Email = "charlie@example.com",
                            Height = 182f,
                            IsActive = true,
                            Name = "Charlie White",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 35000.0,
                            Weight = 78f
                        },
                        new
                        {
                            AccountId = "A006",
                            Email = "david@example.com",
                            IsActive = true,
                            Name = "David Black",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A007",
                            AverageStar = 4.0999999999999996,
                            Email = "emma@example.com",
                            Height = 168f,
                            IsActive = true,
                            Name = "Emma Green",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 41000.0,
                            Weight = 60f
                        },
                        new
                        {
                            AccountId = "A008",
                            AverageStar = 4.5999999999999996,
                            Email = "frank@example.com",
                            Height = 185f,
                            IsActive = true,
                            Name = "Frank Blue",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 46000.0,
                            Weight = 85f
                        },
                        new
                        {
                            AccountId = "A009",
                            Email = "grace@example.com",
                            IsActive = true,
                            Name = "Grace Pink",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R001"
                        },
                        new
                        {
                            AccountId = "A010",
                            AverageStar = 2.5,
                            Email = "henry@example.com",
                            Height = 178f,
                            IsActive = true,
                            Name = "Henry Purple",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 25000.0,
                            Weight = 77f
                        },
                        new
                        {
                            AccountId = "A011",
                            Email = "isla@example.com",
                            IsActive = true,
                            Name = "Isla Red",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A012",
                            AverageStar = 3.7999999999999998,
                            Email = "jack@example.com",
                            Height = 172f,
                            IsActive = true,
                            Name = "Jack Yellow",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 38000.0,
                            Weight = 70f
                        },
                        new
                        {
                            AccountId = "A013",
                            AverageStar = 2.5,
                            Email = "katie@example.com",
                            Height = 165f,
                            IsActive = true,
                            Name = "Katie Orange",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 25000.0,
                            Weight = 55f
                        },
                        new
                        {
                            AccountId = "A014",
                            Email = "liam@example.com",
                            IsActive = true,
                            Name = "Liam Gray",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A015",
                            AverageStar = 1.5,
                            Email = "mia@example.com",
                            Height = 170f,
                            IsActive = true,
                            Name = "Mia Cyan",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 15000.0,
                            Weight = 65f
                        },
                        new
                        {
                            AccountId = "A016",
                            AverageStar = 3.7000000000000002,
                            Email = "noah@example.com",
                            Height = 175f,
                            IsActive = true,
                            Name = "Noah Silver",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 37000.0,
                            Weight = 70f
                        },
                        new
                        {
                            AccountId = "A017",
                            AverageStar = 4.7999999999999998,
                            Email = "olivia@example.com",
                            Height = 168f,
                            IsActive = true,
                            Name = "Olivia Gold",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 48000.0,
                            Weight = 55f
                        },
                        new
                        {
                            AccountId = "A018",
                            AverageStar = 3.2000000000000002,
                            Email = "william@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "William Amber",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 32000.0,
                            Weight = 75f
                        },
                        new
                        {
                            AccountId = "A019",
                            AverageStar = 3.2999999999999998,
                            Email = "sophia@example.com",
                            Height = 165f,
                            IsActive = true,
                            Name = "Sophia Ivory",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 33000.0,
                            Weight = 50f
                        },
                        new
                        {
                            AccountId = "A020",
                            AverageStar = 3.3999999999999999,
                            Email = "james@example.com",
                            Height = 178f,
                            IsActive = true,
                            Name = "James Navy",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 34000.0,
                            Weight = 72f
                        },
                        new
                        {
                            AccountId = "A021",
                            AverageStar = 3.5,
                            Email = "ava@example.com",
                            Height = 162f,
                            IsActive = true,
                            Name = "Ava Teal",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 35000.0,
                            Weight = 48f
                        },
                        new
                        {
                            AccountId = "A022",
                            AverageStar = 3.6000000000000001,
                            Email = "benjamin@example.com",
                            Height = 177f,
                            IsActive = true,
                            Name = "Benjamin Lime",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 36000.0,
                            Weight = 70f
                        },
                        new
                        {
                            AccountId = "A023",
                            AverageStar = 3.7000000000000002,
                            Email = "charlotte@example.com",
                            Height = 164f,
                            IsActive = true,
                            Name = "Charlotte Beige",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 37000.0,
                            Weight = 52f
                        },
                        new
                        {
                            AccountId = "A024",
                            AverageStar = 3.7999999999999998,
                            Email = "lucas@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "Lucas Maroon",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 38000.0,
                            Weight = 74f
                        },
                        new
                        {
                            AccountId = "A025",
                            AverageStar = 3.8999999999999999,
                            Email = "mia@example.com",
                            Height = 159f,
                            IsActive = true,
                            Name = "Mia Pearl",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 39000.0,
                            Weight = 47f
                        },
                        new
                        {
                            AccountId = "A026",
                            AverageStar = 2.5,
                            Email = "ethan@example.com",
                            Height = 176f,
                            IsActive = true,
                            Name = "Ethan Olive",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 25000.0,
                            Weight = 71f
                        },
                        new
                        {
                            AccountId = "A027",
                            AverageStar = 2.6000000000000001,
                            Email = "amelia@example.com",
                            Height = 167f,
                            IsActive = true,
                            Name = "Amelia Ruby",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 26000.0,
                            Weight = 53f
                        },
                        new
                        {
                            AccountId = "A028",
                            AverageStar = 2.7000000000000002,
                            Email = "henry@example.com",
                            Height = 182f,
                            IsActive = true,
                            Name = "Henry Saffron",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 27000.0,
                            Weight = 76f
                        },
                        new
                        {
                            AccountId = "A029",
                            AverageStar = 2.7999999999999998,
                            Email = "ella@example.com",
                            Height = 160f,
                            IsActive = true,
                            Name = "Ella Coral",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 28000.0,
                            Weight = 49f
                        },
                        new
                        {
                            AccountId = "A030",
                            AverageStar = 2.8999999999999999,
                            Email = "daniel@example.com",
                            Height = 175f,
                            IsActive = true,
                            Name = "Daniel Cyan",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 29000.0,
                            Weight = 72f
                        },
                        new
                        {
                            AccountId = "A031",
                            AverageStar = 3.0,
                            Email = "logan@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "Logan Indigo",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 30000.0,
                            Weight = 73f
                        },
                        new
                        {
                            AccountId = "A032",
                            AverageStar = 4.0,
                            Email = "lily@example.com",
                            Height = 165f,
                            IsActive = true,
                            Name = "Lily Violet",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 40000.0,
                            Weight = 52f
                        },
                        new
                        {
                            AccountId = "A033",
                            AverageStar = 4.0999999999999996,
                            Email = "mason@example.com",
                            Height = 178f,
                            IsActive = true,
                            Name = "Mason Turquoise",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 41000.0,
                            Weight = 74f
                        },
                        new
                        {
                            AccountId = "A034",
                            AverageStar = 4.2000000000000002,
                            Email = "zoe@example.com",
                            Height = 160f,
                            IsActive = true,
                            Name = "Zoe Lavender",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 42000.0,
                            Weight = 48f
                        },
                        new
                        {
                            AccountId = "A035",
                            AverageStar = 4.2999999999999998,
                            Email = "elijah@example.com",
                            Height = 182f,
                            IsActive = true,
                            Name = "Elijah Crimson",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 43000.0,
                            Weight = 77f
                        },
                        new
                        {
                            AccountId = "A036",
                            AverageStar = 4.4000000000000004,
                            Email = "aria@example.com",
                            Height = 164f,
                            IsActive = true,
                            Name = "Aria Mint",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 44000.0,
                            Weight = 50f
                        },
                        new
                        {
                            AccountId = "A037",
                            AverageStar = 4.5,
                            Email = "sebastian@example.com",
                            Height = 179f,
                            IsActive = true,
                            Name = "Sebastian Bronze",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 45000.0,
                            Weight = 72f
                        },
                        new
                        {
                            AccountId = "A038",
                            AverageStar = 4.5999999999999996,
                            Email = "harper@example.com",
                            Height = 168f,
                            IsActive = true,
                            Name = "Harper Rose",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 46000.0,
                            Weight = 53f
                        },
                        new
                        {
                            AccountId = "A039",
                            AverageStar = 4.7000000000000002,
                            Email = "caleb@example.com",
                            Height = 181f,
                            IsActive = true,
                            Name = "Caleb Onyx",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 47000.0,
                            Weight = 75f
                        },
                        new
                        {
                            AccountId = "A040",
                            AverageStar = 4.7999999999999998,
                            Email = "scarlett@example.com",
                            Height = 162f,
                            IsActive = true,
                            Name = "Scarlett Magenta",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 48000.0,
                            Weight = 51f
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.Property<string>("AccountCouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountCouponId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CouponId");

                    b.ToTable("AccountCoupon");

                    b.HasData(
                        new
                        {
                            AccountCouponId = "AC001",
                            AccountId = "A001",
                            CouponId = "CP001",
                            EndDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC002",
                            AccountId = "A002",
                            CouponId = "CP002",
                            EndDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC003",
                            AccountId = "A003",
                            CouponId = "CP003",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC004",
                            AccountId = "A004",
                            CouponId = "CP004",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC005",
                            AccountId = "A005",
                            CouponId = "CP005",
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC006",
                            AccountId = "A001",
                            CouponId = "CP006",
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC007",
                            AccountId = "A002",
                            CouponId = "CP007",
                            EndDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC008",
                            AccountId = "A003",
                            CouponId = "CP008",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC009",
                            AccountId = "A004",
                            CouponId = "CP009",
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC010",
                            AccountId = "A005",
                            CouponId = "CP010",
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC011",
                            AccountId = "A006",
                            CouponId = "CP011",
                            EndDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC012",
                            AccountId = "A007",
                            CouponId = "CP012",
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC013",
                            AccountId = "A008",
                            CouponId = "CP013",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC014",
                            AccountId = "A009",
                            CouponId = "CP014",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC015",
                            AccountId = "A010",
                            CouponId = "CP015",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountImage", b =>
                {
                    b.Property<string>("AccountImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAvatar")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountImageId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountImage");

                    b.HasData(
                        new
                        {
                            AccountImageId = "AI1",
                            AccountId = "A001",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1641),
                            UrlImage = "https://example.com/admin.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI2",
                            AccountId = "A002",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1643),
                            UrlImage = "https://example.com/manager.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI3",
                            AccountId = "A003",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1645),
                            UrlImage = "https://example.com/user1.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI4",
                            AccountId = "A004",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1647),
                            UrlImage = "https://example.com/user2.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI5",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1649),
                            UrlImage = "https://example.com/user3.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI6",
                            AccountId = "A006",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1650),
                            UrlImage = "https://example.com/user4.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI7",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1652),
                            UrlImage = "https://example.com/user5.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI8",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1654),
                            UrlImage = "https://example.com/user6.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI9",
                            AccountId = "A009",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1657),
                            UrlImage = "https://example.com/user7.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI10",
                            AccountId = "A010",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1659),
                            UrlImage = "https://example.com/user8.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI11",
                            AccountId = "A011",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1660),
                            UrlImage = "https://example.com/user9.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI12",
                            AccountId = "A012",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1662),
                            UrlImage = "https://example.com/user10.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI13",
                            AccountId = "A013",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1664),
                            UrlImage = "https://example.com/user11.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI14",
                            AccountId = "A014",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1665),
                            UrlImage = "https://example.com/user12.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI15",
                            AccountId = "A015",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1667),
                            UrlImage = "https://example.com/user13.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            ActivityId = "ACT001",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1733),
                            Description = "A relaxing yoga session",
                            Name = "Yoga Class",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1733)
                        },
                        new
                        {
                            ActivityId = "ACT002",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1740),
                            Description = "Learn to cook delicious meals",
                            Name = "Cooking Workshop",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1741)
                        },
                        new
                        {
                            ActivityId = "ACT003",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1743),
                            Description = "Live music performance",
                            Name = "Music Concert",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1744)
                        },
                        new
                        {
                            ActivityId = "ACT004",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1746),
                            Description = "Showcase of local artists",
                            Name = "Art Exhibition",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1746)
                        },
                        new
                        {
                            ActivityId = "ACT005",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1748),
                            Description = "Discussion on latest technology trends",
                            Name = "Tech Talk",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1749)
                        },
                        new
                        {
                            ActivityId = "ACT006",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1751),
                            Description = "5K run for a good cause",
                            Name = "Charity Run",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1752)
                        },
                        new
                        {
                            ActivityId = "ACT007",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1753),
                            Description = "Monthly book discussion",
                            Name = "Book Club",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1754)
                        },
                        new
                        {
                            ActivityId = "ACT008",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1756),
                            Description = "Learn photography skills",
                            Name = "Photography Workshop",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1756)
                        },
                        new
                        {
                            ActivityId = "ACT009",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1758),
                            Description = "Dance battle for all ages",
                            Name = "Dance Competition",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1759)
                        },
                        new
                        {
                            ActivityId = "ACT010",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1762),
                            Description = "Competitive chess matches",
                            Name = "Chess Tournament",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1763)
                        },
                        new
                        {
                            ActivityId = "ACT011",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1765),
                            Description = "Outdoor movie screening",
                            Name = "Movie Night",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1765)
                        },
                        new
                        {
                            ActivityId = "ACT012",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1767),
                            Description = "Showcase of scientific projects",
                            Name = "Science Fair",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1768)
                        },
                        new
                        {
                            ActivityId = "ACT013",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1769),
                            Description = "Intensive coding workshop",
                            Name = "Coding Bootcamp",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1770)
                        },
                        new
                        {
                            ActivityId = "ACT014",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1772),
                            Description = "Learn gardening techniques",
                            Name = "Gardening Workshop",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1772)
                        },
                        new
                        {
                            ActivityId = "ACT015",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1774),
                            Description = "Guided meditation practice",
                            Name = "Meditation Session",
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1775)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CartId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            CartId = "C001",
                            AccountId = "A003",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(898),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(898)
                        },
                        new
                        {
                            CartId = "C002",
                            AccountId = "A006",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(901),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(901)
                        },
                        new
                        {
                            CartId = "C003",
                            AccountId = "A011",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(903),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(904)
                        },
                        new
                        {
                            CartId = "C004",
                            AccountId = "A014",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(946),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(946)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.Property<string>("CartProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartProductId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProduct");

                    b.HasData(
                        new
                        {
                            CartProductId = "9fb2b704-db6d-4a72-8b28-41d5e51e751c",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1815),
                            Price = 30000.0,
                            ProductId = "P001",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "01bb8206-b736-41ac-b33d-f394acef9584",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1822),
                            Price = 20000.0,
                            ProductId = "P002",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "bb614278-8c17-40e0-af68-13ead8691918",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1825),
                            Price = 80000.0,
                            ProductId = "P003",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "ea23589a-29a6-4de5-9328-519f2860564d",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1829),
                            Price = 100000.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "b9641fb1-ce84-41cc-8310-b89d0a6bc68b",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1832),
                            Price = 25000.0,
                            ProductId = "P005",
                            Quantity = 3
                        },
                        new
                        {
                            CartProductId = "240445ed-ed32-4729-b89d-f43f796fc3b5",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1837),
                            Price = 40000.0,
                            ProductId = "P006",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "595c596c-851f-4d65-a2b7-72e5affd0236",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1841),
                            Price = 15000.0,
                            ProductId = "P007",
                            Quantity = 5
                        },
                        new
                        {
                            CartProductId = "000dee86-a4a3-48dc-8d9e-52f332577848",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1844),
                            Price = 50000.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "2744f109-3ead-468a-90c1-0269d8ad3c3f",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1847),
                            Price = 60000.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "f1ef44dc-2ad8-4736-9634-ae2bb56eaba9",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1852),
                            Price = 120000.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "d19e67e1-d430-45c7-b9d9-8c01187d1359",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1856),
                            Price = 35000.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "7372af6f-9469-4f99-8e40-d087e38af149",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1859),
                            Price = 45000.0,
                            ProductId = "P012",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = "C3",
                            CategoryName = "Manga",
                            Description = "Manga characters"
                        },
                        new
                        {
                            CategoryId = "C4",
                            CategoryName = "Movie",
                            Description = "Movie characters"
                        },
                        new
                        {
                            CategoryId = "C5",
                            CategoryName = "Comic",
                            Description = "Comic book characters"
                        },
                        new
                        {
                            CategoryId = "C6",
                            CategoryName = "Mythology",
                            Description = "Mythological characters"
                        },
                        new
                        {
                            CategoryId = "C7",
                            CategoryName = "Fantasy",
                            Description = "Fantasy world characters"
                        },
                        new
                        {
                            CategoryId = "C8",
                            CategoryName = "Sci-Fi",
                            Description = "Science fiction characters"
                        },
                        new
                        {
                            CategoryId = "C9",
                            CategoryName = "Superhero",
                            Description = "Superhero characters"
                        },
                        new
                        {
                            CategoryId = "C10",
                            CategoryName = "Villains",
                            Description = "Famous villain characters"
                        },
                        new
                        {
                            CategoryId = "C11",
                            CategoryName = "Robot",
                            Description = "AI and robot characters"
                        },
                        new
                        {
                            CategoryId = "C12",
                            CategoryName = "Historical",
                            Description = "Historical figures in fiction"
                        },
                        new
                        {
                            CategoryId = "C13",
                            CategoryName = "Horror",
                            Description = "Horror and thriller characters"
                        },
                        new
                        {
                            CategoryId = "C14",
                            CategoryName = "Detective",
                            Description = "Famous detective characters"
                        },
                        new
                        {
                            CategoryId = "C15",
                            CategoryName = "Sports",
                            Description = "Characters from sports anime/manga"
                        },
                        new
                        {
                            CategoryId = "C16",
                            CategoryName = "Magic",
                            Description = "Characters using magic or spells"
                        },
                        new
                        {
                            CategoryId = "C17",
                            CategoryName = "Slice of Life",
                            Description = "Everyday life characters"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float?>("MaxHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MaxWeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinWeight")
                        .HasColumnType("real");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CharacterId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Character");

                    b.HasData(
                        new
                        {
                            CharacterId = "CH001",
                            CategoryId = "C3",
                            CharacterName = "Naruto",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9495),
                            Description = "Ninja from Konoha",
                            IsActive = true,
                            MaxHeight = 180f,
                            MaxWeight = 80f,
                            MinHeight = 160f,
                            MinWeight = 50f,
                            Price = 100000.0,
                            Quantity = 5
                        },
                        new
                        {
                            CharacterId = "CH002",
                            CategoryId = "C3",
                            CharacterName = "Sasuke",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9504),
                            Description = "Naruto’s rival",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 120000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH003",
                            CategoryId = "C3",
                            CharacterName = "Goku",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9509),
                            Description = "Saiyan warrior",
                            IsActive = true,
                            MaxHeight = 190f,
                            MaxWeight = 90f,
                            MinHeight = 170f,
                            MinWeight = 60f,
                            Price = 150000.0,
                            Quantity = 4
                        },
                        new
                        {
                            CharacterId = "CH004",
                            CategoryId = "C4",
                            CharacterName = "Luffy",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9513),
                            Description = "Pirate King",
                            IsActive = true,
                            MaxHeight = 175f,
                            MaxWeight = 70f,
                            MinHeight = 155f,
                            MinWeight = 45f,
                            Price = 110000.0,
                            Quantity = 6
                        },
                        new
                        {
                            CharacterId = "CH005",
                            CategoryId = "C4",
                            CharacterName = "Ichigo",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9517),
                            Description = "Soul Reaper",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 130000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH006",
                            CategoryId = "C14",
                            CharacterName = "Mario",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9548),
                            Description = "Plumber hero",
                            IsActive = true,
                            MaxHeight = 160f,
                            MaxWeight = 70f,
                            MinHeight = 140f,
                            MinWeight = 50f,
                            Price = 80000.0,
                            Quantity = 5
                        },
                        new
                        {
                            CharacterId = "CH007",
                            CategoryId = "C14",
                            CharacterName = "Luigi",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9553),
                            Description = "Mario’s brother",
                            IsActive = true,
                            MaxHeight = 170f,
                            MaxWeight = 75f,
                            MinHeight = 150f,
                            MinWeight = 55f,
                            Price = 85000.0,
                            Quantity = 4
                        },
                        new
                        {
                            CharacterId = "CH008",
                            CategoryId = "C14",
                            CharacterName = "Link",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9557),
                            Description = "Hero of Hyrule",
                            IsActive = true,
                            MaxHeight = 180f,
                            MaxWeight = 80f,
                            MinHeight = 160f,
                            MinWeight = 50f,
                            Price = 140000.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH009",
                            CategoryId = "C16",
                            CharacterName = "Zelda",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9561),
                            Description = "Hyrule princess",
                            IsActive = true,
                            MaxHeight = 175f,
                            MaxWeight = 70f,
                            MinHeight = 155f,
                            MinWeight = 50f,
                            Price = 135000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH010",
                            CategoryId = "C16",
                            CharacterName = "Samus",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9567),
                            Description = "Bounty hunter",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 145000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH011",
                            CategoryId = "C13",
                            CharacterName = "Cloud",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9573),
                            Description = "Ex-SOLDIER",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 125000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH012",
                            CategoryId = "C13",
                            CharacterName = "Sephiroth",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9578),
                            Description = "One-Winged Angel",
                            IsActive = true,
                            MaxHeight = 190f,
                            MaxWeight = 90f,
                            MinHeight = 170f,
                            MinWeight = 60f,
                            Price = 155000.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH013",
                            CategoryId = "C8",
                            CharacterName = "Kratos",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9582),
                            Description = "God of War",
                            IsActive = true,
                            MaxHeight = 195f,
                            MaxWeight = 100f,
                            MinHeight = 175f,
                            MinWeight = 70f,
                            Price = 160000.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH014",
                            CategoryId = "C8",
                            CharacterName = "Pikachu",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9586),
                            Description = "Electric Pokemon",
                            IsActive = true,
                            MaxHeight = 50f,
                            MaxWeight = 20f,
                            MinHeight = 30f,
                            MinWeight = 10f,
                            Price = 90000.0,
                            Quantity = 10
                        },
                        new
                        {
                            CharacterId = "CH015",
                            CategoryId = "C8",
                            CharacterName = "Kirby",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9590),
                            Description = "Pink puffball",
                            IsActive = true,
                            MaxHeight = 60f,
                            MaxWeight = 25f,
                            MinHeight = 40f,
                            MinWeight = 15f,
                            Price = 95000.0,
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CharacterImage", b =>
                {
                    b.Property<string>("CharacterImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAvatar")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterImageId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterImage");

                    b.HasData(
                        new
                        {
                            CharacterImageId = "CI001",
                            CharacterId = "CH001",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1917),
                            UrlImage = "https://example.com/img1.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI002",
                            CharacterId = "CH002",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1922),
                            UrlImage = "https://example.com/img2.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI003",
                            CharacterId = "CH003",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1925),
                            UrlImage = "https://example.com/img3.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI004",
                            CharacterId = "CH004",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1927),
                            UrlImage = "https://example.com/img4.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI005",
                            CharacterId = "CH005",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1929),
                            UrlImage = "https://example.com/img5.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI006",
                            CharacterId = "CH006",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1931),
                            UrlImage = "https://example.com/img6.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI007",
                            CharacterId = "CH007",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1933),
                            UrlImage = "https://example.com/img7.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI008",
                            CharacterId = "CH008",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2120),
                            UrlImage = "https://example.com/img8.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI009",
                            CharacterId = "CH009",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2122),
                            UrlImage = "https://example.com/img9.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI010",
                            CharacterId = "CH010",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2124),
                            UrlImage = "https://example.com/img10.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI011",
                            CharacterId = "CH011",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2127),
                            UrlImage = "https://example.com/img11.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI012",
                            CharacterId = "CH012",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2129),
                            UrlImage = "https://example.com/img12.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI013",
                            CharacterId = "CH013",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2131),
                            UrlImage = "https://example.com/img13.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI014",
                            CharacterId = "CH014",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2133),
                            UrlImage = "https://example.com/img14.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI015",
                            CharacterId = "CH015",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2134),
                            UrlImage = "https://example.com/img15.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ContractName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<string>("Deposit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UrlPdf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Contract");

                    b.HasData(
                        new
                        {
                            ContractId = "CT002",
                            Amount = 0.0,
                            ContractName = "Character rental",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "100",
                            RequestId = "R002",
                            TotalPrice = 500000.0
                        },
                        new
                        {
                            ContractId = "CT005",
                            Amount = 350000.0,
                            ContractName = "Character rental",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "50",
                            RequestId = "R005",
                            TotalPrice = 700000.0
                        },
                        new
                        {
                            ContractId = "CT008",
                            Amount = 175000.0,
                            ContractName = "Character rental",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "50",
                            RequestId = "R008",
                            TotalPrice = 350000.0
                        },
                        new
                        {
                            ContractId = "CT010",
                            Amount = 100000.0,
                            ContractName = "Character rental",
                            ContractStatus = 5,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "50",
                            RequestId = "R010",
                            TotalPrice = 200000.0
                        },
                        new
                        {
                            ContractId = "CT014",
                            Amount = 0.0,
                            ContractName = "Character rental",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "100",
                            RequestId = "R014",
                            TotalPrice = 600000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CosplayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractCharacter");

                    b.HasData(
                        new
                        {
                            ContractCharacterId = "CC0021",
                            CharacterId = "CH001",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT002",
                            Quantity = 1,
                            TotalPrice = 150000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0022",
                            CharacterId = "CH002",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT002",
                            Quantity = 5,
                            TotalPrice = 180000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0023",
                            CharacterId = "CH003",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT002",
                            Quantity = 3,
                            TotalPrice = 170000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0051",
                            CharacterId = "CH004",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT005",
                            Quantity = 2,
                            TotalPrice = 200000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0052",
                            CharacterId = "CH005",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT005",
                            Quantity = 4,
                            TotalPrice = 250000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0053",
                            CharacterId = "CH006",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT005",
                            Quantity = 6,
                            TotalPrice = 250000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0081",
                            CharacterId = "CH007",
                            ContractId = "CT008",
                            CosplayerId = "A001",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT008",
                            Quantity = 1,
                            TotalPrice = 120000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0082",
                            CharacterId = "CH008",
                            ContractId = "CT008",
                            CosplayerId = "A008",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT008",
                            Quantity = 1,
                            TotalPrice = 130000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0083",
                            CharacterId = "CH009",
                            ContractId = "CT008",
                            CosplayerId = "A040",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT008",
                            Quantity = 1,
                            TotalPrice = 100000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0101",
                            CharacterId = "CH010",
                            ContractId = "CT010",
                            CosplayerId = "A040",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT010",
                            Quantity = 1,
                            TotalPrice = 70000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0102",
                            CharacterId = "CH011",
                            ContractId = "CT010",
                            CosplayerId = "A039",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT010",
                            Quantity = 1,
                            TotalPrice = 80000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0103",
                            CharacterId = "CH012",
                            ContractId = "CT010",
                            CosplayerId = "A038",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT010",
                            Quantity = 1,
                            TotalPrice = 50000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0141",
                            CharacterId = "CH013",
                            ContractId = "CT014",
                            CosplayerId = "A035",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT014",
                            Quantity = 1,
                            TotalPrice = 200000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0142",
                            CharacterId = "CH014",
                            ContractId = "CT014",
                            CosplayerId = "A040",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT014",
                            Quantity = 1,
                            TotalPrice = 250000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0143",
                            CharacterId = "CH015",
                            ContractId = "CT014",
                            CosplayerId = "A005",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT014",
                            Quantity = 1,
                            TotalPrice = 150000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractImage", b =>
                {
                    b.Property<string>("ContractImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractImageId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractImage");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractRefund", b =>
                {
                    b.Property<string>("ContractRefundId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountBankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CraeteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractRefundId");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("ContractRefund");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Coupon", b =>
                {
                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CouponId");

                    b.ToTable("Coupon");

                    b.HasData(
                        new
                        {
                            CouponId = "CP001",
                            Amount = 50000.0,
                            Condition = "Min order 500",
                            EndDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP002",
                            Amount = 150000.0,
                            Condition = "Min order 1000",
                            EndDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 15f,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP003",
                            Amount = 400000.0,
                            Condition = "Min contract 2000",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP004",
                            Amount = 180000.0,
                            Condition = "Min order 1500",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 12f,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP005",
                            Amount = 750000.0,
                            Condition = "Min contract 3000",
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 25f,
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP006",
                            Amount = 100000.0,
                            Condition = "New customers only",
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP007",
                            Amount = 200000.0,
                            Condition = "Holiday Special",
                            EndDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP008",
                            Amount = 600000.0,
                            Condition = "VIP customers",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 30f,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP009",
                            Amount = 120000.0,
                            Condition = "Summer Sale",
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 15f,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP010",
                            Amount = 1000000.0,
                            Condition = "Black Friday",
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 50f,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP011",
                            Amount = 75000.0,
                            Condition = "Back to School",
                            EndDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP012",
                            Amount = 1750000.0,
                            Condition = "Min contract 5000",
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 35f,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP013",
                            Amount = 250000.0,
                            Condition = "Loyal Customers",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP014",
                            Amount = 800000.0,
                            Condition = "Cyber Monday",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 40f,
                            StartDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP015",
                            Amount = 50000.0,
                            Condition = "Referral Bonus",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacter", b =>
                {
                    b.Property<string>("CustomerCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("MaxHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MaxWeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinWeight")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerCharacterId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CustomerCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacterImage", b =>
                {
                    b.Property<string>("CustomerCharacterImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerCharacterImageId");

                    b.HasIndex("CustomerCharacterId");

                    b.ToTable("CustomerCharacterImage");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventId = "E001",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(31),
                            Description = "A grand celebration to welcome the new year",
                            EndDate = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "New Year Festival",
                            IsActive = true,
                            Location = "Times Square, New York",
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E002",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(35),
                            Description = "Experience the beauty of cherry blossoms",
                            EndDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Spring Blossom Fest",
                            IsActive = true,
                            Location = "Kyoto, Japan",
                            StartDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E003",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(38),
                            Description = "Showcasing the latest in technology and AI",
                            EndDate = new DateTime(2025, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Tech Innovation Summit",
                            IsActive = true,
                            Location = "Silicon Valley",
                            StartDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E004",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(43),
                            Description = "Live performances from top artists",
                            EndDate = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Music Fest",
                            IsActive = true,
                            Location = "Coachella, California",
                            StartDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E005",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(46),
                            Description = "A must-attend event for comic book fans",
                            EndDate = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Comic-Con International",
                            IsActive = true,
                            Location = "San Diego Convention Center",
                            StartDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E006",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(49),
                            Description = "Largest anime convention in the world",
                            EndDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Anime Expo",
                            IsActive = true,
                            Location = "Los Angeles Convention Center",
                            StartDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E007",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(52),
                            Description = "Latest trends and releases in gaming",
                            EndDate = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Gaming Expo",
                            IsActive = true,
                            Location = "Las Vegas Convention Center",
                            StartDate = new DateTime(2025, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E008",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(54),
                            Description = "A fun-filled summer celebration",
                            EndDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Summer Festival",
                            IsActive = true,
                            Location = "Miami Beach, Florida",
                            StartDate = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E009",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(57),
                            Description = "A paradise for cosplayers",
                            EndDate = new DateTime(2025, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Cosplay Festival",
                            IsActive = true,
                            Location = "Tokyo Big Sight",
                            StartDate = new DateTime(2025, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E010",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(60),
                            Description = "Showcasing the best movies of the year",
                            EndDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Film Festival",
                            IsActive = true,
                            Location = "Cannes, France",
                            StartDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E011",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(63),
                            Description = "Spooky celebrations and costume parties",
                            EndDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Halloween Night",
                            IsActive = true,
                            Location = "Salem, Massachusetts",
                            StartDate = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E012",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(67),
                            Description = "Festive shopping and holiday cheer",
                            EndDate = new DateTime(2025, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Christmas Market",
                            IsActive = true,
                            Location = "Nuremberg, Germany",
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventActivity", b =>
                {
                    b.Property<string>("EventActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EventId");

                    b.ToTable("EventActivity");

                    b.HasData(
                        new
                        {
                            EventActivityId = "EA001",
                            ActivityId = "ACT001",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1474),
                            Description = "Yoga for a fresh start",
                            EventId = "E001"
                        },
                        new
                        {
                            EventActivityId = "EA002",
                            ActivityId = "ACT005",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1476),
                            Description = "Tech trends in the new year",
                            EventId = "E001"
                        },
                        new
                        {
                            EventActivityId = "EA003",
                            ActivityId = "ACT004",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1478),
                            Description = "Painting cherry blossoms",
                            EventId = "E002"
                        },
                        new
                        {
                            EventActivityId = "EA004",
                            ActivityId = "ACT013",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1480),
                            Description = "AI and future coding",
                            EventId = "E003"
                        },
                        new
                        {
                            EventActivityId = "EA005",
                            ActivityId = "ACT009",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1482),
                            Description = "Dance battles live",
                            EventId = "E004"
                        },
                        new
                        {
                            EventActivityId = "EA006",
                            ActivityId = "ACT003",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1484),
                            Description = "Comic-Con live music",
                            EventId = "E005"
                        },
                        new
                        {
                            EventActivityId = "EA007",
                            ActivityId = "ACT007",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1488),
                            Description = "Anime and book discussions",
                            EventId = "E006"
                        },
                        new
                        {
                            EventActivityId = "EA008",
                            ActivityId = "ACT010",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1490),
                            Description = "Chess and gaming",
                            EventId = "E007"
                        },
                        new
                        {
                            EventActivityId = "EA009",
                            ActivityId = "ACT011",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1492),
                            Description = "Outdoor movie fun",
                            EventId = "E008"
                        },
                        new
                        {
                            EventActivityId = "EA010",
                            ActivityId = "ACT015",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1493),
                            Description = "Meditation for cosplayers",
                            EventId = "E009"
                        },
                        new
                        {
                            EventActivityId = "EA011",
                            ActivityId = "ACT012",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1496),
                            Description = "Science in filmmaking",
                            EventId = "E010"
                        },
                        new
                        {
                            EventActivityId = "EA012",
                            ActivityId = "ACT006",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1497),
                            Description = "Halloween charity run",
                            EventId = "E011"
                        },
                        new
                        {
                            EventActivityId = "EA013",
                            ActivityId = "ACT014",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1526),
                            Description = "Christmas gardening",
                            EventId = "E012"
                        },
                        new
                        {
                            EventActivityId = "EA014",
                            ActivityId = "ACT002",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1530),
                            Description = "Cooking for music lovers",
                            EventId = "E004"
                        },
                        new
                        {
                            EventActivityId = "EA015",
                            ActivityId = "ACT008",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(1534),
                            Description = "Photography in tech",
                            EventId = "E003"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.Property<string>("EventCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsAssign")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCharacter");

                    b.HasData(
                        new
                        {
                            EventCharacterId = "EC001",
                            CharacterId = "CH001",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1414),
                            EventId = "E001",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC002",
                            CharacterId = "CH002",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1417),
                            EventId = "E002",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC003",
                            CharacterId = "CH003",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1421),
                            EventId = "E003",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC004",
                            CharacterId = "CH004",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1423),
                            EventId = "E004",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC005",
                            CharacterId = "CH005",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1425),
                            EventId = "E005",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC006",
                            CharacterId = "CH006",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1427),
                            EventId = "E006",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC007",
                            CharacterId = "CH007",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1429),
                            EventId = "E007",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC008",
                            CharacterId = "CH008",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1431),
                            EventId = "E008",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC009",
                            CharacterId = "CH009",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1433),
                            EventId = "E009",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC010",
                            CharacterId = "CH010",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1435),
                            EventId = "E010",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC011",
                            CharacterId = "CH011",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1439),
                            EventId = "E011",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC012",
                            CharacterId = "CH012",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1441),
                            EventId = "E012",
                            IsAssign = true
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAvatar")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageId");

                    b.HasIndex("EventId");

                    b.ToTable("EventImage");

                    b.HasData(
                        new
                        {
                            ImageId = "EI001",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2168),
                            EventId = "E001",
                            ImageUrl = "https://example.com/event1.jpg"
                        },
                        new
                        {
                            ImageId = "EI002",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2171),
                            EventId = "E002",
                            ImageUrl = "https://example.com/event2.jpg"
                        },
                        new
                        {
                            ImageId = "EI003",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2174),
                            EventId = "E003",
                            ImageUrl = "https://example.com/event3.jpg"
                        },
                        new
                        {
                            ImageId = "EI004",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2177),
                            EventId = "E004",
                            ImageUrl = "https://example.com/event4.jpg"
                        },
                        new
                        {
                            ImageId = "EI005",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2179),
                            EventId = "E005",
                            ImageUrl = "https://example.com/event5.jpg"
                        },
                        new
                        {
                            ImageId = "EI006",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2181),
                            EventId = "E006",
                            ImageUrl = "https://example.com/event6.jpg"
                        },
                        new
                        {
                            ImageId = "EI007",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2183),
                            EventId = "E007",
                            ImageUrl = "https://example.com/event7.jpg"
                        },
                        new
                        {
                            ImageId = "EI008",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2185),
                            EventId = "E008",
                            ImageUrl = "https://example.com/event8.jpg"
                        },
                        new
                        {
                            ImageId = "EI009",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2187),
                            EventId = "E009",
                            ImageUrl = "https://example.com/event9.jpg"
                        },
                        new
                        {
                            ImageId = "EI010",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2189),
                            EventId = "E010",
                            ImageUrl = "https://example.com/event10.jpg"
                        },
                        new
                        {
                            ImageId = "EI011",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2191),
                            EventId = "E011",
                            ImageUrl = "https://example.com/event11.jpg"
                        },
                        new
                        {
                            ImageId = "EI012",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2194),
                            EventId = "E012",
                            ImageUrl = "https://example.com/event12.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractCharacterId")
                        .IsUnique()
                        .HasFilter("[ContractCharacterId] IS NOT NULL");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            FeedbackId = "f34a7cd8-b0d8-4d19-ab29-e72e2ce8b439",
                            AccountId = "A001",
                            ContractCharacterId = "CC0021",
                            CreateBy = "A001",
                            CreateDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Great experience!"
                        },
                        new
                        {
                            FeedbackId = "0480eefb-4c03-41fc-bf72-c09134c44a2e",
                            AccountId = "A004",
                            ContractCharacterId = "CC0022",
                            CreateBy = "A004",
                            CreateDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Loved the event!"
                        },
                        new
                        {
                            FeedbackId = "f2f57389-34f1-4d73-9adc-cca5360db259",
                            AccountId = "A005",
                            ContractCharacterId = "CC0023",
                            CreateBy = "A005",
                            CreateDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice cosplay session!"
                        },
                        new
                        {
                            FeedbackId = "d2d967d6-ff85-41a9-b585-a7fc83b48d19",
                            AccountId = "A007",
                            ContractCharacterId = "CC0051",
                            CreateBy = "A007",
                            CreateDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enjoyed the event!"
                        },
                        new
                        {
                            FeedbackId = "91253482-6fc7-437f-843f-a172d4e0b5b6",
                            AccountId = "A008",
                            ContractCharacterId = "CC0052",
                            CreateBy = "A008",
                            CreateDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Would love to join again!"
                        },
                        new
                        {
                            FeedbackId = "ad807b16-6a50-4b1c-aaed-6552672d1557",
                            AccountId = "A010",
                            ContractCharacterId = "CC0053",
                            CreateBy = "A010",
                            CreateDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The atmosphere was amazing!"
                        },
                        new
                        {
                            FeedbackId = "701760e5-e859-4628-83be-b3646cc5a383",
                            AccountId = "A012",
                            ContractCharacterId = "CC0081",
                            CreateBy = "A012",
                            CreateDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Best cosplay event!"
                        },
                        new
                        {
                            FeedbackId = "6c231371-740e-4493-854a-b8bfb268c2db",
                            AccountId = "A013",
                            ContractCharacterId = "CC0082",
                            CreateBy = "A013",
                            CreateDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice crowd and management!"
                        },
                        new
                        {
                            FeedbackId = "1fb9cdbe-865f-4381-90cc-666b52684563",
                            AccountId = "A015",
                            ContractCharacterId = "CC0083",
                            CreateBy = "A015",
                            CreateDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amazing experience!"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSentMail")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            Id = "N001",
                            AccountId = "A001",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(700),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Welcome to the system!"
                        },
                        new
                        {
                            Id = "N002",
                            AccountId = "A002",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(703),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your account has been upgraded."
                        },
                        new
                        {
                            Id = "N003",
                            AccountId = "A003",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(705),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "New promotional offer available!"
                        },
                        new
                        {
                            Id = "N004",
                            AccountId = "A004",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(707),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your request has been approved."
                        },
                        new
                        {
                            Id = "N005",
                            AccountId = "A005",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(709),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "System maintenance scheduled."
                        },
                        new
                        {
                            Id = "N006",
                            AccountId = "A006",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(711),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your order has been shipped!"
                        },
                        new
                        {
                            Id = "N007",
                            AccountId = "A007",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(715),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "New event registration open."
                        },
                        new
                        {
                            Id = "N008",
                            AccountId = "A008",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(717),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "Reminder: Payment due soon."
                        },
                        new
                        {
                            Id = "N009",
                            AccountId = "A009",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(719),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your password was changed."
                        },
                        new
                        {
                            Id = "N010",
                            AccountId = "A010",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(721),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Admin announcement update."
                        },
                        new
                        {
                            Id = "N011",
                            AccountId = "A011",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(723),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "New message from support."
                        },
                        new
                        {
                            Id = "N012",
                            AccountId = "A012",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(725),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Upcoming event invitation."
                        },
                        new
                        {
                            Id = "N013",
                            AccountId = "A013",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(727),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "New cosplayer contest."
                        },
                        new
                        {
                            Id = "N014",
                            AccountId = "A014",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(729),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "Loyalty points updated."
                        },
                        new
                        {
                            Id = "N015",
                            AccountId = "A015",
                            CreatedAt = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(733),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your subscription expired."
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderId = "O001",
                            AccountId = "A003",
                            OrderDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 250000.0
                        },
                        new
                        {
                            OrderId = "O002",
                            AccountId = "A006",
                            OrderDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 150000.5
                        },
                        new
                        {
                            OrderId = "O003",
                            AccountId = "A011",
                            OrderDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 300000.0
                        },
                        new
                        {
                            OrderId = "O004",
                            AccountId = "A014",
                            OrderDate = new DateTime(2024, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 400000.0
                        },
                        new
                        {
                            OrderId = "O005",
                            AccountId = "A003",
                            OrderDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 175000.0
                        },
                        new
                        {
                            OrderId = "O006",
                            AccountId = "A006",
                            OrderDate = new DateTime(2024, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 225000.0
                        },
                        new
                        {
                            OrderId = "O007",
                            AccountId = "A011",
                            OrderDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 350000.0
                        },
                        new
                        {
                            OrderId = "O008",
                            AccountId = "A014",
                            OrderDate = new DateTime(2024, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 275000.0
                        },
                        new
                        {
                            OrderId = "O009",
                            AccountId = "A003",
                            OrderDate = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 500000.0
                        },
                        new
                        {
                            OrderId = "O010",
                            AccountId = "A006",
                            OrderDate = new DateTime(2024, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 125000.0
                        },
                        new
                        {
                            OrderId = "O011",
                            AccountId = "A011",
                            OrderDate = new DateTime(2024, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 325000.0
                        },
                        new
                        {
                            OrderId = "O012",
                            AccountId = "A014",
                            OrderDate = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 410000.0
                        },
                        new
                        {
                            OrderId = "O013",
                            AccountId = "A003",
                            OrderDate = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 280000.0
                        },
                        new
                        {
                            OrderId = "O014",
                            AccountId = "A006",
                            OrderDate = new DateTime(2024, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 350000.0
                        },
                        new
                        {
                            OrderId = "O015",
                            AccountId = "A011",
                            OrderDate = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 200000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.OrderProduct", b =>
                {
                    b.Property<string>("OrderProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");

                    b.HasData(
                        new
                        {
                            OrderProductId = "abc43807-94f7-4960-aca0-8b46231b9347",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2222),
                            OrderId = "O001",
                            Price = 30000.0,
                            ProductId = "P001",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "d1c669ab-7f95-4031-8063-0a4c25cdd1e8",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2225),
                            OrderId = "O001",
                            Price = 20000.0,
                            ProductId = "P002",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "11384f9c-d550-47d8-9023-5f3f1910c6a0",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2228),
                            OrderId = "O002",
                            Price = 80000.0,
                            ProductId = "P003",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "d135045c-e37d-4dde-89e7-ea63d7a42918",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2233),
                            OrderId = "O002",
                            Price = 100000.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "827474be-bc27-4eea-963c-9cb794c3e5c5",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2237),
                            OrderId = "O003",
                            Price = 25000.0,
                            ProductId = "P005",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "62118a71-973d-4058-9b87-49761e5e7f99",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2240),
                            OrderId = "O003",
                            Price = 40000.0,
                            ProductId = "P006",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "847f313f-7628-4792-9680-586d0c8b15c2",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2261),
                            OrderId = "O004",
                            Price = 15000.0,
                            ProductId = "P007",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "e6b893d6-4a87-4a01-afcf-8ce41e7eaf8f",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2266),
                            OrderId = "O004",
                            Price = 50000.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "ec15d416-bca9-42f8-ae48-fc5956e2496c",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2269),
                            OrderId = "O005",
                            Price = 60000.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "1f5c451c-71fe-4e08-9078-f007f3147c08",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2272),
                            OrderId = "O005",
                            Price = 120000.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "0944dd3e-05a2-48b8-8adb-16719ddc7ca3",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2275),
                            OrderId = "O006",
                            Price = 35000.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "1d5d4f65-5672-4e7b-b7a2-8e4840f101d3",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2279),
                            OrderId = "O006",
                            Price = 45000.0,
                            ProductId = "P012",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "20f28d1f-7d9f-48b3-b556-f71307e9ba26",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2282),
                            OrderId = "O007",
                            Price = 18000.0,
                            ProductId = "P013",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "64fb5d21-2bbf-498d-914c-f496940309ed",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2285),
                            OrderId = "O007",
                            Price = 90000.0,
                            ProductId = "P014",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "672ae561-d661-47f5-9e91-ad9ed6fe2555",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2288),
                            OrderId = "O008",
                            Price = 22000.0,
                            ProductId = "P015",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "912bb02b-6be3-4492-a27e-708b3f6f67c9",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2292),
                            OrderId = "O008",
                            Price = 30000.0,
                            ProductId = "P001",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "80705c3d-8100-497f-9c00-cf80dc2ce3de",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2295),
                            OrderId = "O009",
                            Price = 20000.0,
                            ProductId = "P002",
                            Quantity = 6
                        },
                        new
                        {
                            OrderProductId = "2257b900-078e-4804-b0db-ff1257f42f04",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2298),
                            OrderId = "O009",
                            Price = 80000.0,
                            ProductId = "P003",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "f23fa49e-f379-4d9c-a920-a529f4eb0147",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2301),
                            OrderId = "O010",
                            Price = 100000.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "036ad167-718a-4bd1-93a6-8873216a49a8",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2305),
                            OrderId = "O010",
                            Price = 25000.0,
                            ProductId = "P005",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "9a0716f0-0e7c-4034-b1f1-23a5de167a5b",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2308),
                            OrderId = "O011",
                            Price = 40000.0,
                            ProductId = "P006",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "05f02128-6608-413e-9c5b-ed877eb1755e",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2311),
                            OrderId = "O011",
                            Price = 15000.0,
                            ProductId = "P007",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "e5448675-48bd-4353-b069-36e5c9fb2b51",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2314),
                            OrderId = "O012",
                            Price = 50000.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "71c987d2-f1b6-48d8-b816-ef7da4be2e34",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2319),
                            OrderId = "O012",
                            Price = 60000.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "bd0f9e0b-2ffd-4b2f-bb0c-edf17a2a3274",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2322),
                            OrderId = "O013",
                            Price = 120000.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "41e8bf76-2c88-4ba0-b4ba-34bfc2de67d4",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2325),
                            OrderId = "O013",
                            Price = 35000.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "50d0a55c-72c9-4fb3-9690-a682271c60e2",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2328),
                            OrderId = "O014",
                            Price = 45000.0,
                            ProductId = "P012",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "5446ddfe-a72d-4f31-8286-a99bf3fbcae1",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2332),
                            OrderId = "O014",
                            Price = 18000.0,
                            ProductId = "P013",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "34d04e80-3103-4088-a9cb-530634b9b821",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2335),
                            OrderId = "O015",
                            Price = 90000.0,
                            ProductId = "P014",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "f33a861b-793a-4b01-b03e-9a1e7e89b084",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2338),
                            OrderId = "O015",
                            Price = 22000.0,
                            ProductId = "P015",
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("PackageId");

                    b.ToTable("Package");

                    b.HasData(
                        new
                        {
                            PackageId = "PKG001",
                            Description = "Rent a single character for an event",
                            PackageName = "Basic Character Rental",
                            Price = 100000.0
                        },
                        new
                        {
                            PackageId = "PKG002",
                            Description = "Rent multiple characters with costumes",
                            PackageName = "Deluxe Character Rental",
                            Price = 250000.0
                        },
                        new
                        {
                            PackageId = "PKG003",
                            Description = "Full-day character rental service",
                            PackageName = "Ultimate Character Rental",
                            Price = 500000.0
                        },
                        new
                        {
                            PackageId = "PKG004",
                            Description = "Basic cosplay performance at an event",
                            PackageName = "Standard Cosplay Performance",
                            Price = 150000.0
                        },
                        new
                        {
                            PackageId = "PKG005",
                            Description = "Advanced performance with choreography",
                            PackageName = "Premium Cosplay Performance",
                            Price = 300000.0
                        },
                        new
                        {
                            PackageId = "PKG006",
                            Description = "Exclusive show with audience interaction",
                            PackageName = "VIP Cosplay Performance",
                            Price = 500000.0
                        },
                        new
                        {
                            PackageId = "PKG007",
                            Description = "30-minute photoshoot with cosplayers",
                            PackageName = "Mini Photography Session",
                            Price = 80000.0
                        },
                        new
                        {
                            PackageId = "PKG008",
                            Description = "1-hour professional photoshoot",
                            PackageName = "Standard Photography Session",
                            Price = 150000.0
                        },
                        new
                        {
                            PackageId = "PKG009",
                            Description = "Complete photoshoot with editing",
                            PackageName = "Full Photography Package",
                            Price = 300000.0
                        },
                        new
                        {
                            PackageId = "PKG010",
                            Description = "Includes exclusive cosplay merchandise",
                            PackageName = "Basic Merchandise Pack",
                            Price = 50000.0
                        },
                        new
                        {
                            PackageId = "PKG011",
                            Description = "Premium cosplay collectibles",
                            PackageName = "Deluxe Merchandise Pack",
                            Price = 150000.0
                        },
                        new
                        {
                            PackageId = "PKG012",
                            Description = "Limited edition cosplay items",
                            PackageName = "Ultimate Merchandise Pack",
                            Price = 300000.0
                        },
                        new
                        {
                            PackageId = "PKG013",
                            Description = "Beginner-friendly cosplay training",
                            PackageName = "Cosplay Basics Workshop",
                            Price = 100000.0
                        },
                        new
                        {
                            PackageId = "PKG014",
                            Description = "In-depth cosplay and makeup course",
                            PackageName = "Advanced Cosplay Training",
                            Price = 2500000.0
                        },
                        new
                        {
                            PackageId = "PKG015",
                            Description = "Professional-level training for cosplayers",
                            PackageName = "Master Cosplay Workshop",
                            Price = 500000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountCouponID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("AccountCouponID")
                        .IsUnique()
                        .HasFilter("[AccountCouponID] IS NOT NULL");

                    b.HasIndex("ContractId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TicketAccountId")
                        .IsUnique()
                        .HasFilter("[TicketAccountId] IS NOT NULL");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            PaymentId = "P001",
                            AccountCouponID = "AC001",
                            Amount = 250000.0,
                            CreatAt = new DateTime(2024, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA001",
                            TransactionId = "TXN001",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P002",
                            Amount = 150000.5,
                            CreatAt = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 0,
                            TicketAccountId = "TA002",
                            TransactionId = "TXN002",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P003",
                            Amount = 90000.0,
                            CreatAt = new DateTime(2024, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA003",
                            TransactionId = "TXN003",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P004",
                            AccountCouponID = "AC012",
                            Amount = 400000.0,
                            CreatAt = new DateTime(2024, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA004",
                            TransactionId = "TXN004",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P005",
                            Amount = 175000.0,
                            CreatAt = new DateTime(2024, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 2,
                            TicketAccountId = "TA005",
                            TransactionId = "TXN005",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P006",
                            AccountCouponID = "AC003",
                            Amount = 225000.0,
                            CreatAt = new DateTime(2024, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O006",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN006",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P007",
                            Amount = 350000.0,
                            CreatAt = new DateTime(2024, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O007",
                            Purpose = 3,
                            Status = 0,
                            TransactionId = "TXN007",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P008",
                            Amount = 150000.0,
                            CreatAt = new DateTime(2024, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O008",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN008",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P009",
                            Amount = 500000.0,
                            CreatAt = new DateTime(2024, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O009",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN009",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P010",
                            AccountCouponID = "AC004",
                            Amount = 125000.0,
                            CreatAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O010",
                            Purpose = 3,
                            Status = 2,
                            TransactionId = "TXN010",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P011",
                            Amount = 325000.0,
                            ContractId = "CT002",
                            CreatAt = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 1,
                            Status = 1,
                            TransactionId = "TXN011",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P012",
                            Amount = 410000.0,
                            ContractId = "CT005",
                            CreatAt = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 1,
                            Status = 0,
                            TransactionId = "TXN012",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P013",
                            Amount = 90000.0,
                            ContractId = "CT008",
                            CreatAt = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 1,
                            TransactionId = "TXN013",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P014",
                            Amount = 350000.0,
                            ContractId = "CT010",
                            CreatAt = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 2,
                            TransactionId = "TXN014",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P015",
                            Amount = 200000.0,
                            ContractId = "CT002",
                            CreatAt = new DateTime(2024, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 1,
                            TransactionId = "TXN015",
                            Type = "Card"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = "P001",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9668),
                            Description = "A wig for Naruto cosplay",
                            IsActive = true,
                            Price = 30000.0,
                            ProductName = "Naruto Wig",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "P002",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9674),
                            Description = "A hat for Mario cosplay",
                            IsActive = true,
                            Price = 20000.0,
                            ProductName = "Mario Hat",
                            Quantity = 15
                        },
                        new
                        {
                            ProductId = "P003",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9679),
                            Description = "Complete costume for Sasuke cosplay",
                            IsActive = true,
                            Price = 80000.0,
                            ProductName = "Sasuke Costume",
                            Quantity = 5
                        },
                        new
                        {
                            ProductId = "P004",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9682),
                            Description = "Replica sword from The Legend of Zelda",
                            IsActive = true,
                            Price = 100000.0,
                            ProductName = "Zelda Sword",
                            Quantity = 7
                        },
                        new
                        {
                            ProductId = "P005",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9752),
                            Description = "Iconic straw hat from One Piece",
                            IsActive = true,
                            Price = 25000.0,
                            ProductName = "One Piece Straw Hat",
                            Quantity = 20
                        },
                        new
                        {
                            ProductId = "P006",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9755),
                            Description = "Hatsune Miku blue twin-tail wig",
                            IsActive = true,
                            Price = 40000.0,
                            ProductName = "Miku Wig",
                            Quantity = 12
                        },
                        new
                        {
                            ProductId = "P007",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9758),
                            Description = "Tanjiro's iconic hanafuda earrings",
                            IsActive = true,
                            Price = 15000.0,
                            ProductName = "Demon Slayer Earrings",
                            Quantity = 30
                        },
                        new
                        {
                            ProductId = "P008",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9761),
                            Description = "Survey Corps uniform jacket",
                            IsActive = true,
                            Price = 50000.0,
                            ProductName = "Attack on Titan Jacket",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "P009",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9764),
                            Description = "Cozy Pikachu-themed onesie",
                            IsActive = true,
                            Price = 60000.0,
                            ProductName = "Pikachu Onesie",
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = "P010",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9767),
                            Description = "Final Fantasy VII replica sword",
                            IsActive = true,
                            Price = 120000.0,
                            ProductName = "Cloud's Buster Sword",
                            Quantity = 4
                        },
                        new
                        {
                            ProductId = "P011",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9798),
                            Description = "LED Vision accessory from Genshin Impact",
                            IsActive = true,
                            Price = 35000.0,
                            ProductName = "Genshin Impact Vision",
                            Quantity = 25
                        },
                        new
                        {
                            ProductId = "P012",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9802),
                            Description = "Jinx cosplay wig from Arcane",
                            IsActive = true,
                            Price = 45000.0,
                            ProductName = "Jinx Wig",
                            Quantity = 6
                        },
                        new
                        {
                            ProductId = "P013",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9805),
                            Description = "Golden tiara from Sailor Moon",
                            IsActive = true,
                            Price = 18000.0,
                            ProductName = "Sailor Moon Tiara",
                            Quantity = 15
                        },
                        new
                        {
                            ProductId = "P014",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9809),
                            Description = "High-quality Spider-Man suit",
                            IsActive = true,
                            Price = 90000.0,
                            ProductName = "Spider-Man Suit",
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = "P015",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9813),
                            Description = "Replica wand from Harry Potter series",
                            IsActive = true,
                            Price = 22000.0,
                            ProductName = "Harry Potter Wand",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ProductImage", b =>
                {
                    b.Property<string>("ProductImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAvatar")
                        .HasColumnType("bit");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            ProductImageId = "IMG001",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2491),
                            ProductId = "P001",
                            UrlImage = "https://example.com/images/naruto_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG002",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2494),
                            ProductId = "P002",
                            UrlImage = "https://example.com/images/mario_hat.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG003",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2496),
                            ProductId = "P003",
                            UrlImage = "https://example.com/images/sasuke_costume.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG004",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2498),
                            ProductId = "P004",
                            UrlImage = "https://example.com/images/zelda_sword.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG005",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2502),
                            ProductId = "P005",
                            UrlImage = "https://example.com/images/one_piece_hat.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG006",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2504),
                            ProductId = "P006",
                            UrlImage = "https://example.com/images/miku_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG007",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2506),
                            ProductId = "P007",
                            UrlImage = "https://example.com/images/demon_slayer_earrings.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG008",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2508),
                            ProductId = "P008",
                            UrlImage = "https://example.com/images/aot_jacket.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG009",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2510),
                            ProductId = "P009",
                            UrlImage = "https://example.com/images/pikachu_onesie.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG010",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2512),
                            ProductId = "P010",
                            UrlImage = "https://example.com/images/buster_sword.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG011",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2514),
                            ProductId = "P011",
                            UrlImage = "https://example.com/images/genshin_vision.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG012",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2516),
                            ProductId = "P012",
                            UrlImage = "https://example.com/images/jinx_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG013",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2520),
                            ProductId = "P013",
                            UrlImage = "https://example.com/images/sailor_moon_tiara.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG014",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2522),
                            ProductId = "P014",
                            UrlImage = "https://example.com/images/spiderman_suit.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG015",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2524),
                            ProductId = "P015",
                            UrlImage = "https://example.com/images/harry_potter_wand.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.Property<string>("RefreshTokenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("AccountId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountCouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Deposit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestId");

                    b.HasIndex("AccountCouponId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PackageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Request");

                    b.HasData(
                        new
                        {
                            RequestId = "R001",
                            AccountId = "A001",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(973),
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Rent Naruto Costume",
                            PackageId = "PKG001",
                            Price = 100000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R002",
                            AccountId = "A002",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(998),
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "ĐN",
                            Name = "Rent Cosplayer for Event",
                            Price = 500000.0,
                            Reason = "Cosplayer is busy",
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R003",
                            AccountId = "A003",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1003),
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "BD",
                            Name = "Create Anime Festival",
                            Price = 2000000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R004",
                            AccountId = "A004",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1008),
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HN",
                            Name = "Rent Samurai Armor",
                            Price = 150000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R005",
                            AccountId = "A005",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1012),
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "BT",
                            Name = "Hire Professional Cosplayer",
                            PackageId = "PKG002",
                            Price = 700000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R006",
                            AccountId = "A006",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1016),
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Organize Comic Convention",
                            Price = 5000000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R007",
                            AccountId = "A007",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1019),
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Rent Victorian Costume",
                            Price = 120000.0,
                            Reason = "Cosplayer is busy",
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R008",
                            AccountId = "A008",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1024),
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "QN",
                            Name = "Book Cosplayer for Birthday Party",
                            Price = 350000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R009",
                            AccountId = "A009",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1027),
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "CM",
                            Name = "Plan Fantasy Fair",
                            Price = 3000000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R010",
                            AccountId = "A010",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1032),
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "LĐ",
                            Name = "Rent Halloween Costumes",
                            Price = 200000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R011",
                            AccountId = "A011",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1036),
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "NT",
                            Name = "Hire Cosplayer for Wedding",
                            PackageId = "PKG010",
                            Price = 800000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R012",
                            AccountId = "A012",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1042),
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "VT",
                            Name = "Create Sci-Fi Convention",
                            Price = 4500000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R013",
                            AccountId = "A013",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1045),
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Rent Santa Claus Costume",
                            Price = 130000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R014",
                            AccountId = "A014",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1050),
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HN",
                            Name = "Book Cosplayer for Product Launch",
                            Price = 600000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R015",
                            AccountId = "A015",
                            CreatedDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1055),
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Host Christmas Event",
                            PackageId = "PKG015",
                            Price = 5500000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestCharacter", b =>
                {
                    b.Property<string>("RequestCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CosplayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestCharacter");

                    b.HasData(
                        new
                        {
                            RequestCharacterId = "RC01",
                            CharacterId = "CH001",
                            CosplayerId = "A025",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2554),
                            Description = "Yêu cầu cosplay nhân vật CH001",
                            Quantity = 1,
                            RequestId = "R001",
                            TotalPrice = 50000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2555)
                        },
                        new
                        {
                            RequestCharacterId = "RC02",
                            CharacterId = "CH002",
                            CosplayerId = "A026",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2558),
                            Description = "Yêu cầu cosplay nhân vật CH002",
                            Quantity = 1,
                            RequestId = "R002",
                            TotalPrice = 60000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2559)
                        },
                        new
                        {
                            RequestCharacterId = "RC03",
                            CharacterId = "CH003",
                            CosplayerId = "A027",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2562),
                            Description = "Yêu cầu cosplay nhân vật CH003",
                            Quantity = 1,
                            RequestId = "R003",
                            TotalPrice = 70000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2563)
                        },
                        new
                        {
                            RequestCharacterId = "RC04",
                            CharacterId = "CH004",
                            CosplayerId = "A028",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2566),
                            Description = "Yêu cầu cosplay nhân vật CH004",
                            Quantity = 1,
                            RequestId = "R004",
                            TotalPrice = 80000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2566)
                        },
                        new
                        {
                            RequestCharacterId = "RC05",
                            CharacterId = "CH005",
                            CosplayerId = "A029",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2569),
                            Description = "Yêu cầu cosplay nhân vật CH005",
                            Quantity = 1,
                            RequestId = "R005",
                            TotalPrice = 90000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2569)
                        },
                        new
                        {
                            RequestCharacterId = "RC06",
                            CharacterId = "CH006",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2574),
                            Description = "Yêu cầu cosplay nhân vật CH006",
                            Quantity = 5,
                            RequestId = "R006",
                            TotalPrice = 100000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2574)
                        },
                        new
                        {
                            RequestCharacterId = "RC07",
                            CharacterId = "CH007",
                            CosplayerId = "A031",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2610),
                            Description = "Yêu cầu cosplay nhân vật CH007",
                            Quantity = 1,
                            RequestId = "R007",
                            TotalPrice = 110000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2611)
                        },
                        new
                        {
                            RequestCharacterId = "RC08",
                            CharacterId = "CH008",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2614),
                            Description = "Yêu cầu cosplay nhân vật CH008",
                            Quantity = 7,
                            RequestId = "R008",
                            TotalPrice = 120000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2615)
                        },
                        new
                        {
                            RequestCharacterId = "RC09",
                            CharacterId = "CH009",
                            CosplayerId = "A033",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2617),
                            Description = "Yêu cầu cosplay nhân vật CH009",
                            Quantity = 1,
                            RequestId = "R009",
                            TotalPrice = 130000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2618)
                        },
                        new
                        {
                            RequestCharacterId = "RC10",
                            CharacterId = "CH010",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2621),
                            Description = "Yêu cầu cosplay nhân vật CH010",
                            Quantity = 9,
                            RequestId = "R010",
                            TotalPrice = 140000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2621)
                        },
                        new
                        {
                            RequestCharacterId = "RC11",
                            CharacterId = "CH011",
                            CosplayerId = "A035",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2624),
                            Description = "Yêu cầu cosplay nhân vật CH011",
                            Quantity = 1,
                            RequestId = "R011",
                            TotalPrice = 150000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2625)
                        },
                        new
                        {
                            RequestCharacterId = "RC12",
                            CharacterId = "CH012",
                            CosplayerId = "A036",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2628),
                            Description = "Yêu cầu cosplay nhân vật CH012",
                            Quantity = 1,
                            RequestId = "R012",
                            TotalPrice = 160000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2628)
                        },
                        new
                        {
                            RequestCharacterId = "RC13",
                            CharacterId = "CH013",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2631),
                            Description = "Yêu cầu cosplay nhân vật CH013",
                            Quantity = 10,
                            RequestId = "R013",
                            TotalPrice = 170000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2632)
                        },
                        new
                        {
                            RequestCharacterId = "RC14",
                            CharacterId = "CH014",
                            CosplayerId = "A038",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2638),
                            Description = "Yêu cầu cosplay nhân vật CH014",
                            Quantity = 1,
                            RequestId = "R014",
                            TotalPrice = 180000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2638)
                        },
                        new
                        {
                            RequestCharacterId = "RC15",
                            CharacterId = "CH015",
                            CosplayerId = "A039",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2641),
                            Description = "Yêu cầu cosplay nhân vật CH015",
                            Quantity = 1,
                            RequestId = "R015",
                            TotalPrice = 190000.0,
                            UpdateDate = new DateTime(2025, 4, 14, 6, 36, 41, 813, DateTimeKind.Utc).AddTicks(2642)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestDate", b =>
                {
                    b.Property<string>("RequestDateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestDateId");

                    b.HasIndex("ContractCharacterId");

                    b.HasIndex("RequestCharacterId");

                    b.ToTable("RequestDate");

                    b.HasData(
                        new
                        {
                            RequestDateId = "RD01",
                            EndDate = new DateTime(2025, 1, 10, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC01",
                            StartDate = new DateTime(2025, 1, 10, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD02",
                            EndDate = new DateTime(2025, 1, 11, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC01",
                            StartDate = new DateTime(2025, 1, 11, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD03",
                            EndDate = new DateTime(2025, 1, 13, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC01",
                            StartDate = new DateTime(2025, 1, 13, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD04",
                            EndDate = new DateTime(2025, 1, 14, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC01",
                            StartDate = new DateTime(2025, 1, 14, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD05",
                            EndDate = new DateTime(2025, 1, 15, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC01",
                            StartDate = new DateTime(2025, 1, 15, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD06",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Reason = "Cosplayer is busy",
                            RequestCharacterId = "RC02",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestDateId = "RD07",
                            EndDate = new DateTime(2025, 4, 10, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC04",
                            StartDate = new DateTime(2025, 4, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD08",
                            EndDate = new DateTime(2025, 4, 11, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC04",
                            StartDate = new DateTime(2025, 4, 11, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD09",
                            EndDate = new DateTime(2025, 4, 12, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC04",
                            StartDate = new DateTime(2025, 4, 12, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD10",
                            EndDate = new DateTime(2025, 4, 13, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC04",
                            StartDate = new DateTime(2025, 4, 13, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD11",
                            EndDate = new DateTime(2025, 4, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC04",
                            StartDate = new DateTime(2025, 4, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD12",
                            EndDate = new DateTime(2025, 4, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC04",
                            StartDate = new DateTime(2025, 4, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD13",
                            EndDate = new DateTime(2025, 5, 3, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC05",
                            StartDate = new DateTime(2025, 5, 3, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD14",
                            EndDate = new DateTime(2025, 5, 4, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC05",
                            StartDate = new DateTime(2025, 5, 4, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD15",
                            EndDate = new DateTime(2025, 5, 5, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC05",
                            StartDate = new DateTime(2025, 5, 5, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD16",
                            EndDate = new DateTime(2025, 5, 6, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC05",
                            StartDate = new DateTime(2025, 5, 6, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD17",
                            EndDate = new DateTime(2025, 5, 7, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC05",
                            StartDate = new DateTime(2025, 5, 7, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD18",
                            EndDate = new DateTime(2025, 6, 12, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC06",
                            StartDate = new DateTime(2025, 6, 12, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD19",
                            EndDate = new DateTime(2025, 6, 13, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC06",
                            StartDate = new DateTime(2025, 6, 13, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD20",
                            EndDate = new DateTime(2025, 6, 14, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC06",
                            StartDate = new DateTime(2025, 6, 14, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD21",
                            EndDate = new DateTime(2025, 6, 15, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC06",
                            StartDate = new DateTime(2025, 6, 15, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD22",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Reason = "Cosplayer is busy",
                            RequestCharacterId = "RC07",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestDateId = "RD23",
                            EndDate = new DateTime(2025, 10, 25, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC10",
                            StartDate = new DateTime(2025, 10, 25, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD24",
                            EndDate = new DateTime(2025, 11, 20, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC11",
                            StartDate = new DateTime(2025, 11, 20, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD25",
                            EndDate = new DateTime(2025, 12, 5, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC12",
                            StartDate = new DateTime(2025, 12, 5, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD26",
                            EndDate = new DateTime(2025, 12, 6, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC12",
                            StartDate = new DateTime(2025, 12, 6, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD27",
                            EndDate = new DateTime(2025, 12, 7, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC12",
                            StartDate = new DateTime(2025, 12, 7, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD28",
                            EndDate = new DateTime(2025, 12, 8, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC12",
                            StartDate = new DateTime(2025, 12, 8, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD29",
                            EndDate = new DateTime(2025, 12, 9, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC12",
                            StartDate = new DateTime(2025, 12, 9, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD30",
                            EndDate = new DateTime(2025, 12, 10, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC12",
                            StartDate = new DateTime(2025, 12, 10, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD31",
                            EndDate = new DateTime(2025, 6, 30, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC14",
                            StartDate = new DateTime(2025, 6, 30, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD32",
                            EndDate = new DateTime(2025, 7, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC14",
                            StartDate = new DateTime(2025, 7, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD33",
                            EndDate = new DateTime(2025, 7, 2, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC14",
                            StartDate = new DateTime(2025, 7, 2, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestDateId = "RD34",
                            EndDate = new DateTime(2025, 12, 15, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            RequestCharacterId = "RC15",
                            StartDate = new DateTime(2025, 12, 15, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "R001",
                            Description = "System Administrator",
                            RoleName = 0
                        },
                        new
                        {
                            Id = "R002",
                            Description = "Event and Service Manager",
                            RoleName = 1
                        },
                        new
                        {
                            Id = "R003",
                            Description = "Customer Service Consultant",
                            RoleName = 2
                        },
                        new
                        {
                            Id = "R004",
                            Description = "Professional Cosplayer",
                            RoleName = 3
                        },
                        new
                        {
                            Id = "R005",
                            Description = "Regular Customer",
                            RoleName = 4
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            ServiceId = "S001",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9625),
                            Description = "Rent characters for events and parties",
                            ServiceName = "Character Rental"
                        },
                        new
                        {
                            ServiceId = "S002",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9630),
                            Description = "Live cosplay performances at events",
                            ServiceName = "Cosplay Rental"
                        },
                        new
                        {
                            ServiceId = "S003",
                            CreateDate = new DateTime(2025, 4, 14, 6, 36, 41, 812, DateTimeKind.Utc).AddTicks(9631),
                            Description = "Professional photoshoot with cosplayers",
                            ServiceName = "Create event"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractCharacterId")
                        .IsUnique()
                        .HasFilter("[ContractCharacterId] IS NOT NULL");

                    b.HasIndex("EventCharacterId")
                        .IsUnique()
                        .HasFilter("[EventCharacterId] IS NOT NULL");

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            TaskId = "T001",
                            AccountId = "A001",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1101),
                            Description = "Cosplay as anime characters",
                            EndDate = new DateTime(2025, 4, 17, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1100),
                            EventCharacterId = "EC001",
                            IsActive = true,
                            Location = "Tokyo",
                            StartDate = new DateTime(2025, 4, 16, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1093),
                            Status = 0,
                            TaskName = "CH001",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1102)
                        },
                        new
                        {
                            TaskId = "T002",
                            AccountId = "A004",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1111),
                            Description = "Join cosplay contest",
                            EndDate = new DateTime(2025, 4, 19, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1110),
                            EventCharacterId = "EC002",
                            IsActive = true,
                            Location = "Los Angeles",
                            StartDate = new DateTime(2025, 4, 18, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1109),
                            Status = 1,
                            TaskName = "CH002",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1111)
                        },
                        new
                        {
                            TaskId = "T003",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1118),
                            Description = "Teach costume making",
                            EndDate = new DateTime(2025, 4, 21, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1116),
                            EventCharacterId = "EC003",
                            IsActive = true,
                            Location = "New York",
                            StartDate = new DateTime(2025, 4, 20, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1115),
                            Status = 2,
                            TaskName = "CH003",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1118)
                        },
                        new
                        {
                            TaskId = "T004",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1123),
                            Description = "Host a live event",
                            EndDate = new DateTime(2025, 4, 15, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1122),
                            EventCharacterId = "EC004",
                            IsActive = true,
                            Location = "Online",
                            StartDate = new DateTime(2025, 4, 15, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1122),
                            Status = 3,
                            TaskName = "CH004",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1124)
                        },
                        new
                        {
                            TaskId = "T005",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1131),
                            Description = "Professional cosplay photoshoot",
                            EndDate = new DateTime(2025, 4, 23, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1130),
                            EventCharacterId = "EC005",
                            IsActive = true,
                            Location = "Paris",
                            StartDate = new DateTime(2025, 4, 22, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1130),
                            Status = 0,
                            TaskName = "CH005",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1132)
                        },
                        new
                        {
                            TaskId = "T006",
                            AccountId = "A010",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1162),
                            Description = "Evaluate contestants",
                            EndDate = new DateTime(2025, 4, 25, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1161),
                            EventCharacterId = "EC006",
                            IsActive = true,
                            Location = "Berlin",
                            StartDate = new DateTime(2025, 4, 24, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1160),
                            Status = 1,
                            TaskName = "CH006",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1163)
                        },
                        new
                        {
                            TaskId = "T007",
                            AccountId = "A012",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1167),
                            Description = "Walk in parade",
                            EndDate = new DateTime(2025, 4, 27, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1167),
                            EventCharacterId = "EC007",
                            IsActive = true,
                            Location = "Seoul",
                            StartDate = new DateTime(2025, 4, 26, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1166),
                            Status = 2,
                            TaskName = "CH007",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1168)
                        },
                        new
                        {
                            TaskId = "T008",
                            AccountId = "A013",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1172),
                            Description = "Perform on live TV",
                            EndDate = new DateTime(2025, 4, 29, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1172),
                            EventCharacterId = "EC008",
                            IsActive = true,
                            Location = "London",
                            StartDate = new DateTime(2025, 4, 28, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1171),
                            Status = 3,
                            TaskName = "CH008",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1173)
                        },
                        new
                        {
                            TaskId = "T009",
                            AccountId = "A015",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1177),
                            Description = "Perform for charity",
                            EndDate = new DateTime(2025, 5, 1, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1176),
                            EventCharacterId = "EC009",
                            IsActive = true,
                            Location = "Sydney",
                            StartDate = new DateTime(2025, 4, 30, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1176),
                            Status = 4,
                            TaskName = "CH008",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1177)
                        },
                        new
                        {
                            TaskId = "T010",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1183),
                            Description = "Talk about cosplay industry",
                            EndDate = new DateTime(2025, 5, 3, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1182),
                            EventCharacterId = "EC010",
                            IsActive = true,
                            Location = "San Diego",
                            StartDate = new DateTime(2025, 5, 2, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1180),
                            Status = 0,
                            TaskName = "CH009",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1183)
                        },
                        new
                        {
                            TaskId = "T011",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1188),
                            Description = "New character shoot",
                            EndDate = new DateTime(2025, 5, 5, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1188),
                            EventCharacterId = "EC011",
                            IsActive = true,
                            Location = "Bangkok",
                            StartDate = new DateTime(2025, 5, 4, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1186),
                            Status = 1,
                            TaskName = "CH010",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1189)
                        },
                        new
                        {
                            TaskId = "T012",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1193),
                            Description = "Host main event",
                            EndDate = new DateTime(2025, 5, 7, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1192),
                            EventCharacterId = "EC012",
                            IsActive = true,
                            Location = "Jakarta",
                            StartDate = new DateTime(2025, 5, 6, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1192),
                            Status = 2,
                            TaskName = "CH011",
                            UpdateDate = new DateTime(2025, 4, 14, 13, 36, 41, 813, DateTimeKind.Local).AddTicks(1194)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ticketType")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E001",
                            Price = 50000.0,
                            Quantity = 500,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 2,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E002",
                            Price = 40000.0,
                            Quantity = 300,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 3,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E003",
                            Price = 30000.0,
                            Quantity = 200,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 4,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E004",
                            Price = 60000.0,
                            Quantity = 600,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 5,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E005",
                            Price = 45000.0,
                            Quantity = 400,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 6,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E006",
                            Price = 55000.0,
                            Quantity = 350,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 7,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E007",
                            Price = 35000.0,
                            Quantity = 250,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 8,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E008",
                            Price = 50000.0,
                            Quantity = 450,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 9,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E009",
                            Price = 65000.0,
                            Quantity = 550,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 10,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E010",
                            Price = 70000.0,
                            Quantity = 700,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 11,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E011",
                            Price = 25000.0,
                            Quantity = 150,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 12,
                            Description = "Được giao lưu với các idol cosplayer ",
                            EventId = "E012",
                            Price = 75000.0,
                            Quantity = 800,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 13,
                            Description = "Được tham gia các hoạt động do chương trình tổ chức",
                            EventId = "E001",
                            Price = 75000.0,
                            Quantity = 500,
                            ticketType = 1
                        },
                        new
                        {
                            TicketId = 14,
                            Description = "Được tham gia các hoạt động do chương trình tổ chức",
                            EventId = "E002",
                            Price = 60000.0,
                            Quantity = 500,
                            ticketType = 1
                        },
                        new
                        {
                            TicketId = 15,
                            Description = "Được tham gia các hoạt động do chương trình tổ chức",
                            EventId = "E003",
                            Price = 45000.0,
                            Quantity = 500,
                            ticketType = 1
                        },
                        new
                        {
                            TicketId = 16,
                            Description = "Được tham gia các hoạt động do chương trình tổ chức",
                            EventId = "E004",
                            Price = 90000.0,
                            Quantity = 500,
                            ticketType = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Property<string>("TicketAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("TicketAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketAccount");

                    b.HasData(
                        new
                        {
                            TicketAccountId = "TA001",
                            AccountId = "A003",
                            Quantity = 2,
                            TicketCode = "TC001",
                            TicketId = 1,
                            TotalPrice = 100000.0
                        },
                        new
                        {
                            TicketAccountId = "TA002",
                            AccountId = "A006",
                            Quantity = 1,
                            TicketCode = "TC002",
                            TicketId = 2,
                            TotalPrice = 40000.0
                        },
                        new
                        {
                            TicketAccountId = "TA003",
                            AccountId = "A011",
                            Quantity = 3,
                            TicketCode = "TC003",
                            TicketId = 3,
                            TotalPrice = 90000.0
                        },
                        new
                        {
                            TicketAccountId = "TA004",
                            AccountId = "A014",
                            Quantity = 2,
                            TicketCode = "TC004",
                            TicketId = 4,
                            TotalPrice = 120000.0
                        },
                        new
                        {
                            TicketAccountId = "TA005",
                            AccountId = "A003",
                            Quantity = 4,
                            TicketCode = "TC005",
                            TicketId = 5,
                            TotalPrice = 180000.0
                        },
                        new
                        {
                            TicketAccountId = "TA006",
                            AccountId = "A006",
                            Quantity = 2,
                            TicketCode = "TC006",
                            TicketId = 6,
                            TotalPrice = 110000.0
                        },
                        new
                        {
                            TicketAccountId = "TA007",
                            AccountId = "A011",
                            Quantity = 1,
                            TicketCode = "TC007",
                            TicketId = 7,
                            TotalPrice = 35000.0
                        },
                        new
                        {
                            TicketAccountId = "TA008",
                            AccountId = "A014",
                            Quantity = 3,
                            TicketCode = "TC008",
                            TicketId = 8,
                            TotalPrice = 150000.0
                        },
                        new
                        {
                            TicketAccountId = "TA009",
                            AccountId = "A003",
                            Quantity = 2,
                            TicketCode = "TC009",
                            TicketId = 9,
                            TotalPrice = 130000.0
                        },
                        new
                        {
                            TicketAccountId = "TA010",
                            AccountId = "A006",
                            Quantity = 1,
                            TicketCode = "TC010",
                            TicketId = 10,
                            TotalPrice = 70000.0
                        },
                        new
                        {
                            TicketAccountId = "TA011",
                            AccountId = "A011",
                            Quantity = 5,
                            TicketCode = "TC011",
                            TicketId = 11,
                            TotalPrice = 125000.0
                        },
                        new
                        {
                            TicketAccountId = "TA012",
                            AccountId = "A014",
                            Quantity = 2,
                            TicketCode = "TC012",
                            TicketId = 12,
                            TotalPrice = 150000.0
                        },
                        new
                        {
                            TicketAccountId = "TA013",
                            AccountId = "A003",
                            Quantity = 3,
                            TicketCode = "TC013",
                            TicketId = 3,
                            TotalPrice = 90000.0
                        },
                        new
                        {
                            TicketAccountId = "TA014",
                            AccountId = "A006",
                            Quantity = 2,
                            TicketCode = "TC014",
                            TicketId = 5,
                            TotalPrice = 90000.0
                        },
                        new
                        {
                            TicketAccountId = "TA015",
                            AccountId = "A011",
                            Quantity = 1,
                            TicketCode = "TC015",
                            TicketId = 7,
                            TotalPrice = 35000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("AccountCoupons")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Coupon", "Coupon")
                        .WithMany("AccountCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("AccountImages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithOne("Cart")
                        .HasForeignKey("CCSS_Repository.Entities.Cart", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Category", "Category")
                        .WithMany("Characters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CharacterImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("CharacterImages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Request", "Request")
                        .WithOne("Contract")
                        .HasForeignKey("CCSS_Repository.Entities.Contract", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Character");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("ContractImages")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractRefund", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithOne("ContractRefund")
                        .HasForeignKey("CCSS_Repository.Entities.ContractRefund", "ContractId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Category", "Category")
                        .WithMany("CustomerCharacters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacterImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.CustomerCharacter", "CustomerCharacter")
                        .WithMany("CustomerCharacterImages")
                        .HasForeignKey("CustomerCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CustomerCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventActivity", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Activity", "Activity")
                        .WithMany("EventActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventActivities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("EventCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventCharacters")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.ContractCharacter", "ContractCharacter")
                        .WithOne("Feedback")
                        .HasForeignKey("CCSS_Repository.Entities.Feedback", "ContractCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("ContractCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Notification", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.OrderProduct", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.AccountCoupon", "AccountCoupon")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "AccountCouponID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Order", "Order")
                        .WithMany("Payment")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.TicketAccount", "TicketAccount")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "TicketAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountCoupon");

                    b.Navigation("Contract");

                    b.Navigation("Order");

                    b.Navigation("TicketAccount");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ProductImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.AccountCoupon", "AccountCoupon")
                        .WithMany("Requests")
                        .HasForeignKey("AccountCouponId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Requests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Package", "Package")
                        .WithMany("Requests")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("AccountCoupon");

                    b.Navigation("Package");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("RequestCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Request", "Request")
                        .WithMany("RequestCharacters")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestDate", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.ContractCharacter", "ContractCharacter")
                        .WithMany("RequestDates")
                        .HasForeignKey("ContractCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.RequestCharacter", "RequestCharacter")
                        .WithMany("RequestDates")
                        .HasForeignKey("RequestCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ContractCharacter");

                    b.Navigation("RequestCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Tasks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.ContractCharacter", "ContractCharacter")
                        .WithOne("Task")
                        .HasForeignKey("CCSS_Repository.Entities.Task", "ContractCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.EventCharacter", "EventCharacter")
                        .WithOne("Task")
                        .HasForeignKey("CCSS_Repository.Entities.Task", "EventCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("ContractCharacter");

                    b.Navigation("EventCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("Ticket")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Ticket", "Ticket")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Navigation("AccountCoupons");

                    b.Navigation("AccountImages");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Requests");

                    b.Navigation("Tasks");

                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Activity", b =>
                {
                    b.Navigation("EventActivities");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("CustomerCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Navigation("CharacterImages");

                    b.Navigation("ContractCharacters");

                    b.Navigation("EventCharacters");

                    b.Navigation("RequestCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Navigation("ContractCharacters");

                    b.Navigation("ContractImages");

                    b.Navigation("ContractRefund")
                        .IsRequired();

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("RequestDates");

                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Coupon", b =>
                {
                    b.Navigation("AccountCoupons");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacter", b =>
                {
                    b.Navigation("CustomerCharacterImages");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Navigation("EventActivities");

                    b.Navigation("EventCharacters");

                    b.Navigation("EventImages");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();

                    b.Navigation("RequestCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestCharacter", b =>
                {
                    b.Navigation("RequestDates");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Service", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
