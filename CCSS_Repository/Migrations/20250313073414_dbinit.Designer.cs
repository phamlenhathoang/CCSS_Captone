// <auto-generated />
using System;
using CCSS_Repository.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CCSS_Repository.Migrations
{
    [DbContext(typeof(CCSSDbContext))]
    [Migration("20250313073414_dbinit")]
    partial class dbinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AverageStar")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Leader")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnTask")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("SalaryIndex")
                        .HasColumnType("float");

                    b.Property<int?>("TaskQuantity")
                        .HasColumnType("int");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountId = "A001",
                            Email = "john@example.com",
                            Name = "John Doe",
                            Password = "hashedpassword",
                            RoleId = "R004",
                            SalaryIndex = 1.2
                        },
                        new
                        {
                            AccountId = "A002",
                            Email = "jane@example.com",
                            Name = "Jane Smith",
                            Password = "hashedpassword",
                            RoleId = "R001"
                        },
                        new
                        {
                            AccountId = "A003",
                            Email = "alice@example.com",
                            Name = "Alice Johnson",
                            Password = "hashedpassword",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A004",
                            Email = "bob@example.com",
                            Name = "Bob Brown",
                            Password = "hashedpassword",
                            RoleId = "R004",
                            SalaryIndex = 1.3
                        },
                        new
                        {
                            AccountId = "A005",
                            Email = "charlie@example.com",
                            Name = "Charlie White",
                            Password = "hashedpassword",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999
                        },
                        new
                        {
                            AccountId = "A006",
                            Email = "david@example.com",
                            Name = "David Black",
                            Password = "hashedpassword",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A007",
                            Email = "emma@example.com",
                            Name = "Emma Green",
                            Password = "hashedpassword",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001
                        },
                        new
                        {
                            AccountId = "A008",
                            Email = "frank@example.com",
                            Name = "Frank Blue",
                            Password = "hashedpassword",
                            RoleId = "R004",
                            SalaryIndex = 1.5
                        },
                        new
                        {
                            AccountId = "A009",
                            Email = "grace@example.com",
                            Name = "Grace Pink",
                            Password = "hashedpassword",
                            RoleId = "R001"
                        },
                        new
                        {
                            AccountId = "A010",
                            Email = "henry@example.com",
                            Name = "Henry Purple",
                            Password = "hashedpassword",
                            RoleId = "R004",
                            SalaryIndex = 1.3
                        },
                        new
                        {
                            AccountId = "A011",
                            Email = "isla@example.com",
                            Name = "Isla Red",
                            Password = "hashedpassword",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A012",
                            Email = "jack@example.com",
                            Name = "Jack Yellow",
                            Password = "hashedpassword",
                            RoleId = "R004",
                            SalaryIndex = 1.2
                        },
                        new
                        {
                            AccountId = "A013",
                            Email = "katie@example.com",
                            Name = "Katie Orange",
                            Password = "hashedpassword",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001
                        },
                        new
                        {
                            AccountId = "A014",
                            Email = "liam@example.com",
                            Name = "Liam Gray",
                            Password = "hashedpassword",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A015",
                            Email = "mia@example.com",
                            Name = "Mia Cyan",
                            Password = "hashedpassword",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.Property<string>("AccountCouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CouponId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountCouponId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CouponId");

                    b.ToTable("AccountCoupon");

                    b.HasData(
                        new
                        {
                            AccountCouponId = "AC001",
                            AccountId = "A001",
                            CouponId = "CP001",
                            EndDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC002",
                            AccountId = "A002",
                            CouponId = "CP002",
                            EndDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC003",
                            AccountId = "A003",
                            CouponId = "CP003",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC004",
                            AccountId = "A004",
                            CouponId = "CP004",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC005",
                            AccountId = "A005",
                            CouponId = "CP005",
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC006",
                            AccountId = "A001",
                            CouponId = "CP006",
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC007",
                            AccountId = "A002",
                            CouponId = "CP007",
                            EndDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC008",
                            AccountId = "A003",
                            CouponId = "CP008",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC009",
                            AccountId = "A004",
                            CouponId = "CP009",
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC010",
                            AccountId = "A005",
                            CouponId = "CP010",
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC011",
                            AccountId = "A006",
                            CouponId = "CP011",
                            EndDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC012",
                            AccountId = "A007",
                            CouponId = "CP012",
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC013",
                            AccountId = "A008",
                            CouponId = "CP013",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC014",
                            AccountId = "A009",
                            CouponId = "CP014",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC015",
                            AccountId = "A010",
                            CouponId = "CP015",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountImage", b =>
                {
                    b.Property<string>("AccountImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountImageId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountImage");

                    b.HasData(
                        new
                        {
                            AccountImageId = "AI1",
                            AccountId = "A001",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6954),
                            UrlImage = "https://example.com/admin.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI2",
                            AccountId = "A002",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6956),
                            UrlImage = "https://example.com/manager.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI3",
                            AccountId = "A003",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6959),
                            UrlImage = "https://example.com/user1.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI4",
                            AccountId = "A004",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6961),
                            UrlImage = "https://example.com/user2.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI5",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6963),
                            UrlImage = "https://example.com/user3.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI6",
                            AccountId = "A006",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6965),
                            UrlImage = "https://example.com/user4.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI7",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6967),
                            UrlImage = "https://example.com/user5.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI8",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6971),
                            UrlImage = "https://example.com/user6.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI9",
                            AccountId = "A009",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6974),
                            UrlImage = "https://example.com/user7.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI10",
                            AccountId = "A010",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6975),
                            UrlImage = "https://example.com/user8.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI11",
                            AccountId = "A011",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6978),
                            UrlImage = "https://example.com/user9.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI12",
                            AccountId = "A012",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6980),
                            UrlImage = "https://example.com/user10.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI13",
                            AccountId = "A013",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6983),
                            UrlImage = "https://example.com/user11.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI14",
                            AccountId = "A014",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6985),
                            UrlImage = "https://example.com/user12.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI15",
                            AccountId = "A015",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6987),
                            UrlImage = "https://example.com/user13.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            ActivityId = "ACT001",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7025),
                            Description = "A relaxing yoga session",
                            Name = "Yoga Class",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7026)
                        },
                        new
                        {
                            ActivityId = "ACT002",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7033),
                            Description = "Learn to cook delicious meals",
                            Name = "Cooking Workshop",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7033)
                        },
                        new
                        {
                            ActivityId = "ACT003",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7036),
                            Description = "Live music performance",
                            Name = "Music Concert",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7036)
                        },
                        new
                        {
                            ActivityId = "ACT004",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7039),
                            Description = "Showcase of local artists",
                            Name = "Art Exhibition",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7040)
                        },
                        new
                        {
                            ActivityId = "ACT005",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7042),
                            Description = "Discussion on latest technology trends",
                            Name = "Tech Talk",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7043)
                        },
                        new
                        {
                            ActivityId = "ACT006",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7046),
                            Description = "5K run for a good cause",
                            Name = "Charity Run",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7047)
                        },
                        new
                        {
                            ActivityId = "ACT007",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7050),
                            Description = "Monthly book discussion",
                            Name = "Book Club",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7050)
                        },
                        new
                        {
                            ActivityId = "ACT008",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7053),
                            Description = "Learn photography skills",
                            Name = "Photography Workshop",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7054)
                        },
                        new
                        {
                            ActivityId = "ACT009",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7089),
                            Description = "Dance battle for all ages",
                            Name = "Dance Competition",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7090)
                        },
                        new
                        {
                            ActivityId = "ACT010",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7093),
                            Description = "Competitive chess matches",
                            Name = "Chess Tournament",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7093)
                        },
                        new
                        {
                            ActivityId = "ACT011",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7096),
                            Description = "Outdoor movie screening",
                            Name = "Movie Night",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7096)
                        },
                        new
                        {
                            ActivityId = "ACT012",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7099),
                            Description = "Showcase of scientific projects",
                            Name = "Science Fair",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7099)
                        },
                        new
                        {
                            ActivityId = "ACT013",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7102),
                            Description = "Intensive coding workshop",
                            Name = "Coding Bootcamp",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7102)
                        },
                        new
                        {
                            ActivityId = "ACT014",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7105),
                            Description = "Learn gardening techniques",
                            Name = "Gardening Workshop",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7105)
                        },
                        new
                        {
                            ActivityId = "ACT015",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7108),
                            Description = "Guided meditation practice",
                            Name = "Meditation Session",
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7108)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CartId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            CartId = "C001",
                            AccountId = "A003",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6172),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6173)
                        },
                        new
                        {
                            CartId = "C002",
                            AccountId = "A006",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6176),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6177)
                        },
                        new
                        {
                            CartId = "C003",
                            AccountId = "A011",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6180),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6181)
                        },
                        new
                        {
                            CartId = "C004",
                            AccountId = "A014",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6184),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6185)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.Property<string>("CartProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartProductId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProduct");

                    b.HasData(
                        new
                        {
                            CartProductId = "c7245984-3f22-410e-85a5-395f346babad",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7153),
                            Price = 30.0,
                            ProductId = "P001",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "b6d65edc-8cdd-439d-9b34-84d0865097ef",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7157),
                            Price = 20.0,
                            ProductId = "P002",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "2e00c69d-9362-40ee-8156-5513533c8199",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7161),
                            Price = 80.0,
                            ProductId = "P003",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "599eac0b-1ad2-46e5-85ff-b7cea7ead712",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7166),
                            Price = 100.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "99a5a84c-2c09-430a-9a56-edf70dc8207d",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7172),
                            Price = 25.0,
                            ProductId = "P005",
                            Quantity = 3
                        },
                        new
                        {
                            CartProductId = "083c00d6-0aa6-48c6-ad1c-a24ccfb9302d",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7176),
                            Price = 40.0,
                            ProductId = "P006",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "4e237c07-ca98-48a7-b6ec-66924228277c",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7181),
                            Price = 15.0,
                            ProductId = "P007",
                            Quantity = 5
                        },
                        new
                        {
                            CartProductId = "7e6d51b7-a9f6-418b-9274-070ceb403322",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7185),
                            Price = 50.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "33eaacac-6fd2-43b1-852c-dcf59f1d64ec",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7191),
                            Price = 60.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "c44804b1-6e12-4b29-8e0b-5b1b015f0111",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7195),
                            Price = 120.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "30fcfd90-2cf1-4e05-b8cc-e106113b5eca",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7199),
                            Price = 35.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "24a2c116-97af-4e8d-9c2b-ecdc828589b9",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7203),
                            Price = 45.0,
                            ProductId = "P012",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = "C3",
                            CategoryName = "Manga",
                            Description = "Manga characters"
                        },
                        new
                        {
                            CategoryId = "C4",
                            CategoryName = "Movie",
                            Description = "Movie characters"
                        },
                        new
                        {
                            CategoryId = "C5",
                            CategoryName = "Comic",
                            Description = "Comic book characters"
                        },
                        new
                        {
                            CategoryId = "C6",
                            CategoryName = "Mythology",
                            Description = "Mythological characters"
                        },
                        new
                        {
                            CategoryId = "C7",
                            CategoryName = "Fantasy",
                            Description = "Fantasy world characters"
                        },
                        new
                        {
                            CategoryId = "C8",
                            CategoryName = "Sci-Fi",
                            Description = "Science fiction characters"
                        },
                        new
                        {
                            CategoryId = "C9",
                            CategoryName = "Superhero",
                            Description = "Superhero characters"
                        },
                        new
                        {
                            CategoryId = "C10",
                            CategoryName = "Villains",
                            Description = "Famous villain characters"
                        },
                        new
                        {
                            CategoryId = "C11",
                            CategoryName = "Robot",
                            Description = "AI and robot characters"
                        },
                        new
                        {
                            CategoryId = "C12",
                            CategoryName = "Historical",
                            Description = "Historical figures in fiction"
                        },
                        new
                        {
                            CategoryId = "C13",
                            CategoryName = "Horror",
                            Description = "Horror and thriller characters"
                        },
                        new
                        {
                            CategoryId = "C14",
                            CategoryName = "Detective",
                            Description = "Famous detective characters"
                        },
                        new
                        {
                            CategoryId = "C15",
                            CategoryName = "Sports",
                            Description = "Characters from sports anime/manga"
                        },
                        new
                        {
                            CategoryId = "C16",
                            CategoryName = "Magic",
                            Description = "Characters using magic or spells"
                        },
                        new
                        {
                            CategoryId = "C17",
                            CategoryName = "Slice of Life",
                            Description = "Everyday life characters"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float?>("MaxHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MaxWeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinWeight")
                        .HasColumnType("real");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CharacterId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Character");

                    b.HasData(
                        new
                        {
                            CharacterId = "CH001",
                            CategoryId = "C3",
                            CharacterName = "Naruto",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5180),
                            Description = "Ninja from Konoha",
                            IsActive = true,
                            MaxHeight = 180f,
                            MaxWeight = 80f,
                            MinHeight = 160f,
                            MinWeight = 50f,
                            Price = 100.0,
                            Quantity = 5
                        },
                        new
                        {
                            CharacterId = "CH002",
                            CategoryId = "C3",
                            CharacterName = "Sasuke",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5190),
                            Description = "Naruto’s rival",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 120.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH003",
                            CategoryId = "C3",
                            CharacterName = "Goku",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5195),
                            Description = "Saiyan warrior",
                            IsActive = true,
                            MaxHeight = 190f,
                            MaxWeight = 90f,
                            MinHeight = 170f,
                            MinWeight = 60f,
                            Price = 150.0,
                            Quantity = 4
                        },
                        new
                        {
                            CharacterId = "CH004",
                            CategoryId = "C4",
                            CharacterName = "Luffy",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5234),
                            Description = "Pirate King",
                            IsActive = true,
                            MaxHeight = 175f,
                            MaxWeight = 70f,
                            MinHeight = 155f,
                            MinWeight = 45f,
                            Price = 110.0,
                            Quantity = 6
                        },
                        new
                        {
                            CharacterId = "CH005",
                            CategoryId = "C4",
                            CharacterName = "Ichigo",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5242),
                            Description = "Soul Reaper",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 130.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH006",
                            CategoryId = "C14",
                            CharacterName = "Mario",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5248),
                            Description = "Plumber hero",
                            IsActive = true,
                            MaxHeight = 160f,
                            MaxWeight = 70f,
                            MinHeight = 140f,
                            MinWeight = 50f,
                            Price = 80.0,
                            Quantity = 5
                        },
                        new
                        {
                            CharacterId = "CH007",
                            CategoryId = "C14",
                            CharacterName = "Luigi",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5253),
                            Description = "Mario’s brother",
                            IsActive = true,
                            MaxHeight = 170f,
                            MaxWeight = 75f,
                            MinHeight = 150f,
                            MinWeight = 55f,
                            Price = 85.0,
                            Quantity = 4
                        },
                        new
                        {
                            CharacterId = "CH008",
                            CategoryId = "C14",
                            CharacterName = "Link",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5258),
                            Description = "Hero of Hyrule",
                            IsActive = true,
                            MaxHeight = 180f,
                            MaxWeight = 80f,
                            MinHeight = 160f,
                            MinWeight = 50f,
                            Price = 140.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH009",
                            CategoryId = "C16",
                            CharacterName = "Zelda",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5262),
                            Description = "Hyrule princess",
                            IsActive = true,
                            MaxHeight = 175f,
                            MaxWeight = 70f,
                            MinHeight = 155f,
                            MinWeight = 50f,
                            Price = 135.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH010",
                            CategoryId = "C16",
                            CharacterName = "Samus",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5268),
                            Description = "Bounty hunter",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 145.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH011",
                            CategoryId = "C13",
                            CharacterName = "Cloud",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5272),
                            Description = "Ex-SOLDIER",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 125.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH012",
                            CategoryId = "C13",
                            CharacterName = "Sephiroth",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5277),
                            Description = "One-Winged Angel",
                            IsActive = true,
                            MaxHeight = 190f,
                            MaxWeight = 90f,
                            MinHeight = 170f,
                            MinWeight = 60f,
                            Price = 155.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH013",
                            CategoryId = "C8",
                            CharacterName = "Kratos",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5284),
                            Description = "God of War",
                            IsActive = true,
                            MaxHeight = 195f,
                            MaxWeight = 100f,
                            MinHeight = 175f,
                            MinWeight = 70f,
                            Price = 160.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH014",
                            CategoryId = "C8",
                            CharacterName = "Pikachu",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5288),
                            Description = "Electric Pokemon",
                            IsActive = true,
                            MaxHeight = 50f,
                            MaxWeight = 20f,
                            MinHeight = 30f,
                            MinWeight = 10f,
                            Price = 90.0,
                            Quantity = 10
                        },
                        new
                        {
                            CharacterId = "CH015",
                            CategoryId = "C8",
                            CharacterName = "Kirby",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5292),
                            Description = "Pink puffball",
                            IsActive = true,
                            MaxHeight = 60f,
                            MaxWeight = 25f,
                            MinHeight = 40f,
                            MinWeight = 15f,
                            Price = 95.0,
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CharacterImage", b =>
                {
                    b.Property<string>("CharacterImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterImageId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterImage");

                    b.HasData(
                        new
                        {
                            CharacterImageId = "CI001",
                            CharacterId = "CH001",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7238),
                            UrlImage = "https://example.com/img1.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI002",
                            CharacterId = "CH002",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7243),
                            UrlImage = "https://example.com/img2.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI003",
                            CharacterId = "CH003",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7245),
                            UrlImage = "https://example.com/img3.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI004",
                            CharacterId = "CH004",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7247),
                            UrlImage = "https://example.com/img4.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI005",
                            CharacterId = "CH005",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7250),
                            UrlImage = "https://example.com/img5.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI006",
                            CharacterId = "CH006",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7252),
                            UrlImage = "https://example.com/img6.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI007",
                            CharacterId = "CH007",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7254),
                            UrlImage = "https://example.com/img7.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI008",
                            CharacterId = "CH008",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7256),
                            UrlImage = "https://example.com/img8.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI009",
                            CharacterId = "CH009",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7258),
                            UrlImage = "https://example.com/img9.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI010",
                            CharacterId = "CH010",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7263),
                            UrlImage = "https://example.com/img10.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI011",
                            CharacterId = "CH011",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7265),
                            UrlImage = "https://example.com/img11.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI012",
                            CharacterId = "CH012",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7267),
                            UrlImage = "https://example.com/img12.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI013",
                            CharacterId = "CH013",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7298),
                            UrlImage = "https://example.com/img13.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI014",
                            CharacterId = "CH014",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7300),
                            UrlImage = "https://example.com/img14.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI015",
                            CharacterId = "CH015",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7303),
                            UrlImage = "https://example.com/img15.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Deposit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("ContractId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Contract");

                    b.HasData(
                        new
                        {
                            ContractId = "CT002",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "100",
                            RequestId = "R002",
                            TotalPrice = 500.0
                        },
                        new
                        {
                            ContractId = "CT005",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "150",
                            RequestId = "R005",
                            TotalPrice = 700.0
                        },
                        new
                        {
                            ContractId = "CT008",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "70",
                            RequestId = "R008",
                            TotalPrice = 350.0
                        },
                        new
                        {
                            ContractId = "CT010",
                            ContractStatus = 3,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "50",
                            RequestId = "R010",
                            TotalPrice = 200.0
                        },
                        new
                        {
                            ContractId = "CT014",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "120",
                            RequestId = "R014",
                            TotalPrice = 600.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractCharacter");

                    b.HasData(
                        new
                        {
                            ContractCharacterId = "CC0021",
                            CharacterId = "CH001",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT002",
                            TotalPrice = 150.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0022",
                            CharacterId = "CH002",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT002",
                            TotalPrice = 180.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0023",
                            CharacterId = "CH003",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT002",
                            TotalPrice = 170.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0051",
                            CharacterId = "CH004",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT005",
                            TotalPrice = 200.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0052",
                            CharacterId = "CH005",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT005",
                            TotalPrice = 250.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0053",
                            CharacterId = "CH006",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT005",
                            TotalPrice = 250.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0081",
                            CharacterId = "CH007",
                            ContractId = "CT008",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT008",
                            TotalPrice = 120.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0082",
                            CharacterId = "CH008",
                            ContractId = "CT008",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT008",
                            TotalPrice = 130.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0083",
                            CharacterId = "CH009",
                            ContractId = "CT008",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT008",
                            TotalPrice = 100.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0101",
                            CharacterId = "CH010",
                            ContractId = "CT010",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT010",
                            TotalPrice = 70.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0102",
                            CharacterId = "CH011",
                            ContractId = "CT010",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT010",
                            TotalPrice = 80.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0103",
                            CharacterId = "CH012",
                            ContractId = "CT010",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT010",
                            TotalPrice = 50.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0141",
                            CharacterId = "CH013",
                            ContractId = "CT014",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT014",
                            TotalPrice = 200.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0142",
                            CharacterId = "CH014",
                            ContractId = "CT014",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT014",
                            TotalPrice = 250.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0143",
                            CharacterId = "CH015",
                            ContractId = "CT014",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT014",
                            TotalPrice = 150.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Coupon", b =>
                {
                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CouponId");

                    b.ToTable("Coupon");

                    b.HasData(
                        new
                        {
                            CouponId = "CP001",
                            Amount = 50.0,
                            Condition = "Min order 500",
                            EndDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP002",
                            Amount = 150.0,
                            Condition = "Min order 1000",
                            EndDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 15f,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP003",
                            Amount = 400.0,
                            Condition = "Min contract 2000",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP004",
                            Amount = 180.0,
                            Condition = "Min order 1500",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 12f,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP005",
                            Amount = 750.0,
                            Condition = "Min contract 3000",
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 25f,
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP006",
                            Amount = 100.0,
                            Condition = "New customers only",
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP007",
                            Amount = 200.0,
                            Condition = "Holiday Special",
                            EndDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP008",
                            Amount = 600.0,
                            Condition = "VIP customers",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 30f,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP009",
                            Amount = 120.0,
                            Condition = "Summer Sale",
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 15f,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP010",
                            Amount = 1000.0,
                            Condition = "Black Friday",
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 50f,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP011",
                            Amount = 75.0,
                            Condition = "Back to School",
                            EndDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP012",
                            Amount = 1750.0,
                            Condition = "Min contract 5000",
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 35f,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP013",
                            Amount = 250.0,
                            Condition = "Loyal Customers",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP014",
                            Amount = 800.0,
                            Condition = "Cyber Monday",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 40f,
                            StartDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP015",
                            Amount = 50.0,
                            Condition = "Referral Bonus",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventId = "E001",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5533),
                            Description = "A grand celebration to welcome the new year",
                            EndDate = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "New Year Festival",
                            IsActive = true,
                            Location = "Times Square, New York",
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E002",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5538),
                            Description = "Experience the beauty of cherry blossoms",
                            EndDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Spring Blossom Fest",
                            IsActive = true,
                            Location = "Kyoto, Japan",
                            StartDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E003",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5542),
                            Description = "Showcasing the latest in technology and AI",
                            EndDate = new DateTime(2025, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Tech Innovation Summit",
                            IsActive = true,
                            Location = "Silicon Valley",
                            StartDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E004",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5546),
                            Description = "Live performances from top artists",
                            EndDate = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Music Fest",
                            IsActive = true,
                            Location = "Coachella, California",
                            StartDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E005",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5550),
                            Description = "A must-attend event for comic book fans",
                            EndDate = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Comic-Con International",
                            IsActive = true,
                            Location = "San Diego Convention Center",
                            StartDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E006",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5553),
                            Description = "Largest anime convention in the world",
                            EndDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Anime Expo",
                            IsActive = true,
                            Location = "Los Angeles Convention Center",
                            StartDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E007",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5560),
                            Description = "Latest trends and releases in gaming",
                            EndDate = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Gaming Expo",
                            IsActive = true,
                            Location = "Las Vegas Convention Center",
                            StartDate = new DateTime(2025, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E008",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5563),
                            Description = "A fun-filled summer celebration",
                            EndDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Summer Festival",
                            IsActive = true,
                            Location = "Miami Beach, Florida",
                            StartDate = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E009",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5566),
                            Description = "A paradise for cosplayers",
                            EndDate = new DateTime(2025, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Cosplay Festival",
                            IsActive = true,
                            Location = "Tokyo Big Sight",
                            StartDate = new DateTime(2025, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E010",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5570),
                            Description = "Showcasing the best movies of the year",
                            EndDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Film Festival",
                            IsActive = true,
                            Location = "Cannes, France",
                            StartDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E011",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5574),
                            Description = "Spooky celebrations and costume parties",
                            EndDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Halloween Night",
                            IsActive = true,
                            Location = "Salem, Massachusetts",
                            StartDate = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E012",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5577),
                            Description = "Festive shopping and holiday cheer",
                            EndDate = new DateTime(2025, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Christmas Market",
                            IsActive = true,
                            Location = "Nuremberg, Germany",
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventActivity", b =>
                {
                    b.Property<string>("EventActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EventId");

                    b.ToTable("EventActivity");

                    b.HasData(
                        new
                        {
                            EventActivityId = "EA001",
                            ActivityId = "ACT001",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6749),
                            Description = "Yoga for a fresh start",
                            EventId = "E001"
                        },
                        new
                        {
                            EventActivityId = "EA002",
                            ActivityId = "ACT005",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6752),
                            Description = "Tech trends in the new year",
                            EventId = "E001"
                        },
                        new
                        {
                            EventActivityId = "EA003",
                            ActivityId = "ACT004",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6755),
                            Description = "Painting cherry blossoms",
                            EventId = "E002"
                        },
                        new
                        {
                            EventActivityId = "EA004",
                            ActivityId = "ACT013",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6757),
                            Description = "AI and future coding",
                            EventId = "E003"
                        },
                        new
                        {
                            EventActivityId = "EA005",
                            ActivityId = "ACT009",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6760),
                            Description = "Dance battles live",
                            EventId = "E004"
                        },
                        new
                        {
                            EventActivityId = "EA006",
                            ActivityId = "ACT003",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6765),
                            Description = "Comic-Con live music",
                            EventId = "E005"
                        },
                        new
                        {
                            EventActivityId = "EA007",
                            ActivityId = "ACT007",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6767),
                            Description = "Anime and book discussions",
                            EventId = "E006"
                        },
                        new
                        {
                            EventActivityId = "EA008",
                            ActivityId = "ACT010",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6770),
                            Description = "Chess and gaming",
                            EventId = "E007"
                        },
                        new
                        {
                            EventActivityId = "EA009",
                            ActivityId = "ACT011",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6773),
                            Description = "Outdoor movie fun",
                            EventId = "E008"
                        },
                        new
                        {
                            EventActivityId = "EA010",
                            ActivityId = "ACT015",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6776),
                            Description = "Meditation for cosplayers",
                            EventId = "E009"
                        },
                        new
                        {
                            EventActivityId = "EA011",
                            ActivityId = "ACT012",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6778),
                            Description = "Science in filmmaking",
                            EventId = "E010"
                        },
                        new
                        {
                            EventActivityId = "EA012",
                            ActivityId = "ACT006",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6781),
                            Description = "Halloween charity run",
                            EventId = "E011"
                        },
                        new
                        {
                            EventActivityId = "EA013",
                            ActivityId = "ACT014",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6783),
                            Description = "Christmas gardening",
                            EventId = "E012"
                        },
                        new
                        {
                            EventActivityId = "EA014",
                            ActivityId = "ACT002",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6788),
                            Description = "Cooking for music lovers",
                            EventId = "E004"
                        },
                        new
                        {
                            EventActivityId = "EA015",
                            ActivityId = "ACT008",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6791),
                            Description = "Photography in tech",
                            EventId = "E003"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.Property<string>("EventCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCharacter");

                    b.HasData(
                        new
                        {
                            EventCharacterId = "EC001",
                            CharacterId = "CH001",
                            EventId = "E001"
                        },
                        new
                        {
                            EventCharacterId = "EC002",
                            CharacterId = "CH002",
                            EventId = "E002"
                        },
                        new
                        {
                            EventCharacterId = "EC003",
                            CharacterId = "CH003",
                            EventId = "E003"
                        },
                        new
                        {
                            EventCharacterId = "EC004",
                            CharacterId = "CH004",
                            EventId = "E004"
                        },
                        new
                        {
                            EventCharacterId = "EC005",
                            CharacterId = "CH005",
                            EventId = "E005"
                        },
                        new
                        {
                            EventCharacterId = "EC006",
                            CharacterId = "CH006",
                            EventId = "E006"
                        },
                        new
                        {
                            EventCharacterId = "EC007",
                            CharacterId = "CH007",
                            EventId = "E007"
                        },
                        new
                        {
                            EventCharacterId = "EC008",
                            CharacterId = "CH008",
                            EventId = "E008"
                        },
                        new
                        {
                            EventCharacterId = "EC009",
                            CharacterId = "CH009",
                            EventId = "E009"
                        },
                        new
                        {
                            EventCharacterId = "EC010",
                            CharacterId = "CH010",
                            EventId = "E010"
                        },
                        new
                        {
                            EventCharacterId = "EC011",
                            CharacterId = "CH011",
                            EventId = "E011"
                        },
                        new
                        {
                            EventCharacterId = "EC012",
                            CharacterId = "CH012",
                            EventId = "E012"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageId");

                    b.HasIndex("EventId");

                    b.ToTable("EventImage");

                    b.HasData(
                        new
                        {
                            ImageId = "EI001",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7341),
                            EventId = "E001",
                            ImageUrl = "https://example.com/event1.jpg"
                        },
                        new
                        {
                            ImageId = "EI002",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7344),
                            EventId = "E002",
                            ImageUrl = "https://example.com/event2.jpg"
                        },
                        new
                        {
                            ImageId = "EI003",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7350),
                            EventId = "E003",
                            ImageUrl = "https://example.com/event3.jpg"
                        },
                        new
                        {
                            ImageId = "EI004",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7352),
                            EventId = "E004",
                            ImageUrl = "https://example.com/event4.jpg"
                        },
                        new
                        {
                            ImageId = "EI005",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7355),
                            EventId = "E005",
                            ImageUrl = "https://example.com/event5.jpg"
                        },
                        new
                        {
                            ImageId = "EI006",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7357),
                            EventId = "E006",
                            ImageUrl = "https://example.com/event6.jpg"
                        },
                        new
                        {
                            ImageId = "EI007",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7359),
                            EventId = "E007",
                            ImageUrl = "https://example.com/event7.jpg"
                        },
                        new
                        {
                            ImageId = "EI008",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7361),
                            EventId = "E008",
                            ImageUrl = "https://example.com/event8.jpg"
                        },
                        new
                        {
                            ImageId = "EI009",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7363),
                            EventId = "E009",
                            ImageUrl = "https://example.com/event9.jpg"
                        },
                        new
                        {
                            ImageId = "EI010",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7365),
                            EventId = "E010",
                            ImageUrl = "https://example.com/event10.jpg"
                        },
                        new
                        {
                            ImageId = "EI011",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7370),
                            EventId = "E011",
                            ImageUrl = "https://example.com/event11.jpg"
                        },
                        new
                        {
                            ImageId = "EI012",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7372),
                            EventId = "E012",
                            ImageUrl = "https://example.com/event12.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractId");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            FeedbackId = "10399045-5b7c-4413-a36f-beb36d9776d3",
                            AccountId = "A001",
                            ContractId = "CT002",
                            CreateBy = "A001",
                            CreateDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Great experience!"
                        },
                        new
                        {
                            FeedbackId = "5aefc192-ec4a-425b-820d-6d2a681154c4",
                            AccountId = "A004",
                            ContractId = "CT005",
                            CreateBy = "A004",
                            CreateDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Loved the event!"
                        },
                        new
                        {
                            FeedbackId = "420b4447-96e7-401b-a8d6-207bb7c95f88",
                            AccountId = "A005",
                            ContractId = "CT008",
                            CreateBy = "A005",
                            CreateDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice cosplay session!"
                        },
                        new
                        {
                            FeedbackId = "7709c212-9e18-4edf-a4f3-5f80c1c6d97f",
                            AccountId = "A007",
                            ContractId = "CT010",
                            CreateBy = "A007",
                            CreateDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enjoyed the event!"
                        },
                        new
                        {
                            FeedbackId = "81377696-343c-4a12-aca0-0129e404106f",
                            AccountId = "A008",
                            ContractId = "CT014",
                            CreateBy = "A008",
                            CreateDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Would love to join again!"
                        },
                        new
                        {
                            FeedbackId = "891af80f-c4b9-4039-84c8-42ab6d0163f8",
                            AccountId = "A010",
                            ContractId = "CT002",
                            CreateBy = "A010",
                            CreateDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The atmosphere was amazing!"
                        },
                        new
                        {
                            FeedbackId = "71c9af22-93e7-4445-ab5d-b31c88998f5a",
                            AccountId = "A012",
                            ContractId = "CT005",
                            CreateBy = "A012",
                            CreateDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Best cosplay event!"
                        },
                        new
                        {
                            FeedbackId = "736dd033-427c-4c93-80bb-a9e60f5a53d5",
                            AccountId = "A013",
                            ContractId = "CT008",
                            CreateBy = "A013",
                            CreateDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice crowd and management!"
                        },
                        new
                        {
                            FeedbackId = "1e4ffb83-0031-407c-8eb1-9279bce79604",
                            AccountId = "A015",
                            ContractId = "CT010",
                            CreateBy = "A015",
                            CreateDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amazing experience!"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            Id = "N001",
                            AccountId = "A001",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6051),
                            IsRead = false,
                            Message = "Welcome to the system!"
                        },
                        new
                        {
                            Id = "N002",
                            AccountId = "A002",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6054),
                            IsRead = false,
                            Message = "Your account has been upgraded."
                        },
                        new
                        {
                            Id = "N003",
                            AccountId = "A003",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6057),
                            IsRead = true,
                            Message = "New promotional offer available!"
                        },
                        new
                        {
                            Id = "N004",
                            AccountId = "A004",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6060),
                            IsRead = false,
                            Message = "Your request has been approved."
                        },
                        new
                        {
                            Id = "N005",
                            AccountId = "A005",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6063),
                            IsRead = true,
                            Message = "System maintenance scheduled."
                        },
                        new
                        {
                            Id = "N006",
                            AccountId = "A006",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6068),
                            IsRead = false,
                            Message = "Your order has been shipped!"
                        },
                        new
                        {
                            Id = "N007",
                            AccountId = "A007",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6070),
                            IsRead = false,
                            Message = "New event registration open."
                        },
                        new
                        {
                            Id = "N008",
                            AccountId = "A008",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6073),
                            IsRead = true,
                            Message = "Reminder: Payment due soon."
                        },
                        new
                        {
                            Id = "N009",
                            AccountId = "A009",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6076),
                            IsRead = false,
                            Message = "Your password was changed."
                        },
                        new
                        {
                            Id = "N010",
                            AccountId = "A010",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6078),
                            IsRead = false,
                            Message = "Admin announcement update."
                        },
                        new
                        {
                            Id = "N011",
                            AccountId = "A011",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6081),
                            IsRead = true,
                            Message = "New message from support."
                        },
                        new
                        {
                            Id = "N012",
                            AccountId = "A012",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6083),
                            IsRead = false,
                            Message = "Upcoming event invitation."
                        },
                        new
                        {
                            Id = "N013",
                            AccountId = "A013",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6086),
                            IsRead = false,
                            Message = "New cosplayer contest."
                        },
                        new
                        {
                            Id = "N014",
                            AccountId = "A014",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6091),
                            IsRead = true,
                            Message = "Loyalty points updated."
                        },
                        new
                        {
                            Id = "N015",
                            AccountId = "A015",
                            CreatedAt = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(6123),
                            IsRead = false,
                            Message = "Your subscription expired."
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderId = "O001",
                            AccountId = "A003",
                            OrderDate = "2024-03-01",
                            OrderStatus = 0,
                            TotalPrice = 250.0
                        },
                        new
                        {
                            OrderId = "O002",
                            AccountId = "A006",
                            OrderDate = "2024-03-05",
                            OrderStatus = 0,
                            TotalPrice = 150.5
                        },
                        new
                        {
                            OrderId = "O003",
                            AccountId = "A011",
                            OrderDate = "2024-03-10",
                            OrderStatus = 1,
                            TotalPrice = 300.0
                        },
                        new
                        {
                            OrderId = "O004",
                            AccountId = "A014",
                            OrderDate = "2024-03-12",
                            OrderStatus = 0,
                            TotalPrice = 400.0
                        },
                        new
                        {
                            OrderId = "O005",
                            AccountId = "A003",
                            OrderDate = "2024-03-15",
                            OrderStatus = 1,
                            TotalPrice = 175.0
                        },
                        new
                        {
                            OrderId = "O006",
                            AccountId = "A006",
                            OrderDate = "2024-03-18",
                            OrderStatus = 0,
                            TotalPrice = 225.0
                        },
                        new
                        {
                            OrderId = "O007",
                            AccountId = "A011",
                            OrderDate = "2024-03-20",
                            OrderStatus = 0,
                            TotalPrice = 350.0
                        },
                        new
                        {
                            OrderId = "O008",
                            AccountId = "A014",
                            OrderDate = "2024-03-22",
                            OrderStatus = 1,
                            TotalPrice = 275.0
                        },
                        new
                        {
                            OrderId = "O009",
                            AccountId = "A003",
                            OrderDate = "2024-03-25",
                            OrderStatus = 0,
                            TotalPrice = 500.0
                        },
                        new
                        {
                            OrderId = "O010",
                            AccountId = "A006",
                            OrderDate = "2024-03-28",
                            OrderStatus = 1,
                            TotalPrice = 125.0
                        },
                        new
                        {
                            OrderId = "O011",
                            AccountId = "A011",
                            OrderDate = "2024-03-30",
                            OrderStatus = 0,
                            TotalPrice = 325.0
                        },
                        new
                        {
                            OrderId = "O012",
                            AccountId = "A014",
                            OrderDate = "2024-04-02",
                            OrderStatus = 0,
                            TotalPrice = 410.0
                        },
                        new
                        {
                            OrderId = "O013",
                            AccountId = "A003",
                            OrderDate = "2024-04-05",
                            OrderStatus = 1,
                            TotalPrice = 280.0
                        },
                        new
                        {
                            OrderId = "O014",
                            AccountId = "A006",
                            OrderDate = "2024-04-07",
                            OrderStatus = 0,
                            TotalPrice = 350.0
                        },
                        new
                        {
                            OrderId = "O015",
                            AccountId = "A011",
                            OrderDate = "2024-04-10",
                            OrderStatus = 0,
                            TotalPrice = 200.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.OrderProduct", b =>
                {
                    b.Property<string>("OrderProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");

                    b.HasData(
                        new
                        {
                            OrderProductId = "4e6adcee-d015-4a2f-af85-e163402c0e98",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7411),
                            OrderId = "O001",
                            Price = 30.0,
                            ProductId = "P001",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "bcaf78af-3a9d-4398-ba03-bffe11bde36e",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7415),
                            OrderId = "O001",
                            Price = 20.0,
                            ProductId = "P002",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "add24558-95f1-4fd9-947d-41bf35f78ed0",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7419),
                            OrderId = "O002",
                            Price = 80.0,
                            ProductId = "P003",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "8622d129-b70c-4aad-9a51-6220f3620898",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7425),
                            OrderId = "O002",
                            Price = 100.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "3ba268fb-51ab-4c4f-a8fe-b7810f0a3e0f",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7429),
                            OrderId = "O003",
                            Price = 25.0,
                            ProductId = "P005",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "55727c80-7e3b-472e-aacb-daf8670c79be",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7432),
                            OrderId = "O003",
                            Price = 40.0,
                            ProductId = "P006",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "ed01399a-d65a-4b8a-bd8b-c9dc8d35e4d7",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7435),
                            OrderId = "O004",
                            Price = 15.0,
                            ProductId = "P007",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "fa513b58-0ff0-47f3-a551-db649c1bfef5",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7441),
                            OrderId = "O004",
                            Price = 50.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "b3cb61e1-c022-4e98-b826-3e21dce0c723",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7444),
                            OrderId = "O005",
                            Price = 60.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "32cab6f7-282b-49f6-8b93-aca00f0b5420",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7448),
                            OrderId = "O005",
                            Price = 120.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "174282d1-82d1-4c7c-a233-d3e827842ac2",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7451),
                            OrderId = "O006",
                            Price = 35.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "6b44b2e9-a0f5-42e4-9bb3-d5fe07b4d606",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7457),
                            OrderId = "O006",
                            Price = 45.0,
                            ProductId = "P012",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "92ea1f1f-8726-49b1-889a-cfaea9d38478",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7461),
                            OrderId = "O007",
                            Price = 18.0,
                            ProductId = "P013",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "f03096b7-f989-40a2-96d3-80b5ea626a94",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7464),
                            OrderId = "O007",
                            Price = 90.0,
                            ProductId = "P014",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "4c8d8cca-df37-44d7-b1bd-218152775ba5",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7468),
                            OrderId = "O008",
                            Price = 22.0,
                            ProductId = "P015",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "1b0eece9-c924-4858-af66-f6ae901d1151",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7509),
                            OrderId = "O008",
                            Price = 30.0,
                            ProductId = "P001",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "fba094b9-f513-4098-ba00-8ecc73ee045e",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7513),
                            OrderId = "O009",
                            Price = 20.0,
                            ProductId = "P002",
                            Quantity = 6
                        },
                        new
                        {
                            OrderProductId = "84bdf104-8baf-4683-a629-05aa93d735a1",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7517),
                            OrderId = "O009",
                            Price = 80.0,
                            ProductId = "P003",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "77e39838-2529-4514-b3c0-4eb1e720c04d",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7521),
                            OrderId = "O010",
                            Price = 100.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "44a9ae8c-e583-4ad5-b2d7-482115c99171",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7527),
                            OrderId = "O010",
                            Price = 25.0,
                            ProductId = "P005",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "0a939d22-6485-4872-8361-0cfe5211e8a9",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7531),
                            OrderId = "O011",
                            Price = 40.0,
                            ProductId = "P006",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "fd47959c-d72e-4c15-91dd-619ab208e957",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7535),
                            OrderId = "O011",
                            Price = 15.0,
                            ProductId = "P007",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "fe1b73c7-289e-453b-8577-49d6fa982803",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7538),
                            OrderId = "O012",
                            Price = 50.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "02d355e5-d726-4f57-966f-effe6af53434",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7545),
                            OrderId = "O012",
                            Price = 60.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "3e6e3d74-d526-43de-8e4e-ad9b0ec2e480",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7548),
                            OrderId = "O013",
                            Price = 120.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "0a479cd6-003b-4235-8b58-dd8523565bea",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7551),
                            OrderId = "O013",
                            Price = 35.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "d61ddc1c-fe1c-478a-a204-74ce2a742c39",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7555),
                            OrderId = "O014",
                            Price = 45.0,
                            ProductId = "P012",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "174c897a-0acd-4182-89ed-7e86388ecd05",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7561),
                            OrderId = "O014",
                            Price = 18.0,
                            ProductId = "P013",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "78711d30-89a8-4025-bba5-82b44c84e334",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7564),
                            OrderId = "O015",
                            Price = 90.0,
                            ProductId = "P014",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "4760bfbe-5b87-4226-b5dc-289abac6abc4",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7568),
                            OrderId = "O015",
                            Price = 22.0,
                            ProductId = "P015",
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PackageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Package");

                    b.HasData(
                        new
                        {
                            PackageId = "PKG001",
                            Description = "Rent a single character for an event",
                            PackageName = "Basic Character Rental",
                            Price = 100.0,
                            ServiceId = "S001"
                        },
                        new
                        {
                            PackageId = "PKG002",
                            Description = "Rent multiple characters with costumes",
                            PackageName = "Deluxe Character Rental",
                            Price = 250.0,
                            ServiceId = "S001"
                        },
                        new
                        {
                            PackageId = "PKG003",
                            Description = "Full-day character rental service",
                            PackageName = "Ultimate Character Rental",
                            Price = 500.0,
                            ServiceId = "S001"
                        },
                        new
                        {
                            PackageId = "PKG004",
                            Description = "Basic cosplay performance at an event",
                            PackageName = "Standard Cosplay Performance",
                            Price = 150.0,
                            ServiceId = "S002"
                        },
                        new
                        {
                            PackageId = "PKG005",
                            Description = "Advanced performance with choreography",
                            PackageName = "Premium Cosplay Performance",
                            Price = 300.0,
                            ServiceId = "S002"
                        },
                        new
                        {
                            PackageId = "PKG006",
                            Description = "Exclusive show with audience interaction",
                            PackageName = "VIP Cosplay Performance",
                            Price = 500.0,
                            ServiceId = "S002"
                        },
                        new
                        {
                            PackageId = "PKG007",
                            Description = "30-minute photoshoot with cosplayers",
                            PackageName = "Mini Photography Session",
                            Price = 80.0,
                            ServiceId = "S003"
                        },
                        new
                        {
                            PackageId = "PKG008",
                            Description = "1-hour professional photoshoot",
                            PackageName = "Standard Photography Session",
                            Price = 150.0,
                            ServiceId = "S003"
                        },
                        new
                        {
                            PackageId = "PKG009",
                            Description = "Complete photoshoot with editing",
                            PackageName = "Full Photography Package",
                            Price = 300.0,
                            ServiceId = "S003"
                        },
                        new
                        {
                            PackageId = "PKG010",
                            Description = "Includes exclusive cosplay merchandise",
                            PackageName = "Basic Merchandise Pack",
                            Price = 50.0,
                            ServiceId = "S004"
                        },
                        new
                        {
                            PackageId = "PKG011",
                            Description = "Premium cosplay collectibles",
                            PackageName = "Deluxe Merchandise Pack",
                            Price = 150.0,
                            ServiceId = "S004"
                        },
                        new
                        {
                            PackageId = "PKG012",
                            Description = "Limited edition cosplay items",
                            PackageName = "Ultimate Merchandise Pack",
                            Price = 300.0,
                            ServiceId = "S004"
                        },
                        new
                        {
                            PackageId = "PKG013",
                            Description = "Beginner-friendly cosplay training",
                            PackageName = "Cosplay Basics Workshop",
                            Price = 100.0,
                            ServiceId = "S005"
                        },
                        new
                        {
                            PackageId = "PKG014",
                            Description = "In-depth cosplay and makeup course",
                            PackageName = "Advanced Cosplay Training",
                            Price = 250.0,
                            ServiceId = "S005"
                        },
                        new
                        {
                            PackageId = "PKG015",
                            Description = "Professional-level training for cosplayers",
                            PackageName = "Master Cosplay Workshop",
                            Price = 500.0,
                            ServiceId = "S005"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountCouponID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("AccountCouponID")
                        .IsUnique()
                        .HasFilter("[AccountCouponID] IS NOT NULL");

                    b.HasIndex("ContractId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("TicketAccountId")
                        .IsUnique()
                        .HasFilter("[TicketAccountId] IS NOT NULL");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            PaymentId = "P001",
                            AccountCouponID = "AC001",
                            Amount = 250.0,
                            CreatAt = new DateTime(2024, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA001",
                            TransactionId = "TXN001",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P002",
                            Amount = 150.5,
                            CreatAt = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 0,
                            TicketAccountId = "TA002",
                            TransactionId = "TXN002",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P003",
                            Amount = 90.0,
                            CreatAt = new DateTime(2024, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA003",
                            TransactionId = "TXN003",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P004",
                            AccountCouponID = "AC012",
                            Amount = 400.0,
                            CreatAt = new DateTime(2024, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA004",
                            TransactionId = "TXN004",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P005",
                            Amount = 175.0,
                            CreatAt = new DateTime(2024, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 2,
                            TicketAccountId = "TA005",
                            TransactionId = "TXN005",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P006",
                            AccountCouponID = "AC003",
                            Amount = 225.0,
                            CreatAt = new DateTime(2024, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O006",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN006",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P007",
                            Amount = 350.0,
                            CreatAt = new DateTime(2024, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O007",
                            Purpose = 3,
                            Status = 0,
                            TransactionId = "TXN007",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P008",
                            Amount = 150.0,
                            CreatAt = new DateTime(2024, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O008",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN008",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P009",
                            Amount = 500.0,
                            CreatAt = new DateTime(2024, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O009",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN009",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P010",
                            AccountCouponID = "AC004",
                            Amount = 125.0,
                            CreatAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O010",
                            Purpose = 3,
                            Status = 2,
                            TransactionId = "TXN010",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P011",
                            Amount = 325.0,
                            ContractId = "CT002",
                            CreatAt = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 1,
                            Status = 1,
                            TransactionId = "TXN011",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P012",
                            Amount = 410.0,
                            ContractId = "CT005",
                            CreatAt = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 1,
                            Status = 0,
                            TransactionId = "TXN012",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P013",
                            Amount = 90.0,
                            ContractId = "CT008",
                            CreatAt = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 1,
                            TransactionId = "TXN013",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P014",
                            Amount = 350.0,
                            ContractId = "CT010",
                            CreatAt = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 2,
                            TransactionId = "TXN014",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P015",
                            Amount = 200.0,
                            ContractId = "CT002",
                            CreatAt = new DateTime(2024, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 1,
                            TransactionId = "TXN015",
                            Type = "Card"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = "P001",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5385),
                            Description = "A wig for Naruto cosplay",
                            IsActive = true,
                            Price = 30.0,
                            ProductName = "Naruto Wig",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "P002",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5391),
                            Description = "A hat for Mario cosplay",
                            IsActive = true,
                            Price = 20.0,
                            ProductName = "Mario Hat",
                            Quantity = 15
                        },
                        new
                        {
                            ProductId = "P003",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5394),
                            Description = "Complete costume for Sasuke cosplay",
                            IsActive = true,
                            Price = 80.0,
                            ProductName = "Sasuke Costume",
                            Quantity = 5
                        },
                        new
                        {
                            ProductId = "P004",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5398),
                            Description = "Replica sword from The Legend of Zelda",
                            IsActive = true,
                            Price = 100.0,
                            ProductName = "Zelda Sword",
                            Quantity = 7
                        },
                        new
                        {
                            ProductId = "P005",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5402),
                            Description = "Iconic straw hat from One Piece",
                            IsActive = true,
                            Price = 25.0,
                            ProductName = "One Piece Straw Hat",
                            Quantity = 20
                        },
                        new
                        {
                            ProductId = "P006",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5439),
                            Description = "Hatsune Miku blue twin-tail wig",
                            IsActive = true,
                            Price = 40.0,
                            ProductName = "Miku Wig",
                            Quantity = 12
                        },
                        new
                        {
                            ProductId = "P007",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5444),
                            Description = "Tanjiro's iconic hanafuda earrings",
                            IsActive = true,
                            Price = 15.0,
                            ProductName = "Demon Slayer Earrings",
                            Quantity = 30
                        },
                        new
                        {
                            ProductId = "P008",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5448),
                            Description = "Survey Corps uniform jacket",
                            IsActive = true,
                            Price = 50.0,
                            ProductName = "Attack on Titan Jacket",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "P009",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5451),
                            Description = "Cozy Pikachu-themed onesie",
                            IsActive = true,
                            Price = 60.0,
                            ProductName = "Pikachu Onesie",
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = "P010",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5455),
                            Description = "Final Fantasy VII replica sword",
                            IsActive = true,
                            Price = 120.0,
                            ProductName = "Cloud's Buster Sword",
                            Quantity = 4
                        },
                        new
                        {
                            ProductId = "P011",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5460),
                            Description = "LED Vision accessory from Genshin Impact",
                            IsActive = true,
                            Price = 35.0,
                            ProductName = "Genshin Impact Vision",
                            Quantity = 25
                        },
                        new
                        {
                            ProductId = "P012",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5464),
                            Description = "Jinx cosplay wig from Arcane",
                            IsActive = true,
                            Price = 45.0,
                            ProductName = "Jinx Wig",
                            Quantity = 6
                        },
                        new
                        {
                            ProductId = "P013",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5467),
                            Description = "Golden tiara from Sailor Moon",
                            IsActive = true,
                            Price = 18.0,
                            ProductName = "Sailor Moon Tiara",
                            Quantity = 15
                        },
                        new
                        {
                            ProductId = "P014",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5474),
                            Description = "High-quality Spider-Man suit",
                            IsActive = true,
                            Price = 90.0,
                            ProductName = "Spider-Man Suit",
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = "P015",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5477),
                            Description = "Replica wand from Harry Potter series",
                            IsActive = true,
                            Price = 22.0,
                            ProductName = "Harry Potter Wand",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ProductImage", b =>
                {
                    b.Property<string>("ProductImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            ProductImageId = "IMG001",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7686),
                            ProductId = "P001",
                            UrlImage = "https://example.com/images/naruto_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG002",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7717),
                            ProductId = "P002",
                            UrlImage = "https://example.com/images/mario_hat.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG003",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7719),
                            ProductId = "P003",
                            UrlImage = "https://example.com/images/sasuke_costume.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG004",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7724),
                            ProductId = "P004",
                            UrlImage = "https://example.com/images/zelda_sword.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG005",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7726),
                            ProductId = "P005",
                            UrlImage = "https://example.com/images/one_piece_hat.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG006",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7728),
                            ProductId = "P006",
                            UrlImage = "https://example.com/images/miku_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG007",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7731),
                            ProductId = "P007",
                            UrlImage = "https://example.com/images/demon_slayer_earrings.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG008",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7733),
                            ProductId = "P008",
                            UrlImage = "https://example.com/images/aot_jacket.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG009",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7735),
                            ProductId = "P009",
                            UrlImage = "https://example.com/images/pikachu_onesie.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG010",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7738),
                            ProductId = "P010",
                            UrlImage = "https://example.com/images/buster_sword.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG011",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7740),
                            ProductId = "P011",
                            UrlImage = "https://example.com/images/genshin_vision.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG012",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7745),
                            ProductId = "P012",
                            UrlImage = "https://example.com/images/jinx_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG013",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7747),
                            ProductId = "P013",
                            UrlImage = "https://example.com/images/sailor_moon_tiara.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG014",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7749),
                            ProductId = "P014",
                            UrlImage = "https://example.com/images/spiderman_suit.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG015",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7751),
                            ProductId = "P015",
                            UrlImage = "https://example.com/images/harry_potter_wand.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.Property<string>("RefreshTokenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("AccountId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Description")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Request");

                    b.HasData(
                        new
                        {
                            RequestId = "R001",
                            AccountId = "A001",
                            ContractId = "CT001",
                            Description = 0,
                            EndDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rent Naruto Costume",
                            Price = 100.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R002",
                            AccountId = "A002",
                            ContractId = "CT002",
                            Description = 1,
                            EndDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rent Cosplayer for Event",
                            Price = 500.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R003",
                            AccountId = "A003",
                            ContractId = "CT003",
                            Description = 2,
                            EndDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Create Anime Festival",
                            Price = 2000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R004",
                            AccountId = "A004",
                            ContractId = "CT004",
                            Description = 0,
                            EndDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rent Samurai Armor",
                            Price = 150.0,
                            ServiceId = "S004",
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R005",
                            AccountId = "A005",
                            ContractId = "CT005",
                            Description = 1,
                            EndDate = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hire Professional Cosplayer",
                            Price = 700.0,
                            ServiceId = "S005",
                            StartDate = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R006",
                            AccountId = "A006",
                            ContractId = "CT006",
                            Description = 2,
                            EndDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organize Comic Convention",
                            Price = 5000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R007",
                            AccountId = "A007",
                            ContractId = "CT007",
                            Description = 0,
                            EndDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rent Victorian Costume",
                            Price = 120.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R008",
                            AccountId = "A008",
                            ContractId = "CT008",
                            Description = 1,
                            EndDate = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Book Cosplayer for Birthday Party",
                            Price = 350.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R009",
                            AccountId = "A009",
                            ContractId = "CT009",
                            Description = 2,
                            EndDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Plan Fantasy Fair",
                            Price = 3000.0,
                            ServiceId = "S004",
                            StartDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R010",
                            AccountId = "A010",
                            ContractId = "CT010",
                            Description = 0,
                            EndDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rent Halloween Costumes",
                            Price = 200.0,
                            ServiceId = "S005",
                            StartDate = new DateTime(2025, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R011",
                            AccountId = "A011",
                            ContractId = "CT011",
                            Description = 1,
                            EndDate = new DateTime(2025, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hire Cosplayer for Wedding",
                            Price = 800.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R012",
                            AccountId = "A012",
                            ContractId = "CT012",
                            Description = 2,
                            EndDate = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Create Sci-Fi Convention",
                            Price = 4500.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R013",
                            AccountId = "A013",
                            ContractId = "CT013",
                            Description = 0,
                            EndDate = new DateTime(2025, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rent Santa Claus Costume",
                            Price = 130.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R014",
                            AccountId = "A014",
                            ContractId = "CT014",
                            Description = 1,
                            EndDate = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Book Cosplayer for Product Launch",
                            Price = 600.0,
                            ServiceId = "S004",
                            StartDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R015",
                            AccountId = "A015",
                            ContractId = "CT015",
                            Description = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Host Christmas Event",
                            Price = 5500.0,
                            ServiceId = "S005",
                            StartDate = new DateTime(2025, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestCharacter", b =>
                {
                    b.Property<string>("RequestCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CosplayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestCharacter");

                    b.HasData(
                        new
                        {
                            RequestCharacterId = "RC01",
                            CharacterId = "CH001",
                            CosplayerId = "C001",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7787),
                            Description = "Yêu cầu cosplay nhân vật CH001",
                            RequestId = "R001",
                            TotalPrice = 50.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7788)
                        },
                        new
                        {
                            RequestCharacterId = "RC02",
                            CharacterId = "CH002",
                            CosplayerId = "C002",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7792),
                            Description = "Yêu cầu cosplay nhân vật CH002",
                            RequestId = "R002",
                            TotalPrice = 60.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7792)
                        },
                        new
                        {
                            RequestCharacterId = "RC03",
                            CharacterId = "CH003",
                            CosplayerId = "C003",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7795),
                            Description = "Yêu cầu cosplay nhân vật CH003",
                            RequestId = "R003",
                            TotalPrice = 70.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7796)
                        },
                        new
                        {
                            RequestCharacterId = "RC04",
                            CharacterId = "CH004",
                            CosplayerId = "C004",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7799),
                            Description = "Yêu cầu cosplay nhân vật CH004",
                            RequestId = "R004",
                            TotalPrice = 80.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7800)
                        },
                        new
                        {
                            RequestCharacterId = "RC05",
                            CharacterId = "CH005",
                            CosplayerId = "C005",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7805),
                            Description = "Yêu cầu cosplay nhân vật CH005",
                            RequestId = "R005",
                            TotalPrice = 90.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7805)
                        },
                        new
                        {
                            RequestCharacterId = "RC06",
                            CharacterId = "CH006",
                            CosplayerId = "C006",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7808),
                            Description = "Yêu cầu cosplay nhân vật CH006",
                            RequestId = "R006",
                            TotalPrice = 100.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7809)
                        },
                        new
                        {
                            RequestCharacterId = "RC07",
                            CharacterId = "CH007",
                            CosplayerId = "C007",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7811),
                            Description = "Yêu cầu cosplay nhân vật CH007",
                            RequestId = "R007",
                            TotalPrice = 110.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7812)
                        },
                        new
                        {
                            RequestCharacterId = "RC08",
                            CharacterId = "CH008",
                            CosplayerId = "C008",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7815),
                            Description = "Yêu cầu cosplay nhân vật CH008",
                            RequestId = "R008",
                            TotalPrice = 120.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7815)
                        },
                        new
                        {
                            RequestCharacterId = "RC09",
                            CharacterId = "CH009",
                            CosplayerId = "C009",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7818),
                            Description = "Yêu cầu cosplay nhân vật CH009",
                            RequestId = "R009",
                            TotalPrice = 130.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7819)
                        },
                        new
                        {
                            RequestCharacterId = "RC10",
                            CharacterId = "CH010",
                            CosplayerId = "C010",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7821),
                            Description = "Yêu cầu cosplay nhân vật CH010",
                            RequestId = "R010",
                            TotalPrice = 140.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7822)
                        },
                        new
                        {
                            RequestCharacterId = "RC11",
                            CharacterId = "CH011",
                            CosplayerId = "C011",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7824),
                            Description = "Yêu cầu cosplay nhân vật CH011",
                            RequestId = "R011",
                            TotalPrice = 150.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7825)
                        },
                        new
                        {
                            RequestCharacterId = "RC12",
                            CharacterId = "CH012",
                            CosplayerId = "C012",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7828),
                            Description = "Yêu cầu cosplay nhân vật CH012",
                            RequestId = "R012",
                            TotalPrice = 160.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7828)
                        },
                        new
                        {
                            RequestCharacterId = "RC13",
                            CharacterId = "CH013",
                            CosplayerId = "C013",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7833),
                            Description = "Yêu cầu cosplay nhân vật CH013",
                            RequestId = "R013",
                            TotalPrice = 170.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7834)
                        },
                        new
                        {
                            RequestCharacterId = "RC14",
                            CharacterId = "CH014",
                            CosplayerId = "C014",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7837),
                            Description = "Yêu cầu cosplay nhân vật CH014",
                            RequestId = "R014",
                            TotalPrice = 180.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7838)
                        },
                        new
                        {
                            RequestCharacterId = "RC15",
                            CharacterId = "CH015",
                            CosplayerId = "C015",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7841),
                            Description = "Yêu cầu cosplay nhân vật CH015",
                            RequestId = "R015",
                            TotalPrice = 190.0,
                            UpdateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(7841)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "R001",
                            Description = "System Administrator",
                            RoleName = 0
                        },
                        new
                        {
                            Id = "R002",
                            Description = "Event and Service Manager",
                            RoleName = 1
                        },
                        new
                        {
                            Id = "R003",
                            Description = "Customer Service Consultant",
                            RoleName = 2
                        },
                        new
                        {
                            Id = "R004",
                            Description = "Professional Cosplayer",
                            RoleName = 3
                        },
                        new
                        {
                            Id = "R005",
                            Description = "Regular Customer",
                            RoleName = 4
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            ServiceId = "S001",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5333),
                            Description = "Rent characters for events and parties",
                            ServiceName = "Character Rental"
                        },
                        new
                        {
                            ServiceId = "S002",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5339),
                            Description = "Live cosplay performances at events",
                            ServiceName = "Cosplay Performance"
                        },
                        new
                        {
                            ServiceId = "S003",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5340),
                            Description = "Professional photoshoot with cosplayers",
                            ServiceName = "Photography Session"
                        },
                        new
                        {
                            ServiceId = "S004",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5342),
                            Description = "Selling exclusive cosplay-related merchandise",
                            ServiceName = "Merchandise Selling"
                        },
                        new
                        {
                            ServiceId = "S005",
                            CreateDate = new DateTime(2025, 3, 13, 7, 34, 13, 610, DateTimeKind.Utc).AddTicks(5344),
                            Description = "Cosplay and makeup training sessions",
                            ServiceName = "Workshop & Training"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractCharacterId")
                        .IsUnique()
                        .HasFilter("[ContractCharacterId] IS NOT NULL");

                    b.HasIndex("EventCharacterId")
                        .IsUnique();

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            TaskId = "T001",
                            AccountId = "A001",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6344),
                            Description = "Cosplay as anime characters",
                            EndDate = new DateTime(2025, 3, 16, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6343),
                            EventCharacterId = "EC001",
                            IsActive = true,
                            Location = "Tokyo",
                            StartDate = new DateTime(2025, 3, 15, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6321),
                            Status = 0,
                            TaskName = "Perform at Anime Fest",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6346)
                        },
                        new
                        {
                            TaskId = "T002",
                            AccountId = "A004",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6354),
                            Description = "Join cosplay contest",
                            EndDate = new DateTime(2025, 3, 18, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6353),
                            EventCharacterId = "EC002",
                            IsActive = true,
                            Location = "Los Angeles",
                            StartDate = new DateTime(2025, 3, 17, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6352),
                            Status = 1,
                            TaskName = "Comic Con Appearance",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6354)
                        },
                        new
                        {
                            TaskId = "T003",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6360),
                            Description = "Teach costume making",
                            EndDate = new DateTime(2025, 3, 20, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6359),
                            EventCharacterId = "EC003",
                            IsActive = true,
                            Location = "New York",
                            StartDate = new DateTime(2025, 3, 19, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6358),
                            Status = 2,
                            TaskName = "Cosplay Workshop",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6361)
                        },
                        new
                        {
                            TaskId = "T004",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6368),
                            Description = "Host a live event",
                            EndDate = new DateTime(2025, 3, 14, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6368),
                            EventCharacterId = "EC004",
                            IsActive = true,
                            Location = "Online",
                            StartDate = new DateTime(2025, 3, 14, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6367),
                            Status = 3,
                            TaskName = "Live Stream Cosplay",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6369)
                        },
                        new
                        {
                            TaskId = "T005",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6374),
                            Description = "Professional cosplay photoshoot",
                            EndDate = new DateTime(2025, 3, 22, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6373),
                            EventCharacterId = "EC005",
                            IsActive = true,
                            Location = "Paris",
                            StartDate = new DateTime(2025, 3, 21, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6372),
                            Status = 0,
                            TaskName = "Photoshoot Session",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6375)
                        },
                        new
                        {
                            TaskId = "T006",
                            AccountId = "A010",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6381),
                            Description = "Evaluate contestants",
                            EndDate = new DateTime(2025, 3, 24, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6379),
                            EventCharacterId = "EC006",
                            IsActive = true,
                            Location = "Berlin",
                            StartDate = new DateTime(2025, 3, 23, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6378),
                            Status = 1,
                            TaskName = "Guest Judge at Cosplay Contest",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6382)
                        },
                        new
                        {
                            TaskId = "T007",
                            AccountId = "A012",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6411),
                            Description = "Walk in parade",
                            EndDate = new DateTime(2025, 3, 26, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6410),
                            EventCharacterId = "EC007",
                            IsActive = true,
                            Location = "Seoul",
                            StartDate = new DateTime(2025, 3, 25, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6409),
                            Status = 2,
                            TaskName = "Cosplay Parade",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6412)
                        },
                        new
                        {
                            TaskId = "T008",
                            AccountId = "A013",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6417),
                            Description = "Perform on live TV",
                            EndDate = new DateTime(2025, 3, 28, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6417),
                            EventCharacterId = "EC008",
                            IsActive = true,
                            Location = "London",
                            StartDate = new DateTime(2025, 3, 27, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6416),
                            Status = 3,
                            TaskName = "TV Show Cosplay Segment",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6418)
                        },
                        new
                        {
                            TaskId = "T009",
                            AccountId = "A015",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6424),
                            Description = "Perform for charity",
                            EndDate = new DateTime(2025, 3, 30, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6423),
                            EventCharacterId = "EC009",
                            IsActive = true,
                            Location = "Sydney",
                            StartDate = new DateTime(2025, 3, 29, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6422),
                            Status = 4,
                            TaskName = "Cosplay Charity Event",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6424)
                        },
                        new
                        {
                            TaskId = "T010",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6430),
                            Description = "Talk about cosplay industry",
                            EndDate = new DateTime(2025, 4, 1, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6429),
                            EventCharacterId = "EC010",
                            IsActive = true,
                            Location = "San Diego",
                            StartDate = new DateTime(2025, 3, 31, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6428),
                            Status = 0,
                            TaskName = "Cosplay Panel Discussion",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6431)
                        },
                        new
                        {
                            TaskId = "T011",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6437),
                            Description = "New character shoot",
                            EndDate = new DateTime(2025, 4, 3, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6436),
                            EventCharacterId = "EC011",
                            IsActive = true,
                            Location = "Bangkok",
                            StartDate = new DateTime(2025, 4, 2, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6435),
                            Status = 1,
                            TaskName = "Cosplay Photoshoot",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6438)
                        },
                        new
                        {
                            TaskId = "T012",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6446),
                            Description = "Host main event",
                            EndDate = new DateTime(2025, 4, 5, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6445),
                            EventCharacterId = "EC012",
                            IsActive = true,
                            Location = "Jakarta",
                            StartDate = new DateTime(2025, 4, 4, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6444),
                            Status = 2,
                            TaskName = "Anime Convention Hosting",
                            UpdateDate = new DateTime(2025, 3, 13, 14, 34, 13, 610, DateTimeKind.Local).AddTicks(6447)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            TicketId = "T001",
                            EventId = "E001",
                            Price = 50.0,
                            Quantity = 500
                        },
                        new
                        {
                            TicketId = "T002",
                            EventId = "E002",
                            Price = 40.0,
                            Quantity = 300
                        },
                        new
                        {
                            TicketId = "T003",
                            EventId = "E003",
                            Price = 30.0,
                            Quantity = 200
                        },
                        new
                        {
                            TicketId = "T004",
                            EventId = "E004",
                            Price = 60.0,
                            Quantity = 600
                        },
                        new
                        {
                            TicketId = "T005",
                            EventId = "E005",
                            Price = 45.0,
                            Quantity = 400
                        },
                        new
                        {
                            TicketId = "T006",
                            EventId = "E006",
                            Price = 55.0,
                            Quantity = 350
                        },
                        new
                        {
                            TicketId = "T007",
                            EventId = "E007",
                            Price = 35.0,
                            Quantity = 250
                        },
                        new
                        {
                            TicketId = "T008",
                            EventId = "E008",
                            Price = 50.0,
                            Quantity = 450
                        },
                        new
                        {
                            TicketId = "T009",
                            EventId = "E009",
                            Price = 65.0,
                            Quantity = 550
                        },
                        new
                        {
                            TicketId = "T010",
                            EventId = "E010",
                            Price = 70.0,
                            Quantity = 700
                        },
                        new
                        {
                            TicketId = "T011",
                            EventId = "E011",
                            Price = 25.0,
                            Quantity = 150
                        },
                        new
                        {
                            TicketId = "T012",
                            EventId = "E012",
                            Price = 75.0,
                            Quantity = 800
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Property<string>("TicketAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("TicketAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketAccount");

                    b.HasData(
                        new
                        {
                            TicketAccountId = "TA001",
                            AccountId = "A003",
                            Quantity = 2,
                            TicketCode = "TC001",
                            TicketId = "T001",
                            TotalPrice = 100.0
                        },
                        new
                        {
                            TicketAccountId = "TA002",
                            AccountId = "A006",
                            Quantity = 1,
                            TicketCode = "TC002",
                            TicketId = "T002",
                            TotalPrice = 40.0
                        },
                        new
                        {
                            TicketAccountId = "TA003",
                            AccountId = "A011",
                            Quantity = 3,
                            TicketCode = "TC003",
                            TicketId = "T003",
                            TotalPrice = 90.0
                        },
                        new
                        {
                            TicketAccountId = "TA004",
                            AccountId = "A014",
                            Quantity = 2,
                            TicketCode = "TC004",
                            TicketId = "T004",
                            TotalPrice = 120.0
                        },
                        new
                        {
                            TicketAccountId = "TA005",
                            AccountId = "A003",
                            Quantity = 4,
                            TicketCode = "TC005",
                            TicketId = "T005",
                            TotalPrice = 180.0
                        },
                        new
                        {
                            TicketAccountId = "TA006",
                            AccountId = "A006",
                            Quantity = 2,
                            TicketCode = "TC006",
                            TicketId = "T006",
                            TotalPrice = 110.0
                        },
                        new
                        {
                            TicketAccountId = "TA007",
                            AccountId = "A011",
                            Quantity = 1,
                            TicketCode = "TC007",
                            TicketId = "T007",
                            TotalPrice = 35.0
                        },
                        new
                        {
                            TicketAccountId = "TA008",
                            AccountId = "A014",
                            Quantity = 3,
                            TicketCode = "TC008",
                            TicketId = "T008",
                            TotalPrice = 150.0
                        },
                        new
                        {
                            TicketAccountId = "TA009",
                            AccountId = "A003",
                            Quantity = 2,
                            TicketCode = "TC009",
                            TicketId = "T009",
                            TotalPrice = 130.0
                        },
                        new
                        {
                            TicketAccountId = "TA010",
                            AccountId = "A006",
                            Quantity = 1,
                            TicketCode = "TC010",
                            TicketId = "T010",
                            TotalPrice = 70.0
                        },
                        new
                        {
                            TicketAccountId = "TA011",
                            AccountId = "A011",
                            Quantity = 5,
                            TicketCode = "TC011",
                            TicketId = "T011",
                            TotalPrice = 125.0
                        },
                        new
                        {
                            TicketAccountId = "TA012",
                            AccountId = "A014",
                            Quantity = 2,
                            TicketCode = "TC012",
                            TicketId = "T012",
                            TotalPrice = 150.0
                        },
                        new
                        {
                            TicketAccountId = "TA013",
                            AccountId = "A003",
                            Quantity = 3,
                            TicketCode = "TC013",
                            TicketId = "T003",
                            TotalPrice = 90.0
                        },
                        new
                        {
                            TicketAccountId = "TA014",
                            AccountId = "A006",
                            Quantity = 2,
                            TicketCode = "TC014",
                            TicketId = "T005",
                            TotalPrice = 90.0
                        },
                        new
                        {
                            TicketAccountId = "TA015",
                            AccountId = "A011",
                            Quantity = 1,
                            TicketCode = "TC015",
                            TicketId = "T007",
                            TotalPrice = 35.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("AccountCoupons")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Coupon", "Coupon")
                        .WithMany("AccountCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("AccountImages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithOne("Cart")
                        .HasForeignKey("CCSS_Repository.Entities.Cart", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Category", "Category")
                        .WithMany("Characters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CharacterImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("CharacterImages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Request", "Request")
                        .WithOne("Contract")
                        .HasForeignKey("CCSS_Repository.Entities.Contract", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Character");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventActivity", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Activity", "Activity")
                        .WithMany("EventActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventActivities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("EventCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventCharacters")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Notification", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.OrderProduct", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Service", "Service")
                        .WithMany("Packages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.AccountCoupon", "AccountCoupon")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "AccountCouponID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.TicketAccount", "TicketAccount")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "TicketAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountCoupon");

                    b.Navigation("Contract");

                    b.Navigation("Order");

                    b.Navigation("TicketAccount");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ProductImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Requests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("RequestCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Request", "Request")
                        .WithMany("RequestCharacters")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Tasks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.ContractCharacter", "ContractCharacter")
                        .WithOne("Task")
                        .HasForeignKey("CCSS_Repository.Entities.Task", "ContractCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.EventCharacter", "EventCharacter")
                        .WithOne("Task")
                        .HasForeignKey("CCSS_Repository.Entities.Task", "EventCharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ContractCharacter");

                    b.Navigation("EventCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithOne("Ticket")
                        .HasForeignKey("CCSS_Repository.Entities.Ticket", "EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Ticket", "Ticket")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Navigation("AccountCoupons");

                    b.Navigation("AccountImages");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Requests");

                    b.Navigation("Tasks");

                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Activity", b =>
                {
                    b.Navigation("EventActivities");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Navigation("CharacterImages");

                    b.Navigation("ContractCharacters");

                    b.Navigation("EventCharacters");

                    b.Navigation("RequestCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Navigation("ContractCharacters");

                    b.Navigation("Feedbacks");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Coupon", b =>
                {
                    b.Navigation("AccountCoupons");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Navigation("EventActivities");

                    b.Navigation("EventCharacters");

                    b.Navigation("EventImages");

                    b.Navigation("Ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();

                    b.Navigation("RequestCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Service", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
