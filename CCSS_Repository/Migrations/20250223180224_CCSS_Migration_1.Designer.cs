// <auto-generated />
using System;
using CCSS_Repository.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CCSS_Repository.Migrations
{
    [DbContext(typeof(CCSSDbContext))]
    [Migration("20250223180224_CCSS_Migration_1")]
    partial class CCSS_Migration_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Leader")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnTask")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TaskQuantity")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountId = "acc1",
                            Birthday = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CODE123",
                            Description = "Administrator account",
                            Email = "admin@example.com",
                            ImageUrl = "https://example.com/admin.png",
                            IsActive = true,
                            Leader = true,
                            Name = "Admin User",
                            OnTask = false,
                            Password = "$2a$11$k1n0OIOC7CcgbJTroAJeA.yQMGKyJvum3XVflpv1.pu84VY3Bh1Xa",
                            Phone = 123456789,
                            RoleId = "role1",
                            TaskQuantity = 0
                        },
                        new
                        {
                            AccountId = "acc2",
                            Birthday = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Code = "CODE456",
                            Description = "Customer account",
                            Email = "customer@example.com",
                            ImageUrl = "https://example.com/customer.png",
                            IsActive = true,
                            Leader = false,
                            Name = "Customer User",
                            OnTask = false,
                            Password = "$2a$11$OBK7w5pzB7VMNTVZnIH62.F9/fWW9Me4GmVYwYd37R.Gz4evwuq3W",
                            Phone = 987654321,
                            RoleId = "role3",
                            TaskQuantity = 0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCategory", b =>
                {
                    b.Property<string>("AccountCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountCategoryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AccountCategory");

                    b.HasData(
                        new
                        {
                            AccountCategoryId = "acat1",
                            AccountId = "acc1",
                            CategoryId = "cat1"
                        },
                        new
                        {
                            AccountCategoryId = "acat2",
                            AccountId = "acc2",
                            CategoryId = "cat2"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("CartId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            CartId = "cart1",
                            AccountId = "acc1",
                            TotalPrice = 0.0
                        },
                        new
                        {
                            CartId = "cart2",
                            AccountId = "acc2",
                            TotalPrice = 0.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.Property<string>("CartProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartProductId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProduct");

                    b.HasData(
                        new
                        {
                            CartProductId = "cp1",
                            CartId = "cart1",
                            ProductId = "prod1"
                        },
                        new
                        {
                            CartProductId = "cp2",
                            CartId = "cart2",
                            ProductId = "prod2"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = "cat1",
                            CategoryName = "Category 1",
                            Description = "Description for Category 1"
                        },
                        new
                        {
                            CategoryId = "cat2",
                            CategoryName = "Category 2",
                            Description = "Description for Category 2"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CharacterId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Character");

                    b.HasData(
                        new
                        {
                            CharacterId = "char1",
                            CategoryId = "cat1",
                            CharacterName = "Character 1",
                            CreateDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Price = 100.0
                        },
                        new
                        {
                            CharacterId = "char2",
                            CategoryId = "cat2",
                            CharacterName = "Character 2",
                            CreateDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Price = 150.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("CharacterQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Deposit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<bool?>("Signature")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ContractId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PackageId");

                    b.ToTable("Contract");

                    b.HasData(
                        new
                        {
                            ContractId = "ctr1",
                            AccountId = "acc1",
                            Amount = 450.0,
                            CharacterQuantity = 1,
                            ContractCode = "C001",
                            ContractName = "Contract 1",
                            Deposit = "50",
                            Description = "Contract for Event 1",
                            EndDate = new DateTime(2023, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Location 1",
                            PackageId = "pkg1",
                            Price = 500.0,
                            Signature = true,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            ContractId = "ctr2",
                            AccountId = "acc2",
                            Amount = 750.0,
                            CharacterQuantity = 2,
                            ContractCode = "C002",
                            ContractName = "Contract 2",
                            Deposit = "50",
                            Description = "Contract for Event 2",
                            EndDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Location 2",
                            PackageId = "pkg1",
                            Price = 800.0,
                            Signature = false,
                            StartDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContracId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ContractCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ContracId");

                    b.ToTable("ContractCharacter");

                    b.HasData(
                        new
                        {
                            ContractCharacterId = "cc1",
                            CharacterId = "char1",
                            ContracId = "ctr1",
                            Quantity = 1
                        },
                        new
                        {
                            ContractCharacterId = "cc2",
                            CharacterId = "char2",
                            ContracId = "ctr2",
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventId = "evt1",
                            CreateBy = "acc1",
                            CreateDate = new DateTime(2023, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Event 1",
                            EndDate = new DateTime(2023, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Event 1",
                            IsActive = true,
                            Location = "Location 1",
                            StartDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "evt2",
                            CreateBy = "acc2",
                            CreateDate = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Event 2",
                            EndDate = new DateTime(2023, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Event 2",
                            IsActive = true,
                            Location = "Location 2",
                            StartDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.Property<string>("EventCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCharacter");

                    b.HasData(
                        new
                        {
                            EventCharacterId = "ec1",
                            CharacterId = "char1",
                            EventId = "evt1"
                        },
                        new
                        {
                            EventCharacterId = "ec2",
                            CharacterId = "char2",
                            EventId = "evt2"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            FeedbackId = "fb1",
                            ContractId = "ctr1",
                            CreateDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Excellent service",
                            Star = 5
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EventId");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("CartId")
                        .IsUnique()
                        .HasFilter("[CartId] IS NOT NULL");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderId = "order1",
                            CartId = "cart1"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("PackageId");

                    b.ToTable("Package");

                    b.HasData(
                        new
                        {
                            PackageId = "pkg1",
                            Description = "Basic service package",
                            PackageName = "Basic Package",
                            Price = 99.989999999999995
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("ContractId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("TicketId")
                        .IsUnique()
                        .HasFilter("[TicketId] IS NOT NULL");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            PaymentId = "pay1",
                            Amount = 100.0,
                            CreatAt = "2023-01-01",
                            OrderId = "order1",
                            Status = 1,
                            TransactionId = "TXN001",
                            Type = "Credit Card"
                        },
                        new
                        {
                            PaymentId = "pay2",
                            Amount = 150.0,
                            CreatAt = "2023-01-02",
                            Status = 2,
                            TicketId = "tkt1",
                            TransactionId = "TXN002",
                            Type = "Bank Transfer"
                        },
                        new
                        {
                            PaymentId = "pay3",
                            Amount = 200.0,
                            ContractId = "ctr1",
                            CreatAt = "2023-01-03",
                            Status = 1,
                            TransactionId = "TXN003",
                            Type = "PayPal"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = "prod1",
                            CreateDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Product 1",
                            IsActive = true,
                            Price = 10.0,
                            ProductName = "Product 1",
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = "prod2",
                            CreateDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Product 2",
                            IsActive = true,
                            Price = 20.0,
                            ProductName = "Product 2",
                            Quantity = 200
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.Property<string>("RefreshTokenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("RefreshToken");

                    b.HasData(
                        new
                        {
                            RefreshTokenId = "rt1",
                            AccountId = "acc1",
                            CreateAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiresAt = new DateTime(2023, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRevoked = false,
                            IsUsed = false,
                            JwtId = "jwt1",
                            RefreshTokenCode = "RTCODE1",
                            RefreshTokenValue = "sample_refresh_token"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "role1",
                            Description = "Admin role",
                            RoleName = 1
                        },
                        new
                        {
                            Id = "role2",
                            Description = "Manager role",
                            RoleName = 2
                        },
                        new
                        {
                            Id = "role3",
                            Description = "Customer role",
                            RoleName = 3
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractId");

                    b.HasIndex("EventId");

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            TaskId = "tsk1",
                            AccountId = "acc1",
                            ContractId = "ctr1",
                            CreateDate = new DateTime(2023, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Task for Event 1",
                            EndDate = new DateTime(2023, 3, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = "evt1",
                            IsActive = true,
                            Location = "Location A",
                            StartDate = new DateTime(2023, 3, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TaskName = "Task 1"
                        },
                        new
                        {
                            TaskId = "tsk2",
                            AccountId = "acc2",
                            ContractId = "ctr2",
                            CreateDate = new DateTime(2023, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Task for Event 2",
                            EndDate = new DateTime(2023, 4, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = "evt2",
                            IsActive = true,
                            Location = "Location B",
                            StartDate = new DateTime(2023, 4, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TaskName = "Task 2"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            TicketId = "tkt1",
                            EventId = "evt1",
                            Price = 50.0,
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Property<string>("TicketAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("quantitypurchased")
                        .HasColumnType("int");

                    b.HasKey("TicketAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketAccounts");

                    b.HasData(
                        new
                        {
                            TicketAccountId = "tkt1",
                            AccountId = "acc2",
                            TicketId = "tkt1",
                            TotalPrice = 250.0,
                            quantitypurchased = 5
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCategory", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("AccountCategories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Category", "Category")
                        .WithMany("AccountCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithOne("Cart")
                        .HasForeignKey("CCSS_Repository.Entities.Cart", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Category", "Category")
                        .WithMany("Characters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Contracts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Package", "Package")
                        .WithMany("Contracts")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("ContracId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("EventCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventCharacters")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithOne("Feedback")
                        .HasForeignKey("CCSS_Repository.Entities.Feedback", "ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Image", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("Images")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Character");

                    b.Navigation("Event");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Cart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("CCSS_Repository.Entities.Order", "CartId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.TicketAccount", "TicketAccount")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Contract");

                    b.Navigation("Order");

                    b.Navigation("TicketAccount");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithOne("RefreshToken")
                        .HasForeignKey("CCSS_Repository.Entities.RefreshToken", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Tasks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("Tasks")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("Tasks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Contract");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithOne("Ticket")
                        .HasForeignKey("CCSS_Repository.Entities.Ticket", "EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Ticket", "Ticket")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Navigation("AccountCategories");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Contracts");

                    b.Navigation("RefreshToken")
                        .IsRequired();

                    b.Navigation("Tasks");

                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Navigation("AccountCategories");

                    b.Navigation("Characters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Navigation("ContractCharacters");

                    b.Navigation("EventCharacters");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Navigation("ContractCharacters");

                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("Payments");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Navigation("EventCharacters");

                    b.Navigation("Images");

                    b.Navigation("Tasks");

                    b.Navigation("Ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
