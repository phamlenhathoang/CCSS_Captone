// <auto-generated />
using System;
using CCSS_Repository.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CCSS_Repository.Migrations
{
    [DbContext(typeof(CCSSDbContext))]
    [Migration("20250315073612_Fix_DB")]
    partial class Fix_DB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AverageStar")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Leader")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnTask")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("SalaryIndex")
                        .HasColumnType("float");

                    b.Property<int?>("TaskQuantity")
                        .HasColumnType("int");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountId = "A001",
                            Email = "john@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "John Doe",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 75f
                        },
                        new
                        {
                            AccountId = "A002",
                            Email = "jane@example.com",
                            IsActive = true,
                            Name = "Jane Smith",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R001"
                        },
                        new
                        {
                            AccountId = "A003",
                            Email = "alice@example.com",
                            IsActive = true,
                            Name = "Alice Johnson",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A004",
                            Email = "bob@example.com",
                            Height = 175f,
                            IsActive = true,
                            Name = "Bob Brown",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 80f
                        },
                        new
                        {
                            AccountId = "A005",
                            Email = "charlie@example.com",
                            Height = 182f,
                            IsActive = true,
                            Name = "Charlie White",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 78f
                        },
                        new
                        {
                            AccountId = "A006",
                            Email = "david@example.com",
                            IsActive = true,
                            Name = "David Black",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A007",
                            Email = "emma@example.com",
                            Height = 168f,
                            IsActive = true,
                            Name = "Emma Green",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 60f
                        },
                        new
                        {
                            AccountId = "A008",
                            Email = "frank@example.com",
                            Height = 185f,
                            IsActive = true,
                            Name = "Frank Blue",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.5,
                            Weight = 85f
                        },
                        new
                        {
                            AccountId = "A009",
                            Email = "grace@example.com",
                            IsActive = true,
                            Name = "Grace Pink",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R001"
                        },
                        new
                        {
                            AccountId = "A010",
                            Email = "henry@example.com",
                            Height = 178f,
                            IsActive = true,
                            Name = "Henry Purple",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 77f
                        },
                        new
                        {
                            AccountId = "A011",
                            Email = "isla@example.com",
                            IsActive = true,
                            Name = "Isla Red",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A012",
                            Email = "jack@example.com",
                            Height = 172f,
                            IsActive = true,
                            Name = "Jack Yellow",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 70f
                        },
                        new
                        {
                            AccountId = "A013",
                            Email = "katie@example.com",
                            Height = 165f,
                            IsActive = true,
                            Name = "Katie Orange",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 55f
                        },
                        new
                        {
                            AccountId = "A014",
                            Email = "liam@example.com",
                            IsActive = true,
                            Name = "Liam Gray",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A015",
                            Email = "mia@example.com",
                            Height = 170f,
                            IsActive = true,
                            Name = "Mia Cyan",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 65f
                        },
                        new
                        {
                            AccountId = "A016",
                            Email = "noah@example.com",
                            Height = 175f,
                            IsActive = true,
                            Name = "Noah Silver",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 70f
                        },
                        new
                        {
                            AccountId = "A017",
                            Email = "olivia@example.com",
                            Height = 168f,
                            IsActive = true,
                            Name = "Olivia Gold",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 55f
                        },
                        new
                        {
                            AccountId = "A018",
                            Email = "william@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "William Amber",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 75f
                        },
                        new
                        {
                            AccountId = "A019",
                            Email = "sophia@example.com",
                            Height = 165f,
                            IsActive = true,
                            Name = "Sophia Ivory",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 50f
                        },
                        new
                        {
                            AccountId = "A020",
                            Email = "james@example.com",
                            Height = 178f,
                            IsActive = true,
                            Name = "James Navy",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.5,
                            Weight = 72f
                        },
                        new
                        {
                            AccountId = "A021",
                            Email = "ava@example.com",
                            Height = 162f,
                            IsActive = true,
                            Name = "Ava Teal",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 48f
                        },
                        new
                        {
                            AccountId = "A022",
                            Email = "benjamin@example.com",
                            Height = 177f,
                            IsActive = true,
                            Name = "Benjamin Lime",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 70f
                        },
                        new
                        {
                            AccountId = "A023",
                            Email = "charlotte@example.com",
                            Height = 164f,
                            IsActive = true,
                            Name = "Charlotte Beige",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 52f
                        },
                        new
                        {
                            AccountId = "A024",
                            Email = "lucas@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "Lucas Maroon",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 74f
                        },
                        new
                        {
                            AccountId = "A025",
                            Email = "mia@example.com",
                            Height = 159f,
                            IsActive = true,
                            Name = "Mia Pearl",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 47f
                        },
                        new
                        {
                            AccountId = "A026",
                            Email = "ethan@example.com",
                            Height = 176f,
                            IsActive = true,
                            Name = "Ethan Olive",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 71f
                        },
                        new
                        {
                            AccountId = "A027",
                            Email = "amelia@example.com",
                            Height = 167f,
                            IsActive = true,
                            Name = "Amelia Ruby",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 53f
                        },
                        new
                        {
                            AccountId = "A028",
                            Email = "henry@example.com",
                            Height = 182f,
                            IsActive = true,
                            Name = "Henry Saffron",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 76f
                        },
                        new
                        {
                            AccountId = "A029",
                            Email = "ella@example.com",
                            Height = 160f,
                            IsActive = true,
                            Name = "Ella Coral",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 49f
                        },
                        new
                        {
                            AccountId = "A030",
                            Email = "daniel@example.com",
                            Height = 175f,
                            IsActive = true,
                            Name = "Daniel Cyan",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 72f
                        },
                        new
                        {
                            AccountId = "A031",
                            Email = "logan@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "Logan Indigo",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 73f
                        },
                        new
                        {
                            AccountId = "A032",
                            Email = "lily@example.com",
                            Height = 165f,
                            IsActive = true,
                            Name = "Lily Violet",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 52f
                        },
                        new
                        {
                            AccountId = "A033",
                            Email = "mason@example.com",
                            Height = 178f,
                            IsActive = true,
                            Name = "Mason Turquoise",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 74f
                        },
                        new
                        {
                            AccountId = "A034",
                            Email = "zoe@example.com",
                            Height = 160f,
                            IsActive = true,
                            Name = "Zoe Lavender",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 48f
                        },
                        new
                        {
                            AccountId = "A035",
                            Email = "elijah@example.com",
                            Height = 182f,
                            IsActive = true,
                            Name = "Elijah Crimson",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.5,
                            Weight = 77f
                        },
                        new
                        {
                            AccountId = "A036",
                            Email = "aria@example.com",
                            Height = 164f,
                            IsActive = true,
                            Name = "Aria Mint",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 50f
                        },
                        new
                        {
                            AccountId = "A037",
                            Email = "sebastian@example.com",
                            Height = 179f,
                            IsActive = true,
                            Name = "Sebastian Bronze",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 72f
                        },
                        new
                        {
                            AccountId = "A038",
                            Email = "harper@example.com",
                            Height = 168f,
                            IsActive = true,
                            Name = "Harper Rose",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 53f
                        },
                        new
                        {
                            AccountId = "A039",
                            Email = "caleb@example.com",
                            Height = 181f,
                            IsActive = true,
                            Name = "Caleb Onyx",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 75f
                        },
                        new
                        {
                            AccountId = "A040",
                            Email = "scarlett@example.com",
                            Height = 162f,
                            IsActive = true,
                            Name = "Scarlett Magenta",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 51f
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.Property<string>("AccountCouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountCouponId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CouponId");

                    b.ToTable("AccountCoupon");

                    b.HasData(
                        new
                        {
                            AccountCouponId = "AC001",
                            AccountId = "A001",
                            CouponId = "CP001",
                            EndDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC002",
                            AccountId = "A002",
                            CouponId = "CP002",
                            EndDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC003",
                            AccountId = "A003",
                            CouponId = "CP003",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC004",
                            AccountId = "A004",
                            CouponId = "CP004",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC005",
                            AccountId = "A005",
                            CouponId = "CP005",
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC006",
                            AccountId = "A001",
                            CouponId = "CP006",
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC007",
                            AccountId = "A002",
                            CouponId = "CP007",
                            EndDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC008",
                            AccountId = "A003",
                            CouponId = "CP008",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC009",
                            AccountId = "A004",
                            CouponId = "CP009",
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC010",
                            AccountId = "A005",
                            CouponId = "CP010",
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC011",
                            AccountId = "A006",
                            CouponId = "CP011",
                            EndDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC012",
                            AccountId = "A007",
                            CouponId = "CP012",
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC013",
                            AccountId = "A008",
                            CouponId = "CP013",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC014",
                            AccountId = "A009",
                            CouponId = "CP014",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC015",
                            AccountId = "A010",
                            CouponId = "CP015",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountImage", b =>
                {
                    b.Property<string>("AccountImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountImageId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountImage");

                    b.HasData(
                        new
                        {
                            AccountImageId = "AI1",
                            AccountId = "A001",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8069),
                            UrlImage = "https://example.com/admin.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI2",
                            AccountId = "A002",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8072),
                            UrlImage = "https://example.com/manager.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI3",
                            AccountId = "A003",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8074),
                            UrlImage = "https://example.com/user1.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI4",
                            AccountId = "A004",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8077),
                            UrlImage = "https://example.com/user2.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI5",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8081),
                            UrlImage = "https://example.com/user3.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI6",
                            AccountId = "A006",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8083),
                            UrlImage = "https://example.com/user4.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI7",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8086),
                            UrlImage = "https://example.com/user5.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI8",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8088),
                            UrlImage = "https://example.com/user6.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI9",
                            AccountId = "A009",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8090),
                            UrlImage = "https://example.com/user7.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI10",
                            AccountId = "A010",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8092),
                            UrlImage = "https://example.com/user8.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI11",
                            AccountId = "A011",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8094),
                            UrlImage = "https://example.com/user9.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI12",
                            AccountId = "A012",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8096),
                            UrlImage = "https://example.com/user10.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI13",
                            AccountId = "A013",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8100),
                            UrlImage = "https://example.com/user11.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI14",
                            AccountId = "A014",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8102),
                            UrlImage = "https://example.com/user12.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI15",
                            AccountId = "A015",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8104),
                            UrlImage = "https://example.com/user13.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            ActivityId = "ACT001",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8136),
                            Description = "A relaxing yoga session",
                            Name = "Yoga Class",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8136)
                        },
                        new
                        {
                            ActivityId = "ACT002",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8139),
                            Description = "Learn to cook delicious meals",
                            Name = "Cooking Workshop",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8140)
                        },
                        new
                        {
                            ActivityId = "ACT003",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8142),
                            Description = "Live music performance",
                            Name = "Music Concert",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8143)
                        },
                        new
                        {
                            ActivityId = "ACT004",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8218),
                            Description = "Showcase of local artists",
                            Name = "Art Exhibition",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8218)
                        },
                        new
                        {
                            ActivityId = "ACT005",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8221),
                            Description = "Discussion on latest technology trends",
                            Name = "Tech Talk",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8221)
                        },
                        new
                        {
                            ActivityId = "ACT006",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8225),
                            Description = "5K run for a good cause",
                            Name = "Charity Run",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8226)
                        },
                        new
                        {
                            ActivityId = "ACT007",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8228),
                            Description = "Monthly book discussion",
                            Name = "Book Club",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8229)
                        },
                        new
                        {
                            ActivityId = "ACT008",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8231),
                            Description = "Learn photography skills",
                            Name = "Photography Workshop",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8232)
                        },
                        new
                        {
                            ActivityId = "ACT009",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8234),
                            Description = "Dance battle for all ages",
                            Name = "Dance Competition",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8235)
                        },
                        new
                        {
                            ActivityId = "ACT010",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8237),
                            Description = "Competitive chess matches",
                            Name = "Chess Tournament",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8237)
                        },
                        new
                        {
                            ActivityId = "ACT011",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8239),
                            Description = "Outdoor movie screening",
                            Name = "Movie Night",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8240)
                        },
                        new
                        {
                            ActivityId = "ACT012",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8242),
                            Description = "Showcase of scientific projects",
                            Name = "Science Fair",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8243)
                        },
                        new
                        {
                            ActivityId = "ACT013",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8245),
                            Description = "Intensive coding workshop",
                            Name = "Coding Bootcamp",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8245)
                        },
                        new
                        {
                            ActivityId = "ACT014",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8249),
                            Description = "Learn gardening techniques",
                            Name = "Gardening Workshop",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8250)
                        },
                        new
                        {
                            ActivityId = "ACT015",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8252),
                            Description = "Guided meditation practice",
                            Name = "Meditation Session",
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8253)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CartId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            CartId = "C001",
                            AccountId = "A003",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7314),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7315)
                        },
                        new
                        {
                            CartId = "C002",
                            AccountId = "A006",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7317),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7318)
                        },
                        new
                        {
                            CartId = "C003",
                            AccountId = "A011",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7320),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7320)
                        },
                        new
                        {
                            CartId = "C004",
                            AccountId = "A014",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7324),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7324)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.Property<string>("CartProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartProductId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProduct");

                    b.HasData(
                        new
                        {
                            CartProductId = "5853c856-cd5d-403c-a4af-3dffdb51506a",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8288),
                            Price = 30.0,
                            ProductId = "P001",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "a1306795-2f22-4c77-b30f-1bedef2f9d81",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8293),
                            Price = 20.0,
                            ProductId = "P002",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "64a4f064-b113-476e-946d-6c63beead20e",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8296),
                            Price = 80.0,
                            ProductId = "P003",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "2203f0d5-1c29-4cdd-b60d-ea84cb535d25",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8301),
                            Price = 100.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "2802dc2c-07e4-48c2-a48f-8adec22dddcd",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8304),
                            Price = 25.0,
                            ProductId = "P005",
                            Quantity = 3
                        },
                        new
                        {
                            CartProductId = "24d25a75-5ffa-45a6-8a24-e36ff451b189",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8307),
                            Price = 40.0,
                            ProductId = "P006",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "a5412f18-c5b3-4f2f-ac59-f9f053ed2d56",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8310),
                            Price = 15.0,
                            ProductId = "P007",
                            Quantity = 5
                        },
                        new
                        {
                            CartProductId = "0ab9532f-9283-4be2-8a89-2903c0443e4a",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8315),
                            Price = 50.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "34aa557e-2887-4529-a12b-2c9a91d886b2",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8318),
                            Price = 60.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "75efe489-6c12-4632-bf78-4f317d2b5c3d",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8321),
                            Price = 120.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "9d2f444c-7a13-4546-aa53-bd2227d6b426",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8324),
                            Price = 35.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "9ca9c88b-c218-42fe-b01b-829fa4a4e5f4",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8329),
                            Price = 45.0,
                            ProductId = "P012",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = "C3",
                            CategoryName = "Manga",
                            Description = "Manga characters"
                        },
                        new
                        {
                            CategoryId = "C4",
                            CategoryName = "Movie",
                            Description = "Movie characters"
                        },
                        new
                        {
                            CategoryId = "C5",
                            CategoryName = "Comic",
                            Description = "Comic book characters"
                        },
                        new
                        {
                            CategoryId = "C6",
                            CategoryName = "Mythology",
                            Description = "Mythological characters"
                        },
                        new
                        {
                            CategoryId = "C7",
                            CategoryName = "Fantasy",
                            Description = "Fantasy world characters"
                        },
                        new
                        {
                            CategoryId = "C8",
                            CategoryName = "Sci-Fi",
                            Description = "Science fiction characters"
                        },
                        new
                        {
                            CategoryId = "C9",
                            CategoryName = "Superhero",
                            Description = "Superhero characters"
                        },
                        new
                        {
                            CategoryId = "C10",
                            CategoryName = "Villains",
                            Description = "Famous villain characters"
                        },
                        new
                        {
                            CategoryId = "C11",
                            CategoryName = "Robot",
                            Description = "AI and robot characters"
                        },
                        new
                        {
                            CategoryId = "C12",
                            CategoryName = "Historical",
                            Description = "Historical figures in fiction"
                        },
                        new
                        {
                            CategoryId = "C13",
                            CategoryName = "Horror",
                            Description = "Horror and thriller characters"
                        },
                        new
                        {
                            CategoryId = "C14",
                            CategoryName = "Detective",
                            Description = "Famous detective characters"
                        },
                        new
                        {
                            CategoryId = "C15",
                            CategoryName = "Sports",
                            Description = "Characters from sports anime/manga"
                        },
                        new
                        {
                            CategoryId = "C16",
                            CategoryName = "Magic",
                            Description = "Characters using magic or spells"
                        },
                        new
                        {
                            CategoryId = "C17",
                            CategoryName = "Slice of Life",
                            Description = "Everyday life characters"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float?>("MaxHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MaxWeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinWeight")
                        .HasColumnType("real");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CharacterId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Character");

                    b.HasData(
                        new
                        {
                            CharacterId = "CH001",
                            CategoryId = "C3",
                            CharacterName = "Naruto",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6268),
                            Description = "Ninja from Konoha",
                            IsActive = true,
                            MaxHeight = 180f,
                            MaxWeight = 80f,
                            MinHeight = 160f,
                            MinWeight = 50f,
                            Price = 100.0,
                            Quantity = 5
                        },
                        new
                        {
                            CharacterId = "CH002",
                            CategoryId = "C3",
                            CharacterName = "Sasuke",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6278),
                            Description = "Naruto’s rival",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 120.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH003",
                            CategoryId = "C3",
                            CharacterName = "Goku",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6282),
                            Description = "Saiyan warrior",
                            IsActive = true,
                            MaxHeight = 190f,
                            MaxWeight = 90f,
                            MinHeight = 170f,
                            MinWeight = 60f,
                            Price = 150.0,
                            Quantity = 4
                        },
                        new
                        {
                            CharacterId = "CH004",
                            CategoryId = "C4",
                            CharacterName = "Luffy",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6356),
                            Description = "Pirate King",
                            IsActive = true,
                            MaxHeight = 175f,
                            MaxWeight = 70f,
                            MinHeight = 155f,
                            MinWeight = 45f,
                            Price = 110.0,
                            Quantity = 6
                        },
                        new
                        {
                            CharacterId = "CH005",
                            CategoryId = "C4",
                            CharacterName = "Ichigo",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6360),
                            Description = "Soul Reaper",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 130.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH006",
                            CategoryId = "C14",
                            CharacterName = "Mario",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6363),
                            Description = "Plumber hero",
                            IsActive = true,
                            MaxHeight = 160f,
                            MaxWeight = 70f,
                            MinHeight = 140f,
                            MinWeight = 50f,
                            Price = 80.0,
                            Quantity = 5
                        },
                        new
                        {
                            CharacterId = "CH007",
                            CategoryId = "C14",
                            CharacterName = "Luigi",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6367),
                            Description = "Mario’s brother",
                            IsActive = true,
                            MaxHeight = 170f,
                            MaxWeight = 75f,
                            MinHeight = 150f,
                            MinWeight = 55f,
                            Price = 85.0,
                            Quantity = 4
                        },
                        new
                        {
                            CharacterId = "CH008",
                            CategoryId = "C14",
                            CharacterName = "Link",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6371),
                            Description = "Hero of Hyrule",
                            IsActive = true,
                            MaxHeight = 180f,
                            MaxWeight = 80f,
                            MinHeight = 160f,
                            MinWeight = 50f,
                            Price = 140.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH009",
                            CategoryId = "C16",
                            CharacterName = "Zelda",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6374),
                            Description = "Hyrule princess",
                            IsActive = true,
                            MaxHeight = 175f,
                            MaxWeight = 70f,
                            MinHeight = 155f,
                            MinWeight = 50f,
                            Price = 135.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH010",
                            CategoryId = "C16",
                            CharacterName = "Samus",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6379),
                            Description = "Bounty hunter",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 145.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH011",
                            CategoryId = "C13",
                            CharacterName = "Cloud",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6383),
                            Description = "Ex-SOLDIER",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 125.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH012",
                            CategoryId = "C13",
                            CharacterName = "Sephiroth",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6386),
                            Description = "One-Winged Angel",
                            IsActive = true,
                            MaxHeight = 190f,
                            MaxWeight = 90f,
                            MinHeight = 170f,
                            MinWeight = 60f,
                            Price = 155.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH013",
                            CategoryId = "C8",
                            CharacterName = "Kratos",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6390),
                            Description = "God of War",
                            IsActive = true,
                            MaxHeight = 195f,
                            MaxWeight = 100f,
                            MinHeight = 175f,
                            MinWeight = 70f,
                            Price = 160.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH014",
                            CategoryId = "C8",
                            CharacterName = "Pikachu",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6393),
                            Description = "Electric Pokemon",
                            IsActive = true,
                            MaxHeight = 50f,
                            MaxWeight = 20f,
                            MinHeight = 30f,
                            MinWeight = 10f,
                            Price = 90.0,
                            Quantity = 10
                        },
                        new
                        {
                            CharacterId = "CH015",
                            CategoryId = "C8",
                            CharacterName = "Kirby",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6397),
                            Description = "Pink puffball",
                            IsActive = true,
                            MaxHeight = 60f,
                            MaxWeight = 25f,
                            MinHeight = 40f,
                            MinWeight = 15f,
                            Price = 95.0,
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CharacterImage", b =>
                {
                    b.Property<string>("CharacterImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterImageId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterImage");

                    b.HasData(
                        new
                        {
                            CharacterImageId = "CI001",
                            CharacterId = "CH001",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8358),
                            UrlImage = "https://example.com/img1.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI002",
                            CharacterId = "CH002",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8361),
                            UrlImage = "https://example.com/img2.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI003",
                            CharacterId = "CH003",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8363),
                            UrlImage = "https://example.com/img3.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI004",
                            CharacterId = "CH004",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8365),
                            UrlImage = "https://example.com/img4.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI005",
                            CharacterId = "CH005",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8367),
                            UrlImage = "https://example.com/img5.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI006",
                            CharacterId = "CH006",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8412),
                            UrlImage = "https://example.com/img6.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI007",
                            CharacterId = "CH007",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8416),
                            UrlImage = "https://example.com/img7.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI008",
                            CharacterId = "CH008",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8418),
                            UrlImage = "https://example.com/img8.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI009",
                            CharacterId = "CH009",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8419),
                            UrlImage = "https://example.com/img9.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI010",
                            CharacterId = "CH010",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8421),
                            UrlImage = "https://example.com/img10.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI011",
                            CharacterId = "CH011",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8423),
                            UrlImage = "https://example.com/img11.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI012",
                            CharacterId = "CH012",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8425),
                            UrlImage = "https://example.com/img12.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI013",
                            CharacterId = "CH013",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8427),
                            UrlImage = "https://example.com/img13.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI014",
                            CharacterId = "CH014",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8429),
                            UrlImage = "https://example.com/img14.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI015",
                            CharacterId = "CH015",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8432),
                            UrlImage = "https://example.com/img15.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountCouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Deposit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("ContractId");

                    b.HasIndex("AccountCouponId")
                        .IsUnique()
                        .HasFilter("[AccountCouponId] IS NOT NULL");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Contract");

                    b.HasData(
                        new
                        {
                            ContractId = "CT002",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "100",
                            RequestId = "R002",
                            TotalPrice = 500.0
                        },
                        new
                        {
                            ContractId = "CT005",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "150",
                            RequestId = "R005",
                            TotalPrice = 700.0
                        },
                        new
                        {
                            ContractId = "CT008",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "70",
                            RequestId = "R008",
                            TotalPrice = 350.0
                        },
                        new
                        {
                            ContractId = "CT010",
                            ContractStatus = 3,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "50",
                            RequestId = "R010",
                            TotalPrice = 200.0
                        },
                        new
                        {
                            ContractId = "CT014",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "120",
                            RequestId = "R014",
                            TotalPrice = 600.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractCharacter");

                    b.HasData(
                        new
                        {
                            ContractCharacterId = "CC0021",
                            CharacterId = "CH001",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT002",
                            TotalPrice = 150.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0022",
                            CharacterId = "CH002",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT002",
                            TotalPrice = 180.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0023",
                            CharacterId = "CH003",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT002",
                            TotalPrice = 170.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0051",
                            CharacterId = "CH004",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT005",
                            TotalPrice = 200.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0052",
                            CharacterId = "CH005",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT005",
                            TotalPrice = 250.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0053",
                            CharacterId = "CH006",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT005",
                            TotalPrice = 250.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0081",
                            CharacterId = "CH007",
                            ContractId = "CT008",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT008",
                            TotalPrice = 120.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0082",
                            CharacterId = "CH008",
                            ContractId = "CT008",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT008",
                            TotalPrice = 130.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0083",
                            CharacterId = "CH009",
                            ContractId = "CT008",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT008",
                            TotalPrice = 100.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0101",
                            CharacterId = "CH010",
                            ContractId = "CT010",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT010",
                            TotalPrice = 70.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0102",
                            CharacterId = "CH011",
                            ContractId = "CT010",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT010",
                            TotalPrice = 80.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0103",
                            CharacterId = "CH012",
                            ContractId = "CT010",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT010",
                            TotalPrice = 50.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0141",
                            CharacterId = "CH013",
                            ContractId = "CT014",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT014",
                            TotalPrice = 200.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0142",
                            CharacterId = "CH014",
                            ContractId = "CT014",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT014",
                            TotalPrice = 250.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0143",
                            CharacterId = "CH015",
                            ContractId = "CT014",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT014",
                            TotalPrice = 150.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Coupon", b =>
                {
                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CouponId");

                    b.ToTable("Coupon");

                    b.HasData(
                        new
                        {
                            CouponId = "CP001",
                            Amount = 50.0,
                            Condition = "Min order 500",
                            EndDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP002",
                            Amount = 150.0,
                            Condition = "Min order 1000",
                            EndDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 15f,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP003",
                            Amount = 400.0,
                            Condition = "Min contract 2000",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP004",
                            Amount = 180.0,
                            Condition = "Min order 1500",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 12f,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP005",
                            Amount = 750.0,
                            Condition = "Min contract 3000",
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 25f,
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP006",
                            Amount = 100.0,
                            Condition = "New customers only",
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP007",
                            Amount = 200.0,
                            Condition = "Holiday Special",
                            EndDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP008",
                            Amount = 600.0,
                            Condition = "VIP customers",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 30f,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP009",
                            Amount = 120.0,
                            Condition = "Summer Sale",
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 15f,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP010",
                            Amount = 1000.0,
                            Condition = "Black Friday",
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 50f,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP011",
                            Amount = 75.0,
                            Condition = "Back to School",
                            EndDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP012",
                            Amount = 1750.0,
                            Condition = "Min contract 5000",
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 35f,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP013",
                            Amount = 250.0,
                            Condition = "Loyal Customers",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP014",
                            Amount = 800.0,
                            Condition = "Cyber Monday",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 40f,
                            StartDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP015",
                            Amount = 50.0,
                            Condition = "Referral Bonus",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventId = "E001",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6596),
                            Description = "A grand celebration to welcome the new year",
                            EndDate = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "New Year Festival",
                            IsActive = true,
                            Location = "Times Square, New York",
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E002",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6601),
                            Description = "Experience the beauty of cherry blossoms",
                            EndDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Spring Blossom Fest",
                            IsActive = true,
                            Location = "Kyoto, Japan",
                            StartDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E003",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6604),
                            Description = "Showcasing the latest in technology and AI",
                            EndDate = new DateTime(2025, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Tech Innovation Summit",
                            IsActive = true,
                            Location = "Silicon Valley",
                            StartDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E004",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6609),
                            Description = "Live performances from top artists",
                            EndDate = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Music Fest",
                            IsActive = true,
                            Location = "Coachella, California",
                            StartDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E005",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6611),
                            Description = "A must-attend event for comic book fans",
                            EndDate = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Comic-Con International",
                            IsActive = true,
                            Location = "San Diego Convention Center",
                            StartDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E006",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6614),
                            Description = "Largest anime convention in the world",
                            EndDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Anime Expo",
                            IsActive = true,
                            Location = "Los Angeles Convention Center",
                            StartDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E007",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6617),
                            Description = "Latest trends and releases in gaming",
                            EndDate = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Gaming Expo",
                            IsActive = true,
                            Location = "Las Vegas Convention Center",
                            StartDate = new DateTime(2025, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E008",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6620),
                            Description = "A fun-filled summer celebration",
                            EndDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Summer Festival",
                            IsActive = true,
                            Location = "Miami Beach, Florida",
                            StartDate = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E009",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6623),
                            Description = "A paradise for cosplayers",
                            EndDate = new DateTime(2025, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Cosplay Festival",
                            IsActive = true,
                            Location = "Tokyo Big Sight",
                            StartDate = new DateTime(2025, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E010",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6626),
                            Description = "Showcasing the best movies of the year",
                            EndDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Film Festival",
                            IsActive = true,
                            Location = "Cannes, France",
                            StartDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E011",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6629),
                            Description = "Spooky celebrations and costume parties",
                            EndDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Halloween Night",
                            IsActive = true,
                            Location = "Salem, Massachusetts",
                            StartDate = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E012",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6633),
                            Description = "Festive shopping and holiday cheer",
                            EndDate = new DateTime(2025, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Christmas Market",
                            IsActive = true,
                            Location = "Nuremberg, Germany",
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventActivity", b =>
                {
                    b.Property<string>("EventActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EventId");

                    b.ToTable("EventActivity");

                    b.HasData(
                        new
                        {
                            EventActivityId = "EA001",
                            ActivityId = "ACT001",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7871),
                            Description = "Yoga for a fresh start",
                            EventId = "E001"
                        },
                        new
                        {
                            EventActivityId = "EA002",
                            ActivityId = "ACT005",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7874),
                            Description = "Tech trends in the new year",
                            EventId = "E001"
                        },
                        new
                        {
                            EventActivityId = "EA003",
                            ActivityId = "ACT004",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7878),
                            Description = "Painting cherry blossoms",
                            EventId = "E002"
                        },
                        new
                        {
                            EventActivityId = "EA004",
                            ActivityId = "ACT013",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7880),
                            Description = "AI and future coding",
                            EventId = "E003"
                        },
                        new
                        {
                            EventActivityId = "EA005",
                            ActivityId = "ACT009",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7882),
                            Description = "Dance battles live",
                            EventId = "E004"
                        },
                        new
                        {
                            EventActivityId = "EA006",
                            ActivityId = "ACT003",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7884),
                            Description = "Comic-Con live music",
                            EventId = "E005"
                        },
                        new
                        {
                            EventActivityId = "EA007",
                            ActivityId = "ACT007",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7886),
                            Description = "Anime and book discussions",
                            EventId = "E006"
                        },
                        new
                        {
                            EventActivityId = "EA008",
                            ActivityId = "ACT010",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7888),
                            Description = "Chess and gaming",
                            EventId = "E007"
                        },
                        new
                        {
                            EventActivityId = "EA009",
                            ActivityId = "ACT011",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7890),
                            Description = "Outdoor movie fun",
                            EventId = "E008"
                        },
                        new
                        {
                            EventActivityId = "EA010",
                            ActivityId = "ACT015",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7892),
                            Description = "Meditation for cosplayers",
                            EventId = "E009"
                        },
                        new
                        {
                            EventActivityId = "EA011",
                            ActivityId = "ACT012",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7896),
                            Description = "Science in filmmaking",
                            EventId = "E010"
                        },
                        new
                        {
                            EventActivityId = "EA012",
                            ActivityId = "ACT006",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7898),
                            Description = "Halloween charity run",
                            EventId = "E011"
                        },
                        new
                        {
                            EventActivityId = "EA013",
                            ActivityId = "ACT014",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7900),
                            Description = "Christmas gardening",
                            EventId = "E012"
                        },
                        new
                        {
                            EventActivityId = "EA014",
                            ActivityId = "ACT002",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7902),
                            Description = "Cooking for music lovers",
                            EventId = "E004"
                        },
                        new
                        {
                            EventActivityId = "EA015",
                            ActivityId = "ACT008",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7904),
                            Description = "Photography in tech",
                            EventId = "E003"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.Property<string>("EventCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsAssign")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCharacter");

                    b.HasData(
                        new
                        {
                            EventCharacterId = "EC001",
                            CharacterId = "CH001",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7812),
                            EventId = "E001",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC002",
                            CharacterId = "CH002",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7816),
                            EventId = "E002",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC003",
                            CharacterId = "CH003",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7818),
                            EventId = "E003",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC004",
                            CharacterId = "CH004",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7820),
                            EventId = "E004",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC005",
                            CharacterId = "CH005",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7822),
                            EventId = "E005",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC006",
                            CharacterId = "CH006",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7825),
                            EventId = "E006",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC007",
                            CharacterId = "CH007",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7829),
                            EventId = "E007",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC008",
                            CharacterId = "CH008",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7831),
                            EventId = "E008",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC009",
                            CharacterId = "CH009",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7833),
                            EventId = "E009",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC010",
                            CharacterId = "CH010",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7836),
                            EventId = "E010",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC011",
                            CharacterId = "CH011",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7838),
                            EventId = "E011",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC012",
                            CharacterId = "CH012",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7841),
                            EventId = "E012",
                            IsAssign = true
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageId");

                    b.HasIndex("EventId");

                    b.ToTable("EventImage");

                    b.HasData(
                        new
                        {
                            ImageId = "EI001",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8468),
                            EventId = "E001",
                            ImageUrl = "https://example.com/event1.jpg"
                        },
                        new
                        {
                            ImageId = "EI002",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8471),
                            EventId = "E002",
                            ImageUrl = "https://example.com/event2.jpg"
                        },
                        new
                        {
                            ImageId = "EI003",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8472),
                            EventId = "E003",
                            ImageUrl = "https://example.com/event3.jpg"
                        },
                        new
                        {
                            ImageId = "EI004",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8474),
                            EventId = "E004",
                            ImageUrl = "https://example.com/event4.jpg"
                        },
                        new
                        {
                            ImageId = "EI005",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8476),
                            EventId = "E005",
                            ImageUrl = "https://example.com/event5.jpg"
                        },
                        new
                        {
                            ImageId = "EI006",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8478),
                            EventId = "E006",
                            ImageUrl = "https://example.com/event6.jpg"
                        },
                        new
                        {
                            ImageId = "EI007",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8479),
                            EventId = "E007",
                            ImageUrl = "https://example.com/event7.jpg"
                        },
                        new
                        {
                            ImageId = "EI008",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8483),
                            EventId = "E008",
                            ImageUrl = "https://example.com/event8.jpg"
                        },
                        new
                        {
                            ImageId = "EI009",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8484),
                            EventId = "E009",
                            ImageUrl = "https://example.com/event9.jpg"
                        },
                        new
                        {
                            ImageId = "EI010",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8486),
                            EventId = "E010",
                            ImageUrl = "https://example.com/event10.jpg"
                        },
                        new
                        {
                            ImageId = "EI011",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8488),
                            EventId = "E011",
                            ImageUrl = "https://example.com/event11.jpg"
                        },
                        new
                        {
                            ImageId = "EI012",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8490),
                            EventId = "E012",
                            ImageUrl = "https://example.com/event12.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractId");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            FeedbackId = "8919bc8f-4a12-4603-82f2-7d1f86f85596",
                            AccountId = "A001",
                            ContractId = "CT002",
                            CreateBy = "A001",
                            CreateDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Great experience!"
                        },
                        new
                        {
                            FeedbackId = "a5d4fadd-b9bf-4fd8-9981-6afa934fddfd",
                            AccountId = "A004",
                            ContractId = "CT005",
                            CreateBy = "A004",
                            CreateDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Loved the event!"
                        },
                        new
                        {
                            FeedbackId = "3748bf04-1c7a-4b98-acc0-8cd4a3cac66f",
                            AccountId = "A005",
                            ContractId = "CT008",
                            CreateBy = "A005",
                            CreateDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice cosplay session!"
                        },
                        new
                        {
                            FeedbackId = "de6e2db6-4466-4f63-ad81-853294895afe",
                            AccountId = "A007",
                            ContractId = "CT010",
                            CreateBy = "A007",
                            CreateDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enjoyed the event!"
                        },
                        new
                        {
                            FeedbackId = "d1863a45-6f3f-4f35-bcaf-debd207a83b0",
                            AccountId = "A008",
                            ContractId = "CT014",
                            CreateBy = "A008",
                            CreateDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Would love to join again!"
                        },
                        new
                        {
                            FeedbackId = "8322f51d-e8e9-4081-bc54-ab52234d5044",
                            AccountId = "A010",
                            ContractId = "CT002",
                            CreateBy = "A010",
                            CreateDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The atmosphere was amazing!"
                        },
                        new
                        {
                            FeedbackId = "516d814d-da82-45b8-b7bd-7d384b0cc82c",
                            AccountId = "A012",
                            ContractId = "CT005",
                            CreateBy = "A012",
                            CreateDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Best cosplay event!"
                        },
                        new
                        {
                            FeedbackId = "67cbeaf2-6701-491e-978c-d516a92c77a7",
                            AccountId = "A013",
                            ContractId = "CT008",
                            CreateBy = "A013",
                            CreateDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice crowd and management!"
                        },
                        new
                        {
                            FeedbackId = "4663f09e-94fd-44aa-b76b-19fb95b553b9",
                            AccountId = "A015",
                            ContractId = "CT010",
                            CreateBy = "A015",
                            CreateDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amazing experience!"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            Id = "N001",
                            AccountId = "A001",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7163),
                            IsRead = false,
                            Message = "Welcome to the system!"
                        },
                        new
                        {
                            Id = "N002",
                            AccountId = "A002",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7166),
                            IsRead = false,
                            Message = "Your account has been upgraded."
                        },
                        new
                        {
                            Id = "N003",
                            AccountId = "A003",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7170),
                            IsRead = true,
                            Message = "New promotional offer available!"
                        },
                        new
                        {
                            Id = "N004",
                            AccountId = "A004",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7172),
                            IsRead = false,
                            Message = "Your request has been approved."
                        },
                        new
                        {
                            Id = "N005",
                            AccountId = "A005",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7174),
                            IsRead = true,
                            Message = "System maintenance scheduled."
                        },
                        new
                        {
                            Id = "N006",
                            AccountId = "A006",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7176),
                            IsRead = false,
                            Message = "Your order has been shipped!"
                        },
                        new
                        {
                            Id = "N007",
                            AccountId = "A007",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7179),
                            IsRead = false,
                            Message = "New event registration open."
                        },
                        new
                        {
                            Id = "N008",
                            AccountId = "A008",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7181),
                            IsRead = true,
                            Message = "Reminder: Payment due soon."
                        },
                        new
                        {
                            Id = "N009",
                            AccountId = "A009",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7183),
                            IsRead = false,
                            Message = "Your password was changed."
                        },
                        new
                        {
                            Id = "N010",
                            AccountId = "A010",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7185),
                            IsRead = false,
                            Message = "Admin announcement update."
                        },
                        new
                        {
                            Id = "N011",
                            AccountId = "A011",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7189),
                            IsRead = true,
                            Message = "New message from support."
                        },
                        new
                        {
                            Id = "N012",
                            AccountId = "A012",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7267),
                            IsRead = false,
                            Message = "Upcoming event invitation."
                        },
                        new
                        {
                            Id = "N013",
                            AccountId = "A013",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7270),
                            IsRead = false,
                            Message = "New cosplayer contest."
                        },
                        new
                        {
                            Id = "N014",
                            AccountId = "A014",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7272),
                            IsRead = true,
                            Message = "Loyalty points updated."
                        },
                        new
                        {
                            Id = "N015",
                            AccountId = "A015",
                            CreatedAt = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(7274),
                            IsRead = false,
                            Message = "Your subscription expired."
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderId = "O001",
                            AccountId = "A003",
                            OrderDate = "2024-03-01",
                            OrderStatus = 0,
                            TotalPrice = 250.0
                        },
                        new
                        {
                            OrderId = "O002",
                            AccountId = "A006",
                            OrderDate = "2024-03-05",
                            OrderStatus = 0,
                            TotalPrice = 150.5
                        },
                        new
                        {
                            OrderId = "O003",
                            AccountId = "A011",
                            OrderDate = "2024-03-10",
                            OrderStatus = 1,
                            TotalPrice = 300.0
                        },
                        new
                        {
                            OrderId = "O004",
                            AccountId = "A014",
                            OrderDate = "2024-03-12",
                            OrderStatus = 0,
                            TotalPrice = 400.0
                        },
                        new
                        {
                            OrderId = "O005",
                            AccountId = "A003",
                            OrderDate = "2024-03-15",
                            OrderStatus = 1,
                            TotalPrice = 175.0
                        },
                        new
                        {
                            OrderId = "O006",
                            AccountId = "A006",
                            OrderDate = "2024-03-18",
                            OrderStatus = 0,
                            TotalPrice = 225.0
                        },
                        new
                        {
                            OrderId = "O007",
                            AccountId = "A011",
                            OrderDate = "2024-03-20",
                            OrderStatus = 0,
                            TotalPrice = 350.0
                        },
                        new
                        {
                            OrderId = "O008",
                            AccountId = "A014",
                            OrderDate = "2024-03-22",
                            OrderStatus = 1,
                            TotalPrice = 275.0
                        },
                        new
                        {
                            OrderId = "O009",
                            AccountId = "A003",
                            OrderDate = "2024-03-25",
                            OrderStatus = 0,
                            TotalPrice = 500.0
                        },
                        new
                        {
                            OrderId = "O010",
                            AccountId = "A006",
                            OrderDate = "2024-03-28",
                            OrderStatus = 1,
                            TotalPrice = 125.0
                        },
                        new
                        {
                            OrderId = "O011",
                            AccountId = "A011",
                            OrderDate = "2024-03-30",
                            OrderStatus = 0,
                            TotalPrice = 325.0
                        },
                        new
                        {
                            OrderId = "O012",
                            AccountId = "A014",
                            OrderDate = "2024-04-02",
                            OrderStatus = 0,
                            TotalPrice = 410.0
                        },
                        new
                        {
                            OrderId = "O013",
                            AccountId = "A003",
                            OrderDate = "2024-04-05",
                            OrderStatus = 1,
                            TotalPrice = 280.0
                        },
                        new
                        {
                            OrderId = "O014",
                            AccountId = "A006",
                            OrderDate = "2024-04-07",
                            OrderStatus = 0,
                            TotalPrice = 350.0
                        },
                        new
                        {
                            OrderId = "O015",
                            AccountId = "A011",
                            OrderDate = "2024-04-10",
                            OrderStatus = 0,
                            TotalPrice = 200.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.OrderProduct", b =>
                {
                    b.Property<string>("OrderProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");

                    b.HasData(
                        new
                        {
                            OrderProductId = "9b5bf7aa-5a10-44e2-bb76-212f2ac2418a",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8520),
                            OrderId = "O001",
                            Price = 30.0,
                            ProductId = "P001",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "028dd8b3-b3f5-4061-b676-8ad2f7048041",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8525),
                            OrderId = "O001",
                            Price = 20.0,
                            ProductId = "P002",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "781da35f-f321-498c-a394-f66d2b8b4ea7",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8527),
                            OrderId = "O002",
                            Price = 80.0,
                            ProductId = "P003",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "b903d556-7ed1-4c7b-af6b-20f3adf781bc",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8530),
                            OrderId = "O002",
                            Price = 100.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "dc6cdf8f-0642-4f61-ac25-42f6a88699a4",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8533),
                            OrderId = "O003",
                            Price = 25.0,
                            ProductId = "P005",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "74303f2b-f13e-4af4-a147-dece7285070f",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8538),
                            OrderId = "O003",
                            Price = 40.0,
                            ProductId = "P006",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "b701280f-66e0-495b-b8e7-adb78cf04f27",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8540),
                            OrderId = "O004",
                            Price = 15.0,
                            ProductId = "P007",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "efcad488-2c86-477f-a13e-b669f2b41a42",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8543),
                            OrderId = "O004",
                            Price = 50.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "77fb3af1-8a8b-4fe2-b0fa-202a640bdea3",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8546),
                            OrderId = "O005",
                            Price = 60.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "584c0c29-53a7-4f0c-a2ca-2ffef3dbcef6",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8551),
                            OrderId = "O005",
                            Price = 120.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "b9cec59b-d136-4cbb-96b8-91e0c7cea663",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8644),
                            OrderId = "O006",
                            Price = 35.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "ca5cedc6-1022-4769-a84f-a9f3d35d54a5",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8647),
                            OrderId = "O006",
                            Price = 45.0,
                            ProductId = "P012",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "f981036a-17cd-41d3-a959-5e77b97febfd",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8650),
                            OrderId = "O007",
                            Price = 18.0,
                            ProductId = "P013",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "e12ca588-0a7b-45ef-94f6-04f8403330bb",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8655),
                            OrderId = "O007",
                            Price = 90.0,
                            ProductId = "P014",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "fcb4b75e-b3bc-4c5d-8bd4-891c4beae9c6",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8658),
                            OrderId = "O008",
                            Price = 22.0,
                            ProductId = "P015",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "c49c241b-557d-4bb4-b645-91622589bde0",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8661),
                            OrderId = "O008",
                            Price = 30.0,
                            ProductId = "P001",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "9a71567d-b1da-449f-bd28-44950e853b6a",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8663),
                            OrderId = "O009",
                            Price = 20.0,
                            ProductId = "P002",
                            Quantity = 6
                        },
                        new
                        {
                            OrderProductId = "1d8406dd-8cba-4e20-ac13-a935aa60dbc5",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8668),
                            OrderId = "O009",
                            Price = 80.0,
                            ProductId = "P003",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "83dd52d6-1725-46d5-b4f6-41b74fa19d03",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8671),
                            OrderId = "O010",
                            Price = 100.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "bf2b377a-17e4-43a6-8a13-c1fbf516c059",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8674),
                            OrderId = "O010",
                            Price = 25.0,
                            ProductId = "P005",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "f06d2a97-ce86-4895-98eb-36f122500147",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8677),
                            OrderId = "O011",
                            Price = 40.0,
                            ProductId = "P006",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "ca6581ed-ca34-4ea5-9467-07b9f83c6bf6",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8681),
                            OrderId = "O011",
                            Price = 15.0,
                            ProductId = "P007",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "d229df3b-3120-4aa1-83c0-b5cf7fac5153",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8685),
                            OrderId = "O012",
                            Price = 50.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "97bc0678-0593-4d4a-a97d-a3012dc8bf23",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8688),
                            OrderId = "O012",
                            Price = 60.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "cdb40105-d518-43fc-aa56-70c530870b47",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8690),
                            OrderId = "O013",
                            Price = 120.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "99a24630-43c1-468e-9e01-84ff6e06cd7c",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8695),
                            OrderId = "O013",
                            Price = 35.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "8f1aa952-f301-430c-80e5-5da8c437a6a1",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8698),
                            OrderId = "O014",
                            Price = 45.0,
                            ProductId = "P012",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "56b0b033-4dc4-4d7f-ae81-da9cf269c308",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8701),
                            OrderId = "O014",
                            Price = 18.0,
                            ProductId = "P013",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "d27bb64c-9e76-4b2e-814f-ee078409af27",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8704),
                            OrderId = "O015",
                            Price = 90.0,
                            ProductId = "P014",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "6ddc8bac-c86b-4d46-a292-9a646bc7c86d",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8708),
                            OrderId = "O015",
                            Price = 22.0,
                            ProductId = "P015",
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PackageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Package");

                    b.HasData(
                        new
                        {
                            PackageId = "PKG001",
                            Description = "Rent a single character for an event",
                            PackageName = "Basic Character Rental",
                            Price = 100.0,
                            ServiceId = "S001"
                        },
                        new
                        {
                            PackageId = "PKG002",
                            Description = "Rent multiple characters with costumes",
                            PackageName = "Deluxe Character Rental",
                            Price = 250.0,
                            ServiceId = "S001"
                        },
                        new
                        {
                            PackageId = "PKG003",
                            Description = "Full-day character rental service",
                            PackageName = "Ultimate Character Rental",
                            Price = 500.0,
                            ServiceId = "S001"
                        },
                        new
                        {
                            PackageId = "PKG004",
                            Description = "Basic cosplay performance at an event",
                            PackageName = "Standard Cosplay Performance",
                            Price = 150.0,
                            ServiceId = "S002"
                        },
                        new
                        {
                            PackageId = "PKG005",
                            Description = "Advanced performance with choreography",
                            PackageName = "Premium Cosplay Performance",
                            Price = 300.0,
                            ServiceId = "S002"
                        },
                        new
                        {
                            PackageId = "PKG006",
                            Description = "Exclusive show with audience interaction",
                            PackageName = "VIP Cosplay Performance",
                            Price = 500.0,
                            ServiceId = "S002"
                        },
                        new
                        {
                            PackageId = "PKG007",
                            Description = "30-minute photoshoot with cosplayers",
                            PackageName = "Mini Photography Session",
                            Price = 80.0,
                            ServiceId = "S003"
                        },
                        new
                        {
                            PackageId = "PKG008",
                            Description = "1-hour professional photoshoot",
                            PackageName = "Standard Photography Session",
                            Price = 150.0,
                            ServiceId = "S003"
                        },
                        new
                        {
                            PackageId = "PKG009",
                            Description = "Complete photoshoot with editing",
                            PackageName = "Full Photography Package",
                            Price = 300.0,
                            ServiceId = "S003"
                        },
                        new
                        {
                            PackageId = "PKG010",
                            Description = "Includes exclusive cosplay merchandise",
                            PackageName = "Basic Merchandise Pack",
                            Price = 50.0,
                            ServiceId = "S004"
                        },
                        new
                        {
                            PackageId = "PKG011",
                            Description = "Premium cosplay collectibles",
                            PackageName = "Deluxe Merchandise Pack",
                            Price = 150.0,
                            ServiceId = "S004"
                        },
                        new
                        {
                            PackageId = "PKG012",
                            Description = "Limited edition cosplay items",
                            PackageName = "Ultimate Merchandise Pack",
                            Price = 300.0,
                            ServiceId = "S004"
                        },
                        new
                        {
                            PackageId = "PKG013",
                            Description = "Beginner-friendly cosplay training",
                            PackageName = "Cosplay Basics Workshop",
                            Price = 100.0,
                            ServiceId = "S005"
                        },
                        new
                        {
                            PackageId = "PKG014",
                            Description = "In-depth cosplay and makeup course",
                            PackageName = "Advanced Cosplay Training",
                            Price = 250.0,
                            ServiceId = "S005"
                        },
                        new
                        {
                            PackageId = "PKG015",
                            Description = "Professional-level training for cosplayers",
                            PackageName = "Master Cosplay Workshop",
                            Price = 500.0,
                            ServiceId = "S005"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountCouponID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("AccountCouponID")
                        .IsUnique()
                        .HasFilter("[AccountCouponID] IS NOT NULL");

                    b.HasIndex("ContractId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("TicketAccountId")
                        .IsUnique()
                        .HasFilter("[TicketAccountId] IS NOT NULL");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            PaymentId = "P001",
                            AccountCouponID = "AC001",
                            Amount = 250.0,
                            CreatAt = new DateTime(2024, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA001",
                            TransactionId = "TXN001",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P002",
                            Amount = 150.5,
                            CreatAt = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 0,
                            TicketAccountId = "TA002",
                            TransactionId = "TXN002",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P003",
                            Amount = 90.0,
                            CreatAt = new DateTime(2024, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA003",
                            TransactionId = "TXN003",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P004",
                            AccountCouponID = "AC012",
                            Amount = 400.0,
                            CreatAt = new DateTime(2024, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA004",
                            TransactionId = "TXN004",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P005",
                            Amount = 175.0,
                            CreatAt = new DateTime(2024, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 2,
                            TicketAccountId = "TA005",
                            TransactionId = "TXN005",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P006",
                            AccountCouponID = "AC003",
                            Amount = 225.0,
                            CreatAt = new DateTime(2024, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O006",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN006",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P007",
                            Amount = 350.0,
                            CreatAt = new DateTime(2024, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O007",
                            Purpose = 3,
                            Status = 0,
                            TransactionId = "TXN007",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P008",
                            Amount = 150.0,
                            CreatAt = new DateTime(2024, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O008",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN008",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P009",
                            Amount = 500.0,
                            CreatAt = new DateTime(2024, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O009",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN009",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P010",
                            AccountCouponID = "AC004",
                            Amount = 125.0,
                            CreatAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O010",
                            Purpose = 3,
                            Status = 2,
                            TransactionId = "TXN010",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P011",
                            Amount = 325.0,
                            ContractId = "CT002",
                            CreatAt = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 1,
                            Status = 1,
                            TransactionId = "TXN011",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P012",
                            Amount = 410.0,
                            ContractId = "CT005",
                            CreatAt = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 1,
                            Status = 0,
                            TransactionId = "TXN012",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P013",
                            Amount = 90.0,
                            ContractId = "CT008",
                            CreatAt = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 1,
                            TransactionId = "TXN013",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P014",
                            Amount = 350.0,
                            ContractId = "CT010",
                            CreatAt = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 2,
                            TransactionId = "TXN014",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P015",
                            Amount = 200.0,
                            ContractId = "CT002",
                            CreatAt = new DateTime(2024, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 1,
                            TransactionId = "TXN015",
                            Type = "Card"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = "P001",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6466),
                            Description = "A wig for Naruto cosplay",
                            IsActive = true,
                            Price = 30.0,
                            ProductName = "Naruto Wig",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "P002",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6470),
                            Description = "A hat for Mario cosplay",
                            IsActive = true,
                            Price = 20.0,
                            ProductName = "Mario Hat",
                            Quantity = 15
                        },
                        new
                        {
                            ProductId = "P003",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6474),
                            Description = "Complete costume for Sasuke cosplay",
                            IsActive = true,
                            Price = 80.0,
                            ProductName = "Sasuke Costume",
                            Quantity = 5
                        },
                        new
                        {
                            ProductId = "P004",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6477),
                            Description = "Replica sword from The Legend of Zelda",
                            IsActive = true,
                            Price = 100.0,
                            ProductName = "Zelda Sword",
                            Quantity = 7
                        },
                        new
                        {
                            ProductId = "P005",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6480),
                            Description = "Iconic straw hat from One Piece",
                            IsActive = true,
                            Price = 25.0,
                            ProductName = "One Piece Straw Hat",
                            Quantity = 20
                        },
                        new
                        {
                            ProductId = "P006",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6524),
                            Description = "Hatsune Miku blue twin-tail wig",
                            IsActive = true,
                            Price = 40.0,
                            ProductName = "Miku Wig",
                            Quantity = 12
                        },
                        new
                        {
                            ProductId = "P007",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6527),
                            Description = "Tanjiro's iconic hanafuda earrings",
                            IsActive = true,
                            Price = 15.0,
                            ProductName = "Demon Slayer Earrings",
                            Quantity = 30
                        },
                        new
                        {
                            ProductId = "P008",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6530),
                            Description = "Survey Corps uniform jacket",
                            IsActive = true,
                            Price = 50.0,
                            ProductName = "Attack on Titan Jacket",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "P009",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6532),
                            Description = "Cozy Pikachu-themed onesie",
                            IsActive = true,
                            Price = 60.0,
                            ProductName = "Pikachu Onesie",
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = "P010",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6535),
                            Description = "Final Fantasy VII replica sword",
                            IsActive = true,
                            Price = 120.0,
                            ProductName = "Cloud's Buster Sword",
                            Quantity = 4
                        },
                        new
                        {
                            ProductId = "P011",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6540),
                            Description = "LED Vision accessory from Genshin Impact",
                            IsActive = true,
                            Price = 35.0,
                            ProductName = "Genshin Impact Vision",
                            Quantity = 25
                        },
                        new
                        {
                            ProductId = "P012",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6543),
                            Description = "Jinx cosplay wig from Arcane",
                            IsActive = true,
                            Price = 45.0,
                            ProductName = "Jinx Wig",
                            Quantity = 6
                        },
                        new
                        {
                            ProductId = "P013",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6545),
                            Description = "Golden tiara from Sailor Moon",
                            IsActive = true,
                            Price = 18.0,
                            ProductName = "Sailor Moon Tiara",
                            Quantity = 15
                        },
                        new
                        {
                            ProductId = "P014",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6549),
                            Description = "High-quality Spider-Man suit",
                            IsActive = true,
                            Price = 90.0,
                            ProductName = "Spider-Man Suit",
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = "P015",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6551),
                            Description = "Replica wand from Harry Potter series",
                            IsActive = true,
                            Price = 22.0,
                            ProductName = "Harry Potter Wand",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ProductImage", b =>
                {
                    b.Property<string>("ProductImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            ProductImageId = "IMG001",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8915),
                            ProductId = "P001",
                            UrlImage = "https://example.com/images/naruto_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG002",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8918),
                            ProductId = "P002",
                            UrlImage = "https://example.com/images/mario_hat.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG003",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8920),
                            ProductId = "P003",
                            UrlImage = "https://example.com/images/sasuke_costume.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG004",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8922),
                            ProductId = "P004",
                            UrlImage = "https://example.com/images/zelda_sword.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG005",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8923),
                            ProductId = "P005",
                            UrlImage = "https://example.com/images/one_piece_hat.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG006",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8926),
                            ProductId = "P006",
                            UrlImage = "https://example.com/images/miku_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG007",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8927),
                            ProductId = "P007",
                            UrlImage = "https://example.com/images/demon_slayer_earrings.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG008",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8929),
                            ProductId = "P008",
                            UrlImage = "https://example.com/images/aot_jacket.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG009",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8933),
                            ProductId = "P009",
                            UrlImage = "https://example.com/images/pikachu_onesie.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG010",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8934),
                            ProductId = "P010",
                            UrlImage = "https://example.com/images/buster_sword.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG011",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8936),
                            ProductId = "P011",
                            UrlImage = "https://example.com/images/genshin_vision.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG012",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8938),
                            ProductId = "P012",
                            UrlImage = "https://example.com/images/jinx_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG013",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8940),
                            ProductId = "P013",
                            UrlImage = "https://example.com/images/sailor_moon_tiara.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG014",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8941),
                            ProductId = "P014",
                            UrlImage = "https://example.com/images/spiderman_suit.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG015",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8943),
                            ProductId = "P015",
                            UrlImage = "https://example.com/images/harry_potter_wand.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.Property<string>("RefreshTokenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("AccountId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Description")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Request");

                    b.HasData(
                        new
                        {
                            RequestId = "R001",
                            AccountId = "A001",
                            ContractId = "CT001",
                            Description = 0,
                            EndDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Rent Naruto Costume",
                            Price = 100.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R002",
                            AccountId = "A002",
                            ContractId = "CT002",
                            Description = 1,
                            EndDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "ĐN",
                            Name = "Rent Cosplayer for Event",
                            Price = 500.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R003",
                            AccountId = "A003",
                            ContractId = "CT003",
                            Description = 2,
                            EndDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "BD",
                            Name = "Create Anime Festival",
                            Price = 2000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R004",
                            AccountId = "A004",
                            ContractId = "CT004",
                            Description = 0,
                            EndDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HN",
                            Name = "Rent Samurai Armor",
                            Price = 150.0,
                            ServiceId = "S004",
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R005",
                            AccountId = "A005",
                            ContractId = "CT005",
                            Description = 1,
                            EndDate = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "BT",
                            Name = "Hire Professional Cosplayer",
                            Price = 700.0,
                            ServiceId = "S005",
                            StartDate = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R006",
                            AccountId = "A006",
                            ContractId = "CT006",
                            Description = 2,
                            EndDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Organize Comic Convention",
                            Price = 5000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R007",
                            AccountId = "A007",
                            ContractId = "CT007",
                            Description = 0,
                            EndDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Rent Victorian Costume",
                            Price = 120.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R008",
                            AccountId = "A008",
                            ContractId = "CT008",
                            Description = 1,
                            EndDate = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "QN",
                            Name = "Book Cosplayer for Birthday Party",
                            Price = 350.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R009",
                            AccountId = "A009",
                            ContractId = "CT009",
                            Description = 2,
                            EndDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "CM",
                            Name = "Plan Fantasy Fair",
                            Price = 3000.0,
                            ServiceId = "S004",
                            StartDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R010",
                            AccountId = "A010",
                            ContractId = "CT010",
                            Description = 0,
                            EndDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "LĐ",
                            Name = "Rent Halloween Costumes",
                            Price = 200.0,
                            ServiceId = "S005",
                            StartDate = new DateTime(2025, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R011",
                            AccountId = "A011",
                            ContractId = "CT011",
                            Description = 1,
                            EndDate = new DateTime(2025, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "NT",
                            Name = "Hire Cosplayer for Wedding",
                            Price = 800.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R012",
                            AccountId = "A012",
                            ContractId = "CT012",
                            Description = 2,
                            EndDate = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "VT",
                            Name = "Create Sci-Fi Convention",
                            Price = 4500.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R013",
                            AccountId = "A013",
                            ContractId = "CT013",
                            Description = 0,
                            EndDate = new DateTime(2025, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Rent Santa Claus Costume",
                            Price = 130.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R014",
                            AccountId = "A014",
                            ContractId = "CT014",
                            Description = 1,
                            EndDate = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HN",
                            Name = "Book Cosplayer for Product Launch",
                            Price = 600.0,
                            ServiceId = "S004",
                            StartDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R015",
                            AccountId = "A015",
                            ContractId = "CT015",
                            Description = 2,
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Host Christmas Event",
                            Price = 5500.0,
                            ServiceId = "S005",
                            StartDate = new DateTime(2025, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestCharacter", b =>
                {
                    b.Property<string>("RequestCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CosplayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestCharacter");

                    b.HasData(
                        new
                        {
                            RequestCharacterId = "RC01",
                            CharacterId = "CH001",
                            CosplayerId = "C001",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8976),
                            Description = "Yêu cầu cosplay nhân vật CH001",
                            RequestId = "R001",
                            TotalPrice = 50.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8977)
                        },
                        new
                        {
                            RequestCharacterId = "RC02",
                            CharacterId = "CH002",
                            CosplayerId = "C002",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8981),
                            Description = "Yêu cầu cosplay nhân vật CH002",
                            RequestId = "R002",
                            TotalPrice = 60.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8982)
                        },
                        new
                        {
                            RequestCharacterId = "RC03",
                            CharacterId = "CH003",
                            CosplayerId = "C003",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8984),
                            Description = "Yêu cầu cosplay nhân vật CH003",
                            RequestId = "R003",
                            TotalPrice = 70.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8985)
                        },
                        new
                        {
                            RequestCharacterId = "RC04",
                            CharacterId = "CH004",
                            CosplayerId = "C004",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8987),
                            Description = "Yêu cầu cosplay nhân vật CH004",
                            RequestId = "R004",
                            TotalPrice = 80.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8987)
                        },
                        new
                        {
                            RequestCharacterId = "RC05",
                            CharacterId = "CH005",
                            CosplayerId = "C005",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8989),
                            Description = "Yêu cầu cosplay nhân vật CH005",
                            RequestId = "R005",
                            TotalPrice = 90.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8990)
                        },
                        new
                        {
                            RequestCharacterId = "RC06",
                            CharacterId = "CH006",
                            CosplayerId = "C006",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8992),
                            Description = "Yêu cầu cosplay nhân vật CH006",
                            RequestId = "R006",
                            TotalPrice = 100.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8993)
                        },
                        new
                        {
                            RequestCharacterId = "RC07",
                            CharacterId = "CH007",
                            CosplayerId = "C007",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8995),
                            Description = "Yêu cầu cosplay nhân vật CH007",
                            RequestId = "R007",
                            TotalPrice = 110.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8995)
                        },
                        new
                        {
                            RequestCharacterId = "RC08",
                            CharacterId = "CH008",
                            CosplayerId = "C008",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8997),
                            Description = "Yêu cầu cosplay nhân vật CH008",
                            RequestId = "R008",
                            TotalPrice = 120.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(8998)
                        },
                        new
                        {
                            RequestCharacterId = "RC09",
                            CharacterId = "CH009",
                            CosplayerId = "C009",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9000),
                            Description = "Yêu cầu cosplay nhân vật CH009",
                            RequestId = "R009",
                            TotalPrice = 130.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9000)
                        },
                        new
                        {
                            RequestCharacterId = "RC10",
                            CharacterId = "CH010",
                            CosplayerId = "C010",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9004),
                            Description = "Yêu cầu cosplay nhân vật CH010",
                            RequestId = "R010",
                            TotalPrice = 140.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9004)
                        },
                        new
                        {
                            RequestCharacterId = "RC11",
                            CharacterId = "CH011",
                            CosplayerId = "C011",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9006),
                            Description = "Yêu cầu cosplay nhân vật CH011",
                            RequestId = "R011",
                            TotalPrice = 150.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9007)
                        },
                        new
                        {
                            RequestCharacterId = "RC12",
                            CharacterId = "CH012",
                            CosplayerId = "C012",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9009),
                            Description = "Yêu cầu cosplay nhân vật CH012",
                            RequestId = "R012",
                            TotalPrice = 160.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9010)
                        },
                        new
                        {
                            RequestCharacterId = "RC13",
                            CharacterId = "CH013",
                            CosplayerId = "C013",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9012),
                            Description = "Yêu cầu cosplay nhân vật CH013",
                            RequestId = "R013",
                            TotalPrice = 170.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9012)
                        },
                        new
                        {
                            RequestCharacterId = "RC14",
                            CharacterId = "CH014",
                            CosplayerId = "C014",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9015),
                            Description = "Yêu cầu cosplay nhân vật CH014",
                            RequestId = "R014",
                            TotalPrice = 180.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9016)
                        },
                        new
                        {
                            RequestCharacterId = "RC15",
                            CharacterId = "CH015",
                            CosplayerId = "C015",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9018),
                            Description = "Yêu cầu cosplay nhân vật CH015",
                            RequestId = "R015",
                            TotalPrice = 190.0,
                            UpdateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(9018)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "R001",
                            Description = "System Administrator",
                            RoleName = 0
                        },
                        new
                        {
                            Id = "R002",
                            Description = "Event and Service Manager",
                            RoleName = 1
                        },
                        new
                        {
                            Id = "R003",
                            Description = "Customer Service Consultant",
                            RoleName = 2
                        },
                        new
                        {
                            Id = "R004",
                            Description = "Professional Cosplayer",
                            RoleName = 3
                        },
                        new
                        {
                            Id = "R005",
                            Description = "Regular Customer",
                            RoleName = 4
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            ServiceId = "S001",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6428),
                            Description = "Rent characters for events and parties",
                            ServiceName = "Character Rental"
                        },
                        new
                        {
                            ServiceId = "S002",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6432),
                            Description = "Live cosplay performances at events",
                            ServiceName = "Cosplay Performance"
                        },
                        new
                        {
                            ServiceId = "S003",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6433),
                            Description = "Professional photoshoot with cosplayers",
                            ServiceName = "Photography Session"
                        },
                        new
                        {
                            ServiceId = "S004",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6434),
                            Description = "Selling exclusive cosplay-related merchandise",
                            ServiceName = "Merchandise Selling"
                        },
                        new
                        {
                            ServiceId = "S005",
                            CreateDate = new DateTime(2025, 3, 15, 7, 36, 11, 13, DateTimeKind.Utc).AddTicks(6435),
                            Description = "Cosplay and makeup training sessions",
                            ServiceName = "Workshop & Training"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractCharacterId")
                        .IsUnique()
                        .HasFilter("[ContractCharacterId] IS NOT NULL");

                    b.HasIndex("EventCharacterId")
                        .IsUnique();

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            TaskId = "T001",
                            AccountId = "A001",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7453),
                            Description = "Cosplay as anime characters",
                            EndDate = new DateTime(2025, 3, 18, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7452),
                            EventCharacterId = "EC001",
                            IsActive = true,
                            Location = "Tokyo",
                            StartDate = new DateTime(2025, 3, 17, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7439),
                            Status = 0,
                            TaskName = "Perform at Anime Fest",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7454)
                        },
                        new
                        {
                            TaskId = "T002",
                            AccountId = "A004",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7460),
                            Description = "Join cosplay contest",
                            EndDate = new DateTime(2025, 3, 20, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7459),
                            EventCharacterId = "EC002",
                            IsActive = true,
                            Location = "Los Angeles",
                            StartDate = new DateTime(2025, 3, 19, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7459),
                            Status = 1,
                            TaskName = "Comic Con Appearance",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7461)
                        },
                        new
                        {
                            TaskId = "T003",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7465),
                            Description = "Teach costume making",
                            EndDate = new DateTime(2025, 3, 22, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7464),
                            EventCharacterId = "EC003",
                            IsActive = true,
                            Location = "New York",
                            StartDate = new DateTime(2025, 3, 21, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7463),
                            Status = 2,
                            TaskName = "Cosplay Workshop",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7465)
                        },
                        new
                        {
                            TaskId = "T004",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7541),
                            Description = "Host a live event",
                            EndDate = new DateTime(2025, 3, 16, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7540),
                            EventCharacterId = "EC004",
                            IsActive = true,
                            Location = "Online",
                            StartDate = new DateTime(2025, 3, 16, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7540),
                            Status = 3,
                            TaskName = "Live Stream Cosplay",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7542)
                        },
                        new
                        {
                            TaskId = "T005",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7547),
                            Description = "Professional cosplay photoshoot",
                            EndDate = new DateTime(2025, 3, 24, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7546),
                            EventCharacterId = "EC005",
                            IsActive = true,
                            Location = "Paris",
                            StartDate = new DateTime(2025, 3, 23, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7545),
                            Status = 0,
                            TaskName = "Photoshoot Session",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7547)
                        },
                        new
                        {
                            TaskId = "T006",
                            AccountId = "A010",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7551),
                            Description = "Evaluate contestants",
                            EndDate = new DateTime(2025, 3, 26, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7550),
                            EventCharacterId = "EC006",
                            IsActive = true,
                            Location = "Berlin",
                            StartDate = new DateTime(2025, 3, 25, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7550),
                            Status = 1,
                            TaskName = "Guest Judge at Cosplay Contest",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7552)
                        },
                        new
                        {
                            TaskId = "T007",
                            AccountId = "A012",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7555),
                            Description = "Walk in parade",
                            EndDate = new DateTime(2025, 3, 28, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7555),
                            EventCharacterId = "EC007",
                            IsActive = true,
                            Location = "Seoul",
                            StartDate = new DateTime(2025, 3, 27, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7554),
                            Status = 2,
                            TaskName = "Cosplay Parade",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7556)
                        },
                        new
                        {
                            TaskId = "T008",
                            AccountId = "A013",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7560),
                            Description = "Perform on live TV",
                            EndDate = new DateTime(2025, 3, 30, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7560),
                            EventCharacterId = "EC008",
                            IsActive = true,
                            Location = "London",
                            StartDate = new DateTime(2025, 3, 29, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7559),
                            Status = 3,
                            TaskName = "TV Show Cosplay Segment",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7561)
                        },
                        new
                        {
                            TaskId = "T009",
                            AccountId = "A015",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7567),
                            Description = "Perform for charity",
                            EndDate = new DateTime(2025, 4, 1, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7566),
                            EventCharacterId = "EC009",
                            IsActive = true,
                            Location = "Sydney",
                            StartDate = new DateTime(2025, 3, 31, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7565),
                            Status = 4,
                            TaskName = "Cosplay Charity Event",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7567)
                        },
                        new
                        {
                            TaskId = "T010",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7571),
                            Description = "Talk about cosplay industry",
                            EndDate = new DateTime(2025, 4, 3, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7571),
                            EventCharacterId = "EC010",
                            IsActive = true,
                            Location = "San Diego",
                            StartDate = new DateTime(2025, 4, 2, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7570),
                            Status = 0,
                            TaskName = "Cosplay Panel Discussion",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7572)
                        },
                        new
                        {
                            TaskId = "T011",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7576),
                            Description = "New character shoot",
                            EndDate = new DateTime(2025, 4, 5, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7575),
                            EventCharacterId = "EC011",
                            IsActive = true,
                            Location = "Bangkok",
                            StartDate = new DateTime(2025, 4, 4, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7574),
                            Status = 1,
                            TaskName = "Cosplay Photoshoot",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7576)
                        },
                        new
                        {
                            TaskId = "T012",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7580),
                            Description = "Host main event",
                            EndDate = new DateTime(2025, 4, 7, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7580),
                            EventCharacterId = "EC012",
                            IsActive = true,
                            Location = "Jakarta",
                            StartDate = new DateTime(2025, 4, 6, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7579),
                            Status = 2,
                            TaskName = "Anime Convention Hosting",
                            UpdateDate = new DateTime(2025, 3, 15, 14, 36, 11, 13, DateTimeKind.Local).AddTicks(7581)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            TicketId = "T001",
                            EventId = "E001",
                            Price = 50.0,
                            Quantity = 500
                        },
                        new
                        {
                            TicketId = "T002",
                            EventId = "E002",
                            Price = 40.0,
                            Quantity = 300
                        },
                        new
                        {
                            TicketId = "T003",
                            EventId = "E003",
                            Price = 30.0,
                            Quantity = 200
                        },
                        new
                        {
                            TicketId = "T004",
                            EventId = "E004",
                            Price = 60.0,
                            Quantity = 600
                        },
                        new
                        {
                            TicketId = "T005",
                            EventId = "E005",
                            Price = 45.0,
                            Quantity = 400
                        },
                        new
                        {
                            TicketId = "T006",
                            EventId = "E006",
                            Price = 55.0,
                            Quantity = 350
                        },
                        new
                        {
                            TicketId = "T007",
                            EventId = "E007",
                            Price = 35.0,
                            Quantity = 250
                        },
                        new
                        {
                            TicketId = "T008",
                            EventId = "E008",
                            Price = 50.0,
                            Quantity = 450
                        },
                        new
                        {
                            TicketId = "T009",
                            EventId = "E009",
                            Price = 65.0,
                            Quantity = 550
                        },
                        new
                        {
                            TicketId = "T010",
                            EventId = "E010",
                            Price = 70.0,
                            Quantity = 700
                        },
                        new
                        {
                            TicketId = "T011",
                            EventId = "E011",
                            Price = 25.0,
                            Quantity = 150
                        },
                        new
                        {
                            TicketId = "T012",
                            EventId = "E012",
                            Price = 75.0,
                            Quantity = 800
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Property<string>("TicketAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("TicketAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketAccount");

                    b.HasData(
                        new
                        {
                            TicketAccountId = "TA001",
                            AccountId = "A003",
                            Quantity = 2,
                            TicketCode = "TC001",
                            TicketId = "T001",
                            TotalPrice = 100.0
                        },
                        new
                        {
                            TicketAccountId = "TA002",
                            AccountId = "A006",
                            Quantity = 1,
                            TicketCode = "TC002",
                            TicketId = "T002",
                            TotalPrice = 40.0
                        },
                        new
                        {
                            TicketAccountId = "TA003",
                            AccountId = "A011",
                            Quantity = 3,
                            TicketCode = "TC003",
                            TicketId = "T003",
                            TotalPrice = 90.0
                        },
                        new
                        {
                            TicketAccountId = "TA004",
                            AccountId = "A014",
                            Quantity = 2,
                            TicketCode = "TC004",
                            TicketId = "T004",
                            TotalPrice = 120.0
                        },
                        new
                        {
                            TicketAccountId = "TA005",
                            AccountId = "A003",
                            Quantity = 4,
                            TicketCode = "TC005",
                            TicketId = "T005",
                            TotalPrice = 180.0
                        },
                        new
                        {
                            TicketAccountId = "TA006",
                            AccountId = "A006",
                            Quantity = 2,
                            TicketCode = "TC006",
                            TicketId = "T006",
                            TotalPrice = 110.0
                        },
                        new
                        {
                            TicketAccountId = "TA007",
                            AccountId = "A011",
                            Quantity = 1,
                            TicketCode = "TC007",
                            TicketId = "T007",
                            TotalPrice = 35.0
                        },
                        new
                        {
                            TicketAccountId = "TA008",
                            AccountId = "A014",
                            Quantity = 3,
                            TicketCode = "TC008",
                            TicketId = "T008",
                            TotalPrice = 150.0
                        },
                        new
                        {
                            TicketAccountId = "TA009",
                            AccountId = "A003",
                            Quantity = 2,
                            TicketCode = "TC009",
                            TicketId = "T009",
                            TotalPrice = 130.0
                        },
                        new
                        {
                            TicketAccountId = "TA010",
                            AccountId = "A006",
                            Quantity = 1,
                            TicketCode = "TC010",
                            TicketId = "T010",
                            TotalPrice = 70.0
                        },
                        new
                        {
                            TicketAccountId = "TA011",
                            AccountId = "A011",
                            Quantity = 5,
                            TicketCode = "TC011",
                            TicketId = "T011",
                            TotalPrice = 125.0
                        },
                        new
                        {
                            TicketAccountId = "TA012",
                            AccountId = "A014",
                            Quantity = 2,
                            TicketCode = "TC012",
                            TicketId = "T012",
                            TotalPrice = 150.0
                        },
                        new
                        {
                            TicketAccountId = "TA013",
                            AccountId = "A003",
                            Quantity = 3,
                            TicketCode = "TC013",
                            TicketId = "T003",
                            TotalPrice = 90.0
                        },
                        new
                        {
                            TicketAccountId = "TA014",
                            AccountId = "A006",
                            Quantity = 2,
                            TicketCode = "TC014",
                            TicketId = "T005",
                            TotalPrice = 90.0
                        },
                        new
                        {
                            TicketAccountId = "TA015",
                            AccountId = "A011",
                            Quantity = 1,
                            TicketCode = "TC015",
                            TicketId = "T007",
                            TotalPrice = 35.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("AccountCoupons")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Coupon", "Coupon")
                        .WithMany("AccountCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("AccountImages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithOne("Cart")
                        .HasForeignKey("CCSS_Repository.Entities.Cart", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Category", "Category")
                        .WithMany("Characters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CharacterImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("CharacterImages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.AccountCoupon", "AccountCoupon")
                        .WithOne("Contract")
                        .HasForeignKey("CCSS_Repository.Entities.Contract", "AccountCouponId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Request", "Request")
                        .WithOne("Contract")
                        .HasForeignKey("CCSS_Repository.Entities.Contract", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountCoupon");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Character");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventActivity", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Activity", "Activity")
                        .WithMany("EventActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventActivities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("EventCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventCharacters")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Notification", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.OrderProduct", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Service", "Service")
                        .WithMany("Packages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.AccountCoupon", "AccountCoupon")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "AccountCouponID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.TicketAccount", "TicketAccount")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "TicketAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountCoupon");

                    b.Navigation("Contract");

                    b.Navigation("Order");

                    b.Navigation("TicketAccount");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ProductImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Requests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("RequestCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Request", "Request")
                        .WithMany("RequestCharacters")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Tasks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.ContractCharacter", "ContractCharacter")
                        .WithOne("Task")
                        .HasForeignKey("CCSS_Repository.Entities.Task", "ContractCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.EventCharacter", "EventCharacter")
                        .WithOne("Task")
                        .HasForeignKey("CCSS_Repository.Entities.Task", "EventCharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ContractCharacter");

                    b.Navigation("EventCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithOne("Ticket")
                        .HasForeignKey("CCSS_Repository.Entities.Ticket", "EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Ticket", "Ticket")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Navigation("AccountCoupons");

                    b.Navigation("AccountImages");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Requests");

                    b.Navigation("Tasks");

                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Activity", b =>
                {
                    b.Navigation("EventActivities");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Navigation("CharacterImages");

                    b.Navigation("ContractCharacters");

                    b.Navigation("EventCharacters");

                    b.Navigation("RequestCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Navigation("ContractCharacters");

                    b.Navigation("Feedbacks");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Coupon", b =>
                {
                    b.Navigation("AccountCoupons");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Navigation("EventActivities");

                    b.Navigation("EventCharacters");

                    b.Navigation("EventImages");

                    b.Navigation("Ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();

                    b.Navigation("RequestCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Service", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
