// <auto-generated />
using System;
using CCSS_Repository.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CCSS_Repository.Migrations
{
    [DbContext(typeof(CCSSDbContext))]
    [Migration("20250408175459_Test_1")]
    partial class Test_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AverageStar")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Leader")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnTask")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("SalaryIndex")
                        .HasColumnType("float");

                    b.Property<int?>("TaskQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountId = "A001",
                            AverageStar = 4.5,
                            Email = "john@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "John Doe",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 75f
                        },
                        new
                        {
                            AccountId = "A002",
                            Email = "jane@example.com",
                            IsActive = true,
                            Name = "Jane Smith",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R001"
                        },
                        new
                        {
                            AccountId = "A003",
                            Email = "phuongnam26012002@gmail.com",
                            IsActive = true,
                            Name = "Nam Bài Duồi",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A004",
                            AverageStar = 4.2000000000000002,
                            Email = "bob@example.com",
                            Height = 175f,
                            IsActive = true,
                            Name = "Bob Brown",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 80f
                        },
                        new
                        {
                            AccountId = "A005",
                            AverageStar = 3.5,
                            Email = "charlie@example.com",
                            Height = 182f,
                            IsActive = true,
                            Name = "Charlie White",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 78f
                        },
                        new
                        {
                            AccountId = "A006",
                            Email = "david@example.com",
                            IsActive = true,
                            Name = "David Black",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A007",
                            AverageStar = 4.0999999999999996,
                            Email = "emma@example.com",
                            Height = 168f,
                            IsActive = true,
                            Name = "Emma Green",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 60f
                        },
                        new
                        {
                            AccountId = "A008",
                            AverageStar = 4.5999999999999996,
                            Email = "frank@example.com",
                            Height = 185f,
                            IsActive = true,
                            Name = "Frank Blue",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.5,
                            Weight = 85f
                        },
                        new
                        {
                            AccountId = "A009",
                            Email = "grace@example.com",
                            IsActive = true,
                            Name = "Grace Pink",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R001"
                        },
                        new
                        {
                            AccountId = "A010",
                            AverageStar = 2.5,
                            Email = "henry@example.com",
                            Height = 178f,
                            IsActive = true,
                            Name = "Henry Purple",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 77f
                        },
                        new
                        {
                            AccountId = "A011",
                            Email = "isla@example.com",
                            IsActive = true,
                            Name = "Isla Red",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A012",
                            AverageStar = 3.7999999999999998,
                            Email = "jack@example.com",
                            Height = 172f,
                            IsActive = true,
                            Name = "Jack Yellow",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 70f
                        },
                        new
                        {
                            AccountId = "A013",
                            AverageStar = 2.5899999999999999,
                            Email = "katie@example.com",
                            Height = 165f,
                            IsActive = true,
                            Name = "Katie Orange",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 55f
                        },
                        new
                        {
                            AccountId = "A014",
                            Email = "liam@example.com",
                            IsActive = true,
                            Name = "Liam Gray",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R005"
                        },
                        new
                        {
                            AccountId = "A015",
                            AverageStar = 1.5,
                            Email = "mia@example.com",
                            Height = 170f,
                            IsActive = true,
                            Name = "Mia Cyan",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 65f
                        },
                        new
                        {
                            AccountId = "A016",
                            AverageStar = 3.7000000000000002,
                            Email = "noah@example.com",
                            Height = 175f,
                            IsActive = true,
                            Name = "Noah Silver",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 70f
                        },
                        new
                        {
                            AccountId = "A017",
                            AverageStar = 4.7999999999999998,
                            Email = "olivia@example.com",
                            Height = 168f,
                            IsActive = true,
                            Name = "Olivia Gold",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 55f
                        },
                        new
                        {
                            AccountId = "A018",
                            AverageStar = 3.2000000000000002,
                            Email = "william@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "William Amber",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 75f
                        },
                        new
                        {
                            AccountId = "A019",
                            AverageStar = 3.2999999999999998,
                            Email = "sophia@example.com",
                            Height = 165f,
                            IsActive = true,
                            Name = "Sophia Ivory",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 50f
                        },
                        new
                        {
                            AccountId = "A020",
                            AverageStar = 3.3999999999999999,
                            Email = "james@example.com",
                            Height = 178f,
                            IsActive = true,
                            Name = "James Navy",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.5,
                            Weight = 72f
                        },
                        new
                        {
                            AccountId = "A021",
                            AverageStar = 3.5,
                            Email = "ava@example.com",
                            Height = 162f,
                            IsActive = true,
                            Name = "Ava Teal",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 48f
                        },
                        new
                        {
                            AccountId = "A022",
                            AverageStar = 3.6000000000000001,
                            Email = "benjamin@example.com",
                            Height = 177f,
                            IsActive = true,
                            Name = "Benjamin Lime",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 70f
                        },
                        new
                        {
                            AccountId = "A023",
                            AverageStar = 3.7000000000000002,
                            Email = "charlotte@example.com",
                            Height = 164f,
                            IsActive = true,
                            Name = "Charlotte Beige",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 52f
                        },
                        new
                        {
                            AccountId = "A024",
                            AverageStar = 3.7999999999999998,
                            Email = "lucas@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "Lucas Maroon",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 74f
                        },
                        new
                        {
                            AccountId = "A025",
                            AverageStar = 3.8999999999999999,
                            Email = "mia@example.com",
                            Height = 159f,
                            IsActive = true,
                            Name = "Mia Pearl",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 47f
                        },
                        new
                        {
                            AccountId = "A026",
                            AverageStar = 2.5,
                            Email = "ethan@example.com",
                            Height = 176f,
                            IsActive = true,
                            Name = "Ethan Olive",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 71f
                        },
                        new
                        {
                            AccountId = "A027",
                            AverageStar = 2.6000000000000001,
                            Email = "amelia@example.com",
                            Height = 167f,
                            IsActive = true,
                            Name = "Amelia Ruby",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 53f
                        },
                        new
                        {
                            AccountId = "A028",
                            AverageStar = 2.7000000000000002,
                            Email = "henry@example.com",
                            Height = 182f,
                            IsActive = true,
                            Name = "Henry Saffron",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 76f
                        },
                        new
                        {
                            AccountId = "A029",
                            AverageStar = 2.7999999999999998,
                            Email = "ella@example.com",
                            Height = 160f,
                            IsActive = true,
                            Name = "Ella Coral",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 49f
                        },
                        new
                        {
                            AccountId = "A030",
                            AverageStar = 2.8999999999999999,
                            Email = "daniel@example.com",
                            Height = 175f,
                            IsActive = true,
                            Name = "Daniel Cyan",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 72f
                        },
                        new
                        {
                            AccountId = "A031",
                            AverageStar = 3.0,
                            Email = "logan@example.com",
                            Height = 180f,
                            IsActive = true,
                            Name = "Logan Indigo",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 73f
                        },
                        new
                        {
                            AccountId = "A032",
                            AverageStar = 4.0,
                            Email = "lily@example.com",
                            Height = 165f,
                            IsActive = true,
                            Name = "Lily Violet",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 52f
                        },
                        new
                        {
                            AccountId = "A033",
                            AverageStar = 4.0999999999999996,
                            Email = "mason@example.com",
                            Height = 178f,
                            IsActive = true,
                            Name = "Mason Turquoise",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 74f
                        },
                        new
                        {
                            AccountId = "A034",
                            AverageStar = 4.2000000000000002,
                            Email = "zoe@example.com",
                            Height = 160f,
                            IsActive = true,
                            Name = "Zoe Lavender",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 48f
                        },
                        new
                        {
                            AccountId = "A035",
                            AverageStar = 4.2999999999999998,
                            Email = "elijah@example.com",
                            Height = 182f,
                            IsActive = true,
                            Name = "Elijah Crimson",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.5,
                            Weight = 77f
                        },
                        new
                        {
                            AccountId = "A036",
                            AverageStar = 4.4000000000000004,
                            Email = "aria@example.com",
                            Height = 164f,
                            IsActive = true,
                            Name = "Aria Mint",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 50f
                        },
                        new
                        {
                            AccountId = "A037",
                            AverageStar = 4.5,
                            Email = "sebastian@example.com",
                            Height = 179f,
                            IsActive = true,
                            Name = "Sebastian Bronze",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3,
                            Weight = 72f
                        },
                        new
                        {
                            AccountId = "A038",
                            AverageStar = 4.5999999999999996,
                            Email = "harper@example.com",
                            Height = 168f,
                            IsActive = true,
                            Name = "Harper Rose",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.2,
                            Weight = 53f
                        },
                        new
                        {
                            AccountId = "A039",
                            AverageStar = 4.7000000000000002,
                            Email = "caleb@example.com",
                            Height = 181f,
                            IsActive = true,
                            Name = "Caleb Onyx",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.3999999999999999,
                            Weight = 75f
                        },
                        new
                        {
                            AccountId = "A040",
                            AverageStar = 4.7999999999999998,
                            Email = "scarlett@example.com",
                            Height = 162f,
                            IsActive = true,
                            Name = "Scarlett Magenta",
                            Password = "ZkmcwLVZC7B06TE7qd/qoA==",
                            RoleId = "R004",
                            SalaryIndex = 1.1000000000000001,
                            Weight = 51f
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.Property<string>("AccountCouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountCouponId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CouponId");

                    b.ToTable("AccountCoupon");

                    b.HasData(
                        new
                        {
                            AccountCouponId = "AC001",
                            AccountId = "A001",
                            CouponId = "CP001",
                            EndDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC002",
                            AccountId = "A002",
                            CouponId = "CP002",
                            EndDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC003",
                            AccountId = "A003",
                            CouponId = "CP003",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC004",
                            AccountId = "A004",
                            CouponId = "CP004",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC005",
                            AccountId = "A005",
                            CouponId = "CP005",
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC006",
                            AccountId = "A001",
                            CouponId = "CP006",
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC007",
                            AccountId = "A002",
                            CouponId = "CP007",
                            EndDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC008",
                            AccountId = "A003",
                            CouponId = "CP008",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC009",
                            AccountId = "A004",
                            CouponId = "CP009",
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC010",
                            AccountId = "A005",
                            CouponId = "CP010",
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC011",
                            AccountId = "A006",
                            CouponId = "CP011",
                            EndDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC012",
                            AccountId = "A007",
                            CouponId = "CP012",
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC013",
                            AccountId = "A008",
                            CouponId = "CP013",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC014",
                            AccountId = "A009",
                            CouponId = "CP014",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            StartDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountCouponId = "AC015",
                            AccountId = "A010",
                            CouponId = "CP015",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountImage", b =>
                {
                    b.Property<string>("AccountImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAvatar")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountImageId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountImage");

                    b.HasData(
                        new
                        {
                            AccountImageId = "AI1",
                            AccountId = "A001",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6486),
                            UrlImage = "https://example.com/admin.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI2",
                            AccountId = "A002",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6489),
                            UrlImage = "https://example.com/manager.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI3",
                            AccountId = "A003",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6491),
                            UrlImage = "https://example.com/user1.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI4",
                            AccountId = "A004",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6496),
                            UrlImage = "https://example.com/user2.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI5",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6498),
                            UrlImage = "https://example.com/user3.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI6",
                            AccountId = "A006",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6501),
                            UrlImage = "https://example.com/user4.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI7",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6503),
                            UrlImage = "https://example.com/user5.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI8",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6505),
                            UrlImage = "https://example.com/user6.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI9",
                            AccountId = "A009",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6507),
                            UrlImage = "https://example.com/user7.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI10",
                            AccountId = "A010",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6509),
                            UrlImage = "https://example.com/user8.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI11",
                            AccountId = "A011",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6512),
                            UrlImage = "https://example.com/user9.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI12",
                            AccountId = "A012",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6516),
                            UrlImage = "https://example.com/user10.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI13",
                            AccountId = "A013",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6519),
                            UrlImage = "https://example.com/user11.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI14",
                            AccountId = "A014",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6521),
                            UrlImage = "https://example.com/user12.jpg"
                        },
                        new
                        {
                            AccountImageId = "AI15",
                            AccountId = "A015",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6524),
                            UrlImage = "https://example.com/user13.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            ActivityId = "ACT001",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6558),
                            Description = "A relaxing yoga session",
                            Name = "Yoga Class",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6559)
                        },
                        new
                        {
                            ActivityId = "ACT002",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6562),
                            Description = "Learn to cook delicious meals",
                            Name = "Cooking Workshop",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6562)
                        },
                        new
                        {
                            ActivityId = "ACT003",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6565),
                            Description = "Live music performance",
                            Name = "Music Concert",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6565)
                        },
                        new
                        {
                            ActivityId = "ACT004",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6568),
                            Description = "Showcase of local artists",
                            Name = "Art Exhibition",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6568)
                        },
                        new
                        {
                            ActivityId = "ACT005",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6573),
                            Description = "Discussion on latest technology trends",
                            Name = "Tech Talk",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6574)
                        },
                        new
                        {
                            ActivityId = "ACT006",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6576),
                            Description = "5K run for a good cause",
                            Name = "Charity Run",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6577)
                        },
                        new
                        {
                            ActivityId = "ACT007",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6579),
                            Description = "Monthly book discussion",
                            Name = "Book Club",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6580)
                        },
                        new
                        {
                            ActivityId = "ACT008",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6582),
                            Description = "Learn photography skills",
                            Name = "Photography Workshop",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6583)
                        },
                        new
                        {
                            ActivityId = "ACT009",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6585),
                            Description = "Dance battle for all ages",
                            Name = "Dance Competition",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6586)
                        },
                        new
                        {
                            ActivityId = "ACT010",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6588),
                            Description = "Competitive chess matches",
                            Name = "Chess Tournament",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6588)
                        },
                        new
                        {
                            ActivityId = "ACT011",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6591),
                            Description = "Outdoor movie screening",
                            Name = "Movie Night",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6591)
                        },
                        new
                        {
                            ActivityId = "ACT012",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6594),
                            Description = "Showcase of scientific projects",
                            Name = "Science Fair",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6594)
                        },
                        new
                        {
                            ActivityId = "ACT013",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6599),
                            Description = "Intensive coding workshop",
                            Name = "Coding Bootcamp",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6599)
                        },
                        new
                        {
                            ActivityId = "ACT014",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6601),
                            Description = "Learn gardening techniques",
                            Name = "Gardening Workshop",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6602)
                        },
                        new
                        {
                            ActivityId = "ACT015",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6604),
                            Description = "Guided meditation practice",
                            Name = "Meditation Session",
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6605)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CartId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            CartId = "C001",
                            AccountId = "A003",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5462),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5463)
                        },
                        new
                        {
                            CartId = "C002",
                            AccountId = "A006",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5466),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5467)
                        },
                        new
                        {
                            CartId = "C003",
                            AccountId = "A011",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5471),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5472)
                        },
                        new
                        {
                            CartId = "C004",
                            AccountId = "A014",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5474),
                            TotalPrice = 0.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5474)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.Property<string>("CartProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartProductId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProduct");

                    b.HasData(
                        new
                        {
                            CartProductId = "8c06c4c2-3abb-45eb-9395-854e9b9d4f84",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6688),
                            Price = 30000.0,
                            ProductId = "P001",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "47e9d975-97e4-4b5c-84be-cc9214241f07",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6692),
                            Price = 20000.0,
                            ProductId = "P002",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "4c0f698c-86de-4dff-b6e2-a70c3aaf579b",
                            CartId = "C001",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6699),
                            Price = 80000.0,
                            ProductId = "P003",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "04ceacbd-8b2c-4ed4-afd1-edcaddd94420",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6703),
                            Price = 100000.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "dd561e19-7ae9-4489-8275-8fc2bbbeebd2",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6707),
                            Price = 25000.0,
                            ProductId = "P005",
                            Quantity = 3
                        },
                        new
                        {
                            CartProductId = "b303ffc4-8796-46ad-b5e9-c64135802470",
                            CartId = "C002",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6711),
                            Price = 40000.0,
                            ProductId = "P006",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "d2e0ac37-aa1a-46b5-9baf-54410714a690",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6717),
                            Price = 15000.0,
                            ProductId = "P007",
                            Quantity = 5
                        },
                        new
                        {
                            CartProductId = "556ffc2f-913f-492b-a9d3-7d94b73b1c4e",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6721),
                            Price = 50000.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "c3d3ef8a-8b6d-42c3-9a55-77b2753f1145",
                            CartId = "C003",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6725),
                            Price = 60000.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "5e474a48-501c-4765-addf-9217f7fdc8bb",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6729),
                            Price = 120000.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            CartProductId = "c3e8f76b-9aa8-41a3-a5e6-659664ed2eb0",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6735),
                            Price = 35000.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            CartProductId = "35aa09e3-6d0c-4f2b-9b83-3147181b07c5",
                            CartId = "C004",
                            CreatedDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6739),
                            Price = 45000.0,
                            ProductId = "P012",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = "C3",
                            CategoryName = "Manga",
                            Description = "Manga characters"
                        },
                        new
                        {
                            CategoryId = "C4",
                            CategoryName = "Movie",
                            Description = "Movie characters"
                        },
                        new
                        {
                            CategoryId = "C5",
                            CategoryName = "Comic",
                            Description = "Comic book characters"
                        },
                        new
                        {
                            CategoryId = "C6",
                            CategoryName = "Mythology",
                            Description = "Mythological characters"
                        },
                        new
                        {
                            CategoryId = "C7",
                            CategoryName = "Fantasy",
                            Description = "Fantasy world characters"
                        },
                        new
                        {
                            CategoryId = "C8",
                            CategoryName = "Sci-Fi",
                            Description = "Science fiction characters"
                        },
                        new
                        {
                            CategoryId = "C9",
                            CategoryName = "Superhero",
                            Description = "Superhero characters"
                        },
                        new
                        {
                            CategoryId = "C10",
                            CategoryName = "Villains",
                            Description = "Famous villain characters"
                        },
                        new
                        {
                            CategoryId = "C11",
                            CategoryName = "Robot",
                            Description = "AI and robot characters"
                        },
                        new
                        {
                            CategoryId = "C12",
                            CategoryName = "Historical",
                            Description = "Historical figures in fiction"
                        },
                        new
                        {
                            CategoryId = "C13",
                            CategoryName = "Horror",
                            Description = "Horror and thriller characters"
                        },
                        new
                        {
                            CategoryId = "C14",
                            CategoryName = "Detective",
                            Description = "Famous detective characters"
                        },
                        new
                        {
                            CategoryId = "C15",
                            CategoryName = "Sports",
                            Description = "Characters from sports anime/manga"
                        },
                        new
                        {
                            CategoryId = "C16",
                            CategoryName = "Magic",
                            Description = "Characters using magic or spells"
                        },
                        new
                        {
                            CategoryId = "C17",
                            CategoryName = "Slice of Life",
                            Description = "Everyday life characters"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float?>("MaxHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MaxWeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinWeight")
                        .HasColumnType("real");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CharacterId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Character");

                    b.HasData(
                        new
                        {
                            CharacterId = "CH001",
                            CategoryId = "C3",
                            CharacterName = "Naruto",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4414),
                            Description = "Ninja from Konoha",
                            IsActive = true,
                            MaxHeight = 180f,
                            MaxWeight = 80f,
                            MinHeight = 160f,
                            MinWeight = 50f,
                            Price = 100000.0,
                            Quantity = 5
                        },
                        new
                        {
                            CharacterId = "CH002",
                            CategoryId = "C3",
                            CharacterName = "Sasuke",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4422),
                            Description = "Naruto’s rival",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 120000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH003",
                            CategoryId = "C3",
                            CharacterName = "Goku",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4428),
                            Description = "Saiyan warrior",
                            IsActive = true,
                            MaxHeight = 190f,
                            MaxWeight = 90f,
                            MinHeight = 170f,
                            MinWeight = 60f,
                            Price = 150000.0,
                            Quantity = 4
                        },
                        new
                        {
                            CharacterId = "CH004",
                            CategoryId = "C4",
                            CharacterName = "Luffy",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4433),
                            Description = "Pirate King",
                            IsActive = true,
                            MaxHeight = 175f,
                            MaxWeight = 70f,
                            MinHeight = 155f,
                            MinWeight = 45f,
                            Price = 110000.0,
                            Quantity = 6
                        },
                        new
                        {
                            CharacterId = "CH005",
                            CategoryId = "C4",
                            CharacterName = "Ichigo",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4440),
                            Description = "Soul Reaper",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 130000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH006",
                            CategoryId = "C14",
                            CharacterName = "Mario",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4445),
                            Description = "Plumber hero",
                            IsActive = true,
                            MaxHeight = 160f,
                            MaxWeight = 70f,
                            MinHeight = 140f,
                            MinWeight = 50f,
                            Price = 80000.0,
                            Quantity = 5
                        },
                        new
                        {
                            CharacterId = "CH007",
                            CategoryId = "C14",
                            CharacterName = "Luigi",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4449),
                            Description = "Mario’s brother",
                            IsActive = true,
                            MaxHeight = 170f,
                            MaxWeight = 75f,
                            MinHeight = 150f,
                            MinWeight = 55f,
                            Price = 85000.0,
                            Quantity = 4
                        },
                        new
                        {
                            CharacterId = "CH008",
                            CategoryId = "C14",
                            CharacterName = "Link",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4454),
                            Description = "Hero of Hyrule",
                            IsActive = true,
                            MaxHeight = 180f,
                            MaxWeight = 80f,
                            MinHeight = 160f,
                            MinWeight = 50f,
                            Price = 140000.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH009",
                            CategoryId = "C16",
                            CharacterName = "Zelda",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4458),
                            Description = "Hyrule princess",
                            IsActive = true,
                            MaxHeight = 175f,
                            MaxWeight = 70f,
                            MinHeight = 155f,
                            MinWeight = 50f,
                            Price = 135000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH010",
                            CategoryId = "C16",
                            CharacterName = "Samus",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4463),
                            Description = "Bounty hunter",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 145000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH011",
                            CategoryId = "C13",
                            CharacterName = "Cloud",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4468),
                            Description = "Ex-SOLDIER",
                            IsActive = true,
                            MaxHeight = 185f,
                            MaxWeight = 85f,
                            MinHeight = 165f,
                            MinWeight = 55f,
                            Price = 125000.0,
                            Quantity = 3
                        },
                        new
                        {
                            CharacterId = "CH012",
                            CategoryId = "C13",
                            CharacterName = "Sephiroth",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4514),
                            Description = "One-Winged Angel",
                            IsActive = true,
                            MaxHeight = 190f,
                            MaxWeight = 90f,
                            MinHeight = 170f,
                            MinWeight = 60f,
                            Price = 155000.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH013",
                            CategoryId = "C8",
                            CharacterName = "Kratos",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4523),
                            Description = "God of War",
                            IsActive = true,
                            MaxHeight = 195f,
                            MaxWeight = 100f,
                            MinHeight = 175f,
                            MinWeight = 70f,
                            Price = 160000.0,
                            Quantity = 2
                        },
                        new
                        {
                            CharacterId = "CH014",
                            CategoryId = "C8",
                            CharacterName = "Pikachu",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4528),
                            Description = "Electric Pokemon",
                            IsActive = true,
                            MaxHeight = 50f,
                            MaxWeight = 20f,
                            MinHeight = 30f,
                            MinWeight = 10f,
                            Price = 90000.0,
                            Quantity = 10
                        },
                        new
                        {
                            CharacterId = "CH015",
                            CategoryId = "C8",
                            CharacterName = "Kirby",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4533),
                            Description = "Pink puffball",
                            IsActive = true,
                            MaxHeight = 60f,
                            MaxWeight = 25f,
                            MinHeight = 40f,
                            MinWeight = 15f,
                            Price = 95000.0,
                            Quantity = 8
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CharacterImage", b =>
                {
                    b.Property<string>("CharacterImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAvatar")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterImageId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterImage");

                    b.HasData(
                        new
                        {
                            CharacterImageId = "CI001",
                            CharacterId = "CH001",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6778),
                            UrlImage = "https://example.com/img1.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI002",
                            CharacterId = "CH002",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6781),
                            UrlImage = "https://example.com/img2.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI003",
                            CharacterId = "CH003",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6784),
                            UrlImage = "https://example.com/img3.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI004",
                            CharacterId = "CH004",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6786),
                            UrlImage = "https://example.com/img4.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI005",
                            CharacterId = "CH005",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6789),
                            UrlImage = "https://example.com/img5.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI006",
                            CharacterId = "CH006",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6793),
                            UrlImage = "https://example.com/img6.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI007",
                            CharacterId = "CH007",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6795),
                            UrlImage = "https://example.com/img7.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI008",
                            CharacterId = "CH008",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6797),
                            UrlImage = "https://example.com/img8.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI009",
                            CharacterId = "CH009",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6800),
                            UrlImage = "https://example.com/img9.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI010",
                            CharacterId = "CH010",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6802),
                            UrlImage = "https://example.com/img10.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI011",
                            CharacterId = "CH011",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6804),
                            UrlImage = "https://example.com/img11.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI012",
                            CharacterId = "CH012",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6807),
                            UrlImage = "https://example.com/img12.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI013",
                            CharacterId = "CH013",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6809),
                            UrlImage = "https://example.com/img13.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI014",
                            CharacterId = "CH014",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6813),
                            UrlImage = "https://example.com/img14.jpg"
                        },
                        new
                        {
                            CharacterImageId = "CI015",
                            CharacterId = "CH015",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6816),
                            UrlImage = "https://example.com/img15.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ContractName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Deposit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UrlPdf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Contract");

                    b.HasData(
                        new
                        {
                            ContractId = "CT002",
                            Amount = 0.0,
                            ContractName = "Character rental",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "100",
                            RequestId = "R002",
                            TotalPrice = 500000.0
                        },
                        new
                        {
                            ContractId = "CT005",
                            Amount = 350000.0,
                            ContractName = "Character rental",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "50",
                            RequestId = "R005",
                            TotalPrice = 700000.0
                        },
                        new
                        {
                            ContractId = "CT008",
                            Amount = 175000.0,
                            ContractName = "Character rental",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "50",
                            RequestId = "R008",
                            TotalPrice = 350000.0
                        },
                        new
                        {
                            ContractId = "CT010",
                            Amount = 100000.0,
                            ContractName = "Character rental",
                            ContractStatus = 3,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "50",
                            RequestId = "R010",
                            TotalPrice = 200000.0
                        },
                        new
                        {
                            ContractId = "CT014",
                            Amount = 0.0,
                            ContractName = "Character rental",
                            ContractStatus = 1,
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = "100",
                            RequestId = "R014",
                            TotalPrice = 600000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CosplayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractCharacter");

                    b.HasData(
                        new
                        {
                            ContractCharacterId = "CC0021",
                            CharacterId = "CH001",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT002",
                            Quantity = 1,
                            TotalPrice = 150000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0022",
                            CharacterId = "CH002",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT002",
                            Quantity = 5,
                            TotalPrice = 180000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0023",
                            CharacterId = "CH003",
                            ContractId = "CT002",
                            CreateDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT002",
                            Quantity = 3,
                            TotalPrice = 170000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0051",
                            CharacterId = "CH004",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT005",
                            Quantity = 2,
                            TotalPrice = 200000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0052",
                            CharacterId = "CH005",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT005",
                            Quantity = 4,
                            TotalPrice = 250000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0053",
                            CharacterId = "CH006",
                            ContractId = "CT005",
                            CreateDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT005",
                            Quantity = 6,
                            TotalPrice = 250000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0081",
                            CharacterId = "CH007",
                            ContractId = "CT008",
                            CosplayerId = "A001",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT008",
                            Quantity = 1,
                            TotalPrice = 120000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0082",
                            CharacterId = "CH008",
                            ContractId = "CT008",
                            CosplayerId = "A008",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT008",
                            Quantity = 1,
                            TotalPrice = 130000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0083",
                            CharacterId = "CH009",
                            ContractId = "CT008",
                            CosplayerId = "A040",
                            CreateDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT008",
                            Quantity = 1,
                            TotalPrice = 100000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0101",
                            CharacterId = "CH010",
                            ContractId = "CT010",
                            CosplayerId = "A040",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT010",
                            Quantity = 1,
                            TotalPrice = 70000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0102",
                            CharacterId = "CH011",
                            ContractId = "CT010",
                            CosplayerId = "A039",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT010",
                            Quantity = 1,
                            TotalPrice = 80000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0103",
                            CharacterId = "CH012",
                            ContractId = "CT010",
                            CosplayerId = "A038",
                            CreateDate = new DateTime(2025, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT010",
                            Quantity = 1,
                            TotalPrice = 50000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0141",
                            CharacterId = "CH013",
                            ContractId = "CT014",
                            CosplayerId = "A035",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 1 for CT014",
                            Quantity = 1,
                            TotalPrice = 200000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0142",
                            CharacterId = "CH014",
                            ContractId = "CT014",
                            CosplayerId = "A040",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 2 for CT014",
                            Quantity = 1,
                            TotalPrice = 250000.0
                        },
                        new
                        {
                            ContractCharacterId = "CC0143",
                            CharacterId = "CH015",
                            ContractId = "CT014",
                            CosplayerId = "A005",
                            CreateDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Character 3 for CT014",
                            Quantity = 1,
                            TotalPrice = 150000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Coupon", b =>
                {
                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CouponId");

                    b.ToTable("Coupon");

                    b.HasData(
                        new
                        {
                            CouponId = "CP001",
                            Amount = 50000.0,
                            Condition = "Min order 500",
                            EndDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP002",
                            Amount = 150000.0,
                            Condition = "Min order 1000",
                            EndDate = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 15f,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP003",
                            Amount = 400000.0,
                            Condition = "Min contract 2000",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP004",
                            Amount = 180000.0,
                            Condition = "Min order 1500",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 12f,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP005",
                            Amount = 750000.0,
                            Condition = "Min contract 3000",
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 25f,
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP006",
                            Amount = 100000.0,
                            Condition = "New customers only",
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP007",
                            Amount = 200000.0,
                            Condition = "Holiday Special",
                            EndDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP008",
                            Amount = 600000.0,
                            Condition = "VIP customers",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 30f,
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP009",
                            Amount = 120000.0,
                            Condition = "Summer Sale",
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 15f,
                            StartDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP010",
                            Amount = 1000000.0,
                            Condition = "Black Friday",
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 50f,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP011",
                            Amount = 75000.0,
                            Condition = "Back to School",
                            EndDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP012",
                            Amount = 1750000.0,
                            Condition = "Min contract 5000",
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 35f,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            CouponId = "CP013",
                            Amount = 250000.0,
                            Condition = "Loyal Customers",
                            EndDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 20f,
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP014",
                            Amount = 800000.0,
                            Condition = "Cyber Monday",
                            EndDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 40f,
                            StartDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            CouponId = "CP015",
                            Amount = 50000.0,
                            Condition = "Referral Bonus",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percent = 10f,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacter", b =>
                {
                    b.Property<string>("CustomerCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("MaxHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MaxWeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinHeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinWeight")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerCharacterId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CustomerCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacterImage", b =>
                {
                    b.Property<string>("CustomerCharacterImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerCharacterImageId");

                    b.HasIndex("CustomerCharacterId");

                    b.ToTable("CustomerCharacterImage");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventId = "E001",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4755),
                            Description = "A grand celebration to welcome the new year",
                            EndDate = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "New Year Festival",
                            IsActive = true,
                            Location = "Times Square, New York",
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E002",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4760),
                            Description = "Experience the beauty of cherry blossoms",
                            EndDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Spring Blossom Fest",
                            IsActive = true,
                            Location = "Kyoto, Japan",
                            StartDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E003",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4764),
                            Description = "Showcasing the latest in technology and AI",
                            EndDate = new DateTime(2025, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Tech Innovation Summit",
                            IsActive = true,
                            Location = "Silicon Valley",
                            StartDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E004",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4768),
                            Description = "Live performances from top artists",
                            EndDate = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Music Fest",
                            IsActive = true,
                            Location = "Coachella, California",
                            StartDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E005",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4771),
                            Description = "A must-attend event for comic book fans",
                            EndDate = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Comic-Con International",
                            IsActive = true,
                            Location = "San Diego Convention Center",
                            StartDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E006",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4775),
                            Description = "Largest anime convention in the world",
                            EndDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Anime Expo",
                            IsActive = true,
                            Location = "Los Angeles Convention Center",
                            StartDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E007",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4781),
                            Description = "Latest trends and releases in gaming",
                            EndDate = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Gaming Expo",
                            IsActive = true,
                            Location = "Las Vegas Convention Center",
                            StartDate = new DateTime(2025, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E008",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4785),
                            Description = "A fun-filled summer celebration",
                            EndDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Summer Festival",
                            IsActive = true,
                            Location = "Miami Beach, Florida",
                            StartDate = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E009",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4789),
                            Description = "A paradise for cosplayers",
                            EndDate = new DateTime(2025, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Cosplay Festival",
                            IsActive = true,
                            Location = "Tokyo Big Sight",
                            StartDate = new DateTime(2025, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E010",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4793),
                            Description = "Showcasing the best movies of the year",
                            EndDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Film Festival",
                            IsActive = true,
                            Location = "Cannes, France",
                            StartDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E011",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4797),
                            Description = "Spooky celebrations and costume parties",
                            EndDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Halloween Night",
                            IsActive = true,
                            Location = "Salem, Massachusetts",
                            StartDate = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = "E012",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4800),
                            Description = "Festive shopping and holiday cheer",
                            EndDate = new DateTime(2025, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Christmas Market",
                            IsActive = true,
                            Location = "Nuremberg, Germany",
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventActivity", b =>
                {
                    b.Property<string>("EventActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EventId");

                    b.ToTable("EventActivity");

                    b.HasData(
                        new
                        {
                            EventActivityId = "EA001",
                            ActivityId = "ACT001",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6203),
                            Description = "Yoga for a fresh start",
                            EventId = "E001"
                        },
                        new
                        {
                            EventActivityId = "EA002",
                            ActivityId = "ACT005",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6209),
                            Description = "Tech trends in the new year",
                            EventId = "E001"
                        },
                        new
                        {
                            EventActivityId = "EA003",
                            ActivityId = "ACT004",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6212),
                            Description = "Painting cherry blossoms",
                            EventId = "E002"
                        },
                        new
                        {
                            EventActivityId = "EA004",
                            ActivityId = "ACT013",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6215),
                            Description = "AI and future coding",
                            EventId = "E003"
                        },
                        new
                        {
                            EventActivityId = "EA005",
                            ActivityId = "ACT009",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6217),
                            Description = "Dance battles live",
                            EventId = "E004"
                        },
                        new
                        {
                            EventActivityId = "EA006",
                            ActivityId = "ACT003",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6219),
                            Description = "Comic-Con live music",
                            EventId = "E005"
                        },
                        new
                        {
                            EventActivityId = "EA007",
                            ActivityId = "ACT007",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6222),
                            Description = "Anime and book discussions",
                            EventId = "E006"
                        },
                        new
                        {
                            EventActivityId = "EA008",
                            ActivityId = "ACT010",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6225),
                            Description = "Chess and gaming",
                            EventId = "E007"
                        },
                        new
                        {
                            EventActivityId = "EA009",
                            ActivityId = "ACT011",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6227),
                            Description = "Outdoor movie fun",
                            EventId = "E008"
                        },
                        new
                        {
                            EventActivityId = "EA010",
                            ActivityId = "ACT015",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6275),
                            Description = "Meditation for cosplayers",
                            EventId = "E009"
                        },
                        new
                        {
                            EventActivityId = "EA011",
                            ActivityId = "ACT012",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6278),
                            Description = "Science in filmmaking",
                            EventId = "E010"
                        },
                        new
                        {
                            EventActivityId = "EA012",
                            ActivityId = "ACT006",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6280),
                            Description = "Halloween charity run",
                            EventId = "E011"
                        },
                        new
                        {
                            EventActivityId = "EA013",
                            ActivityId = "ACT014",
                            CreateBy = "Admin",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6283),
                            Description = "Christmas gardening",
                            EventId = "E012"
                        },
                        new
                        {
                            EventActivityId = "EA014",
                            ActivityId = "ACT002",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6285),
                            Description = "Cooking for music lovers",
                            EventId = "E004"
                        },
                        new
                        {
                            EventActivityId = "EA015",
                            ActivityId = "ACT008",
                            CreateBy = "Manager",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6288),
                            Description = "Photography in tech",
                            EventId = "E003"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.Property<string>("EventCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsAssign")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCharacter");

                    b.HasData(
                        new
                        {
                            EventCharacterId = "EC001",
                            CharacterId = "CH001",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6064),
                            EventId = "E001",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC002",
                            CharacterId = "CH002",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6068),
                            EventId = "E002",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC003",
                            CharacterId = "CH003",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6070),
                            EventId = "E003",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC004",
                            CharacterId = "CH004",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6073),
                            EventId = "E004",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC005",
                            CharacterId = "CH005",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6076),
                            EventId = "E005",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC006",
                            CharacterId = "CH006",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6146),
                            EventId = "E006",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC007",
                            CharacterId = "CH007",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6149),
                            EventId = "E007",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC008",
                            CharacterId = "CH008",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6152),
                            EventId = "E008",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC009",
                            CharacterId = "CH009",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6155),
                            EventId = "E009",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC010",
                            CharacterId = "CH010",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6157),
                            EventId = "E010",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC011",
                            CharacterId = "CH011",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6160),
                            EventId = "E011",
                            IsAssign = true
                        },
                        new
                        {
                            EventCharacterId = "EC012",
                            CharacterId = "CH012",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(6162),
                            EventId = "E012",
                            IsAssign = true
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAvatar")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageId");

                    b.HasIndex("EventId");

                    b.ToTable("EventImage");

                    b.HasData(
                        new
                        {
                            ImageId = "EI001",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6938),
                            EventId = "E001",
                            ImageUrl = "https://example.com/event1.jpg"
                        },
                        new
                        {
                            ImageId = "EI002",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6941),
                            EventId = "E002",
                            ImageUrl = "https://example.com/event2.jpg"
                        },
                        new
                        {
                            ImageId = "EI003",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6943),
                            EventId = "E003",
                            ImageUrl = "https://example.com/event3.jpg"
                        },
                        new
                        {
                            ImageId = "EI004",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6946),
                            EventId = "E004",
                            ImageUrl = "https://example.com/event4.jpg"
                        },
                        new
                        {
                            ImageId = "EI005",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6948),
                            EventId = "E005",
                            ImageUrl = "https://example.com/event5.jpg"
                        },
                        new
                        {
                            ImageId = "EI006",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6950),
                            EventId = "E006",
                            ImageUrl = "https://example.com/event6.jpg"
                        },
                        new
                        {
                            ImageId = "EI007",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6954),
                            EventId = "E007",
                            ImageUrl = "https://example.com/event7.jpg"
                        },
                        new
                        {
                            ImageId = "EI008",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6957),
                            EventId = "E008",
                            ImageUrl = "https://example.com/event8.jpg"
                        },
                        new
                        {
                            ImageId = "EI009",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6959),
                            EventId = "E009",
                            ImageUrl = "https://example.com/event9.jpg"
                        },
                        new
                        {
                            ImageId = "EI010",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6961),
                            EventId = "E010",
                            ImageUrl = "https://example.com/event10.jpg"
                        },
                        new
                        {
                            ImageId = "EI011",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6963),
                            EventId = "E011",
                            ImageUrl = "https://example.com/event11.jpg"
                        },
                        new
                        {
                            ImageId = "EI012",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(6965),
                            EventId = "E012",
                            ImageUrl = "https://example.com/event12.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractCharacterId")
                        .IsUnique()
                        .HasFilter("[ContractCharacterId] IS NOT NULL");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            FeedbackId = "6dcf9044-44df-45f6-9c2e-686db1c39141",
                            AccountId = "A001",
                            ContractCharacterId = "CC0021",
                            CreateBy = "A001",
                            CreateDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Great experience!"
                        },
                        new
                        {
                            FeedbackId = "abab786a-f96b-455c-b719-2e508a0f30f6",
                            AccountId = "A004",
                            ContractCharacterId = "CC0022",
                            CreateBy = "A004",
                            CreateDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Loved the event!"
                        },
                        new
                        {
                            FeedbackId = "1588ee37-e786-45ce-a692-e18d4d16b082",
                            AccountId = "A005",
                            ContractCharacterId = "CC0023",
                            CreateBy = "A005",
                            CreateDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice cosplay session!"
                        },
                        new
                        {
                            FeedbackId = "c69a1075-1813-4f29-aa71-719b279a3b4d",
                            AccountId = "A007",
                            ContractCharacterId = "CC0051",
                            CreateBy = "A007",
                            CreateDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enjoyed the event!"
                        },
                        new
                        {
                            FeedbackId = "22bc788b-1c6b-4771-a5cd-8f3d74a98cde",
                            AccountId = "A008",
                            ContractCharacterId = "CC0052",
                            CreateBy = "A008",
                            CreateDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Would love to join again!"
                        },
                        new
                        {
                            FeedbackId = "75e6f88f-ec92-4837-9263-cef502aece4a",
                            AccountId = "A010",
                            ContractCharacterId = "CC0053",
                            CreateBy = "A010",
                            CreateDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The atmosphere was amazing!"
                        },
                        new
                        {
                            FeedbackId = "eddf7151-171e-47d7-83a2-0972ee2b2109",
                            AccountId = "A012",
                            ContractCharacterId = "CC0081",
                            CreateBy = "A012",
                            CreateDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Best cosplay event!"
                        },
                        new
                        {
                            FeedbackId = "db290724-17f6-4a0a-ad5f-321dccda3b4b",
                            AccountId = "A013",
                            ContractCharacterId = "CC0082",
                            CreateBy = "A013",
                            CreateDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice crowd and management!"
                        },
                        new
                        {
                            FeedbackId = "9a29edbd-4078-4c81-8888-342ae6284bdc",
                            AccountId = "A015",
                            ContractCharacterId = "CC0083",
                            CreateBy = "A015",
                            CreateDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amazing experience!"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSentMail")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            Id = "N001",
                            AccountId = "A001",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5381),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Welcome to the system!"
                        },
                        new
                        {
                            Id = "N002",
                            AccountId = "A002",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5386),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your account has been upgraded."
                        },
                        new
                        {
                            Id = "N003",
                            AccountId = "A003",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5389),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "New promotional offer available!"
                        },
                        new
                        {
                            Id = "N004",
                            AccountId = "A004",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5392),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your request has been approved."
                        },
                        new
                        {
                            Id = "N005",
                            AccountId = "A005",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5395),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "System maintenance scheduled."
                        },
                        new
                        {
                            Id = "N006",
                            AccountId = "A006",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5397),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your order has been shipped!"
                        },
                        new
                        {
                            Id = "N007",
                            AccountId = "A007",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5400),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "New event registration open."
                        },
                        new
                        {
                            Id = "N008",
                            AccountId = "A008",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5403),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "Reminder: Payment due soon."
                        },
                        new
                        {
                            Id = "N009",
                            AccountId = "A009",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5405),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your password was changed."
                        },
                        new
                        {
                            Id = "N010",
                            AccountId = "A010",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5410),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Admin announcement update."
                        },
                        new
                        {
                            Id = "N011",
                            AccountId = "A011",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5413),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "New message from support."
                        },
                        new
                        {
                            Id = "N012",
                            AccountId = "A012",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5415),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Upcoming event invitation."
                        },
                        new
                        {
                            Id = "N013",
                            AccountId = "A013",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5418),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "New cosplayer contest."
                        },
                        new
                        {
                            Id = "N014",
                            AccountId = "A014",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5421),
                            IsRead = true,
                            IsSentMail = true,
                            Message = "Loyalty points updated."
                        },
                        new
                        {
                            Id = "N015",
                            AccountId = "A015",
                            CreatedAt = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(5423),
                            IsRead = false,
                            IsSentMail = true,
                            Message = "Your subscription expired."
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderId = "O001",
                            AccountId = "A003",
                            OrderDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 250000.0
                        },
                        new
                        {
                            OrderId = "O002",
                            AccountId = "A006",
                            OrderDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 150000.5
                        },
                        new
                        {
                            OrderId = "O003",
                            AccountId = "A011",
                            OrderDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 300000.0
                        },
                        new
                        {
                            OrderId = "O004",
                            AccountId = "A014",
                            OrderDate = new DateTime(2024, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 400000.0
                        },
                        new
                        {
                            OrderId = "O005",
                            AccountId = "A003",
                            OrderDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 175000.0
                        },
                        new
                        {
                            OrderId = "O006",
                            AccountId = "A006",
                            OrderDate = new DateTime(2024, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 225000.0
                        },
                        new
                        {
                            OrderId = "O007",
                            AccountId = "A011",
                            OrderDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 350000.0
                        },
                        new
                        {
                            OrderId = "O008",
                            AccountId = "A014",
                            OrderDate = new DateTime(2024, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 275000.0
                        },
                        new
                        {
                            OrderId = "O009",
                            AccountId = "A003",
                            OrderDate = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 500000.0
                        },
                        new
                        {
                            OrderId = "O010",
                            AccountId = "A006",
                            OrderDate = new DateTime(2024, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 125000.0
                        },
                        new
                        {
                            OrderId = "O011",
                            AccountId = "A011",
                            OrderDate = new DateTime(2024, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 325000.0
                        },
                        new
                        {
                            OrderId = "O012",
                            AccountId = "A014",
                            OrderDate = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 410000.0
                        },
                        new
                        {
                            OrderId = "O013",
                            AccountId = "A003",
                            OrderDate = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalPrice = 280000.0
                        },
                        new
                        {
                            OrderId = "O014",
                            AccountId = "A006",
                            OrderDate = new DateTime(2024, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 350000.0
                        },
                        new
                        {
                            OrderId = "O015",
                            AccountId = "A011",
                            OrderDate = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalPrice = 200000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.OrderProduct", b =>
                {
                    b.Property<string>("OrderProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");

                    b.HasData(
                        new
                        {
                            OrderProductId = "05f484e4-b071-4f1e-bda6-a2adb210b893",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7008),
                            OrderId = "O001",
                            Price = 30000.0,
                            ProductId = "P001",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "48f41a12-9c41-487a-acc1-79aa54a9fb69",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7014),
                            OrderId = "O001",
                            Price = 20000.0,
                            ProductId = "P002",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "05d44c20-7b87-4a60-bfab-736b42a58fa0",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7017),
                            OrderId = "O002",
                            Price = 80000.0,
                            ProductId = "P003",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "4491045c-88c8-4a09-953c-179eac07f2b1",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7021),
                            OrderId = "O002",
                            Price = 100000.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "29e747f0-d4eb-4bdb-b356-27769305bc04",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7025),
                            OrderId = "O003",
                            Price = 25000.0,
                            ProductId = "P005",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "ff65d964-5257-42d1-bc4d-93f8afcc41e8",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7030),
                            OrderId = "O003",
                            Price = 40000.0,
                            ProductId = "P006",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "5f3862c5-921f-4b3e-9776-bef7ef76cf97",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7034),
                            OrderId = "O004",
                            Price = 15000.0,
                            ProductId = "P007",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "092147e2-5e15-4266-8eea-2f845f6df8ce",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7038),
                            OrderId = "O004",
                            Price = 50000.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "27d9c899-c6e0-43df-b0f2-aaa0e747c31d",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7042),
                            OrderId = "O005",
                            Price = 60000.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "650ff5c4-a2aa-41fa-bc8d-e82cf2cf5f20",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7048),
                            OrderId = "O005",
                            Price = 120000.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "e2047c1b-48fb-47f9-a38c-34e361e0545a",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7051),
                            OrderId = "O006",
                            Price = 35000.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "515b0fa3-cc30-4c10-a365-7e7ecbf2593f",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7055),
                            OrderId = "O006",
                            Price = 45000.0,
                            ProductId = "P012",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "a988c188-aecc-43e2-b00a-02ca75d75603",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7058),
                            OrderId = "O007",
                            Price = 18000.0,
                            ProductId = "P013",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "51b5244e-64fa-4a39-b3d4-a7e44c49e95b",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7064),
                            OrderId = "O007",
                            Price = 90000.0,
                            ProductId = "P014",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "969f4878-408c-4541-b6ed-0ba339510c37",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7068),
                            OrderId = "O008",
                            Price = 22000.0,
                            ProductId = "P015",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "c87b1353-5af4-411c-812a-491b23f46626",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7071),
                            OrderId = "O008",
                            Price = 30000.0,
                            ProductId = "P001",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "7892f661-4517-4dbf-9d10-84a655c548c8",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7075),
                            OrderId = "O009",
                            Price = 20000.0,
                            ProductId = "P002",
                            Quantity = 6
                        },
                        new
                        {
                            OrderProductId = "5726d2fd-aea9-4c98-8992-6d92ae4da467",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7081),
                            OrderId = "O009",
                            Price = 80000.0,
                            ProductId = "P003",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "f18be0da-21cf-4f64-8bc0-c94e689052e9",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7084),
                            OrderId = "O010",
                            Price = 100000.0,
                            ProductId = "P004",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "c26df558-4d6b-43d1-9841-9f058dbfbd36",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7180),
                            OrderId = "O010",
                            Price = 25000.0,
                            ProductId = "P005",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "39c4e2fb-bdaf-4fd1-8121-901bfef8810e",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7183),
                            OrderId = "O011",
                            Price = 40000.0,
                            ProductId = "P006",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "8d54b700-e1d1-4182-9c30-83810dbdf4ff",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7189),
                            OrderId = "O011",
                            Price = 15000.0,
                            ProductId = "P007",
                            Quantity = 4
                        },
                        new
                        {
                            OrderProductId = "d57ad2c7-6d5a-40e0-ae0e-4595e8c974b8",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7193),
                            OrderId = "O012",
                            Price = 50000.0,
                            ProductId = "P008",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "e3ea725a-c171-49b3-85b2-c37dec960e35",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7197),
                            OrderId = "O012",
                            Price = 60000.0,
                            ProductId = "P009",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "f13756ac-3d4b-4ebf-b5b3-22f152503622",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7200),
                            OrderId = "O013",
                            Price = 120000.0,
                            ProductId = "P010",
                            Quantity = 1
                        },
                        new
                        {
                            OrderProductId = "15b2adcd-92e8-4026-ba35-dbeba7f894ef",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7206),
                            OrderId = "O013",
                            Price = 35000.0,
                            ProductId = "P011",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "3a12cc5a-a478-4910-b46f-0144b026dc42",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7210),
                            OrderId = "O014",
                            Price = 45000.0,
                            ProductId = "P012",
                            Quantity = 3
                        },
                        new
                        {
                            OrderProductId = "a9afb971-1878-4726-97bc-58169c78ad26",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7214),
                            OrderId = "O014",
                            Price = 18000.0,
                            ProductId = "P013",
                            Quantity = 5
                        },
                        new
                        {
                            OrderProductId = "e3f4818f-f56e-4331-9064-9f1028256339",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7217),
                            OrderId = "O015",
                            Price = 90000.0,
                            ProductId = "P014",
                            Quantity = 2
                        },
                        new
                        {
                            OrderProductId = "6ce7e082-0dc5-4abb-8827-527bf60cf37b",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7223),
                            OrderId = "O015",
                            Price = 22000.0,
                            ProductId = "P015",
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("PackageId");

                    b.ToTable("Package");

                    b.HasData(
                        new
                        {
                            PackageId = "PKG001",
                            Description = "Rent a single character for an event",
                            PackageName = "Basic Character Rental",
                            Price = 100000.0
                        },
                        new
                        {
                            PackageId = "PKG002",
                            Description = "Rent multiple characters with costumes",
                            PackageName = "Deluxe Character Rental",
                            Price = 250000.0
                        },
                        new
                        {
                            PackageId = "PKG003",
                            Description = "Full-day character rental service",
                            PackageName = "Ultimate Character Rental",
                            Price = 500000.0
                        },
                        new
                        {
                            PackageId = "PKG004",
                            Description = "Basic cosplay performance at an event",
                            PackageName = "Standard Cosplay Performance",
                            Price = 150000.0
                        },
                        new
                        {
                            PackageId = "PKG005",
                            Description = "Advanced performance with choreography",
                            PackageName = "Premium Cosplay Performance",
                            Price = 300000.0
                        },
                        new
                        {
                            PackageId = "PKG006",
                            Description = "Exclusive show with audience interaction",
                            PackageName = "VIP Cosplay Performance",
                            Price = 500000.0
                        },
                        new
                        {
                            PackageId = "PKG007",
                            Description = "30-minute photoshoot with cosplayers",
                            PackageName = "Mini Photography Session",
                            Price = 80000.0
                        },
                        new
                        {
                            PackageId = "PKG008",
                            Description = "1-hour professional photoshoot",
                            PackageName = "Standard Photography Session",
                            Price = 150000.0
                        },
                        new
                        {
                            PackageId = "PKG009",
                            Description = "Complete photoshoot with editing",
                            PackageName = "Full Photography Package",
                            Price = 300000.0
                        },
                        new
                        {
                            PackageId = "PKG010",
                            Description = "Includes exclusive cosplay merchandise",
                            PackageName = "Basic Merchandise Pack",
                            Price = 50000.0
                        },
                        new
                        {
                            PackageId = "PKG011",
                            Description = "Premium cosplay collectibles",
                            PackageName = "Deluxe Merchandise Pack",
                            Price = 150000.0
                        },
                        new
                        {
                            PackageId = "PKG012",
                            Description = "Limited edition cosplay items",
                            PackageName = "Ultimate Merchandise Pack",
                            Price = 300000.0
                        },
                        new
                        {
                            PackageId = "PKG013",
                            Description = "Beginner-friendly cosplay training",
                            PackageName = "Cosplay Basics Workshop",
                            Price = 100000.0
                        },
                        new
                        {
                            PackageId = "PKG014",
                            Description = "In-depth cosplay and makeup course",
                            PackageName = "Advanced Cosplay Training",
                            Price = 2500000.0
                        },
                        new
                        {
                            PackageId = "PKG015",
                            Description = "Professional-level training for cosplayers",
                            PackageName = "Master Cosplay Workshop",
                            Price = 500000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountCouponID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("AccountCouponID")
                        .IsUnique()
                        .HasFilter("[AccountCouponID] IS NOT NULL");

                    b.HasIndex("ContractId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TicketAccountId")
                        .IsUnique()
                        .HasFilter("[TicketAccountId] IS NOT NULL");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            PaymentId = "P001",
                            AccountCouponID = "AC001",
                            Amount = 250000.0,
                            CreatAt = new DateTime(2024, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA001",
                            TransactionId = "TXN001",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P002",
                            Amount = 150000.5,
                            CreatAt = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 0,
                            TicketAccountId = "TA002",
                            TransactionId = "TXN002",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P003",
                            Amount = 90000.0,
                            CreatAt = new DateTime(2024, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA003",
                            TransactionId = "TXN003",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P004",
                            AccountCouponID = "AC012",
                            Amount = 400000.0,
                            CreatAt = new DateTime(2024, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 1,
                            TicketAccountId = "TA004",
                            TransactionId = "TXN004",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P005",
                            Amount = 175000.0,
                            CreatAt = new DateTime(2024, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 0,
                            Status = 2,
                            TicketAccountId = "TA005",
                            TransactionId = "TXN005",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P006",
                            AccountCouponID = "AC003",
                            Amount = 225000.0,
                            CreatAt = new DateTime(2024, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O006",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN006",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P007",
                            Amount = 350000.0,
                            CreatAt = new DateTime(2024, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O007",
                            Purpose = 3,
                            Status = 0,
                            TransactionId = "TXN007",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P008",
                            Amount = 150000.0,
                            CreatAt = new DateTime(2024, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O008",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN008",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P009",
                            Amount = 500000.0,
                            CreatAt = new DateTime(2024, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O009",
                            Purpose = 3,
                            Status = 1,
                            TransactionId = "TXN009",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P010",
                            AccountCouponID = "AC004",
                            Amount = 125000.0,
                            CreatAt = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = "O010",
                            Purpose = 3,
                            Status = 2,
                            TransactionId = "TXN010",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P011",
                            Amount = 325000.0,
                            ContractId = "CT002",
                            CreatAt = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 1,
                            Status = 1,
                            TransactionId = "TXN011",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P012",
                            Amount = 410000.0,
                            ContractId = "CT005",
                            CreatAt = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 1,
                            Status = 0,
                            TransactionId = "TXN012",
                            Type = "Card"
                        },
                        new
                        {
                            PaymentId = "P013",
                            Amount = 90000.0,
                            ContractId = "CT008",
                            CreatAt = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 1,
                            TransactionId = "TXN013",
                            Type = "Cash"
                        },
                        new
                        {
                            PaymentId = "P014",
                            Amount = 350000.0,
                            ContractId = "CT010",
                            CreatAt = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 2,
                            TransactionId = "TXN014",
                            Type = "Online"
                        },
                        new
                        {
                            PaymentId = "P015",
                            Amount = 200000.0,
                            ContractId = "CT002",
                            CreatAt = new DateTime(2024, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Purpose = 2,
                            Status = 1,
                            TransactionId = "TXN015",
                            Type = "Card"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = "P001",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4608),
                            Description = "A wig for Naruto cosplay",
                            IsActive = true,
                            Price = 30000.0,
                            ProductName = "Naruto Wig",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "P002",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4613),
                            Description = "A hat for Mario cosplay",
                            IsActive = true,
                            Price = 20000.0,
                            ProductName = "Mario Hat",
                            Quantity = 15
                        },
                        new
                        {
                            ProductId = "P003",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4617),
                            Description = "Complete costume for Sasuke cosplay",
                            IsActive = true,
                            Price = 80000.0,
                            ProductName = "Sasuke Costume",
                            Quantity = 5
                        },
                        new
                        {
                            ProductId = "P004",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4620),
                            Description = "Replica sword from The Legend of Zelda",
                            IsActive = true,
                            Price = 100000.0,
                            ProductName = "Zelda Sword",
                            Quantity = 7
                        },
                        new
                        {
                            ProductId = "P005",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4624),
                            Description = "Iconic straw hat from One Piece",
                            IsActive = true,
                            Price = 25000.0,
                            ProductName = "One Piece Straw Hat",
                            Quantity = 20
                        },
                        new
                        {
                            ProductId = "P006",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4630),
                            Description = "Hatsune Miku blue twin-tail wig",
                            IsActive = true,
                            Price = 40000.0,
                            ProductName = "Miku Wig",
                            Quantity = 12
                        },
                        new
                        {
                            ProductId = "P007",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4634),
                            Description = "Tanjiro's iconic hanafuda earrings",
                            IsActive = true,
                            Price = 15000.0,
                            ProductName = "Demon Slayer Earrings",
                            Quantity = 30
                        },
                        new
                        {
                            ProductId = "P008",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4637),
                            Description = "Survey Corps uniform jacket",
                            IsActive = true,
                            Price = 50000.0,
                            ProductName = "Attack on Titan Jacket",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "P009",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4641),
                            Description = "Cozy Pikachu-themed onesie",
                            IsActive = true,
                            Price = 60000.0,
                            ProductName = "Pikachu Onesie",
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = "P010",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4645),
                            Description = "Final Fantasy VII replica sword",
                            IsActive = true,
                            Price = 120000.0,
                            ProductName = "Cloud's Buster Sword",
                            Quantity = 4
                        },
                        new
                        {
                            ProductId = "P011",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4648),
                            Description = "LED Vision accessory from Genshin Impact",
                            IsActive = true,
                            Price = 35000.0,
                            ProductName = "Genshin Impact Vision",
                            Quantity = 25
                        },
                        new
                        {
                            ProductId = "P012",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4651),
                            Description = "Jinx cosplay wig from Arcane",
                            IsActive = true,
                            Price = 45000.0,
                            ProductName = "Jinx Wig",
                            Quantity = 6
                        },
                        new
                        {
                            ProductId = "P013",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4655),
                            Description = "Golden tiara from Sailor Moon",
                            IsActive = true,
                            Price = 18000.0,
                            ProductName = "Sailor Moon Tiara",
                            Quantity = 15
                        },
                        new
                        {
                            ProductId = "P014",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4660),
                            Description = "High-quality Spider-Man suit",
                            IsActive = true,
                            Price = 90000.0,
                            ProductName = "Spider-Man Suit",
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = "P015",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4664),
                            Description = "Replica wand from Harry Potter series",
                            IsActive = true,
                            Price = 22000.0,
                            ProductName = "Harry Potter Wand",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ProductImage", b =>
                {
                    b.Property<string>("ProductImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAvatar")
                        .HasColumnType("bit");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            ProductImageId = "IMG001",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7350),
                            ProductId = "P001",
                            UrlImage = "https://example.com/images/naruto_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG002",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7353),
                            ProductId = "P002",
                            UrlImage = "https://example.com/images/mario_hat.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG003",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7356),
                            ProductId = "P003",
                            UrlImage = "https://example.com/images/sasuke_costume.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG004",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7359),
                            ProductId = "P004",
                            UrlImage = "https://example.com/images/zelda_sword.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG005",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7423),
                            ProductId = "P005",
                            UrlImage = "https://example.com/images/one_piece_hat.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG006",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7426),
                            ProductId = "P006",
                            UrlImage = "https://example.com/images/miku_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG007",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7429),
                            ProductId = "P007",
                            UrlImage = "https://example.com/images/demon_slayer_earrings.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG008",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7433),
                            ProductId = "P008",
                            UrlImage = "https://example.com/images/aot_jacket.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG009",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7435),
                            ProductId = "P009",
                            UrlImage = "https://example.com/images/pikachu_onesie.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG010",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7438),
                            ProductId = "P010",
                            UrlImage = "https://example.com/images/buster_sword.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG011",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7440),
                            ProductId = "P011",
                            UrlImage = "https://example.com/images/genshin_vision.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG012",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7442),
                            ProductId = "P012",
                            UrlImage = "https://example.com/images/jinx_wig.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG013",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7445),
                            ProductId = "P013",
                            UrlImage = "https://example.com/images/sailor_moon_tiara.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG014",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7447),
                            ProductId = "P014",
                            UrlImage = "https://example.com/images/spiderman_suit.jpg"
                        },
                        new
                        {
                            ProductImageId = "IMG015",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7450),
                            ProductId = "P015",
                            UrlImage = "https://example.com/images/harry_potter_wand.jpg"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.Property<string>("RefreshTokenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("AccountId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountCouponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("AccountCouponId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PackageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Request");

                    b.HasData(
                        new
                        {
                            RequestId = "R001",
                            AccountId = "A001",
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Rent Naruto Costume",
                            PackageId = "PKG001",
                            Price = 100000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R002",
                            AccountId = "A002",
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "ĐN",
                            Name = "Rent Cosplayer for Event",
                            Price = 500000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R003",
                            AccountId = "A003",
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "BD",
                            Name = "Create Anime Festival",
                            Price = 2000000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R004",
                            AccountId = "A004",
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HN",
                            Name = "Rent Samurai Armor",
                            Price = 150000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R005",
                            AccountId = "A005",
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "BT",
                            Name = "Hire Professional Cosplayer",
                            PackageId = "PKG002",
                            Price = 700000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R006",
                            AccountId = "A006",
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Organize Comic Convention",
                            Price = 5000000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R007",
                            AccountId = "A007",
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Rent Victorian Costume",
                            Price = 120000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R008",
                            AccountId = "A008",
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "QN",
                            Name = "Book Cosplayer for Birthday Party",
                            Price = 350000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R009",
                            AccountId = "A009",
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "CM",
                            Name = "Plan Fantasy Fair",
                            Price = 3000000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R010",
                            AccountId = "A010",
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "LĐ",
                            Name = "Rent Halloween Costumes",
                            Price = 200000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R011",
                            AccountId = "A011",
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "NT",
                            Name = "Hire Cosplayer for Wedding",
                            PackageId = "PKG010",
                            Price = 800000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R012",
                            AccountId = "A012",
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "VT",
                            Name = "Create Sci-Fi Convention",
                            Price = 4500000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            RequestId = "R013",
                            AccountId = "A013",
                            Description = "RentCostumes",
                            EndDate = new DateTime(2025, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Rent Santa Claus Costume",
                            Price = 130000.0,
                            ServiceId = "S003",
                            StartDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            RequestId = "R014",
                            AccountId = "A014",
                            Description = "RentCosplayer",
                            EndDate = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HN",
                            Name = "Book Cosplayer for Product Launch",
                            Price = 600000.0,
                            ServiceId = "S001",
                            StartDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            RequestId = "R015",
                            AccountId = "A015",
                            Description = "CreateEvent",
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "HCM",
                            Name = "Host Christmas Event",
                            PackageId = "PKG015",
                            Price = 5500000.0,
                            ServiceId = "S002",
                            StartDate = new DateTime(2025, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestCharacter", b =>
                {
                    b.Property<string>("RequestCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CosplayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestCharacter");

                    b.HasData(
                        new
                        {
                            RequestCharacterId = "RC01",
                            CharacterId = "CH001",
                            CosplayerId = "A025",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7491),
                            Description = "Yêu cầu cosplay nhân vật CH001",
                            Quantity = 1,
                            RequestId = "R001",
                            TotalPrice = 50000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7492)
                        },
                        new
                        {
                            RequestCharacterId = "RC02",
                            CharacterId = "CH002",
                            CosplayerId = "A026",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7496),
                            Description = "Yêu cầu cosplay nhân vật CH002",
                            Quantity = 1,
                            RequestId = "R002",
                            TotalPrice = 60000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7497)
                        },
                        new
                        {
                            RequestCharacterId = "RC03",
                            CharacterId = "CH003",
                            CosplayerId = "A027",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7500),
                            Description = "Yêu cầu cosplay nhân vật CH003",
                            Quantity = 1,
                            RequestId = "R003",
                            TotalPrice = 70000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7501)
                        },
                        new
                        {
                            RequestCharacterId = "RC04",
                            CharacterId = "CH004",
                            CosplayerId = "A028",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7504),
                            Description = "Yêu cầu cosplay nhân vật CH004",
                            Quantity = 1,
                            RequestId = "R004",
                            TotalPrice = 80000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7504)
                        },
                        new
                        {
                            RequestCharacterId = "RC05",
                            CharacterId = "CH005",
                            CosplayerId = "A029",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7507),
                            Description = "Yêu cầu cosplay nhân vật CH005",
                            Quantity = 1,
                            RequestId = "R005",
                            TotalPrice = 90000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7508)
                        },
                        new
                        {
                            RequestCharacterId = "RC06",
                            CharacterId = "CH006",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7511),
                            Description = "Yêu cầu cosplay nhân vật CH006",
                            Quantity = 5,
                            RequestId = "R006",
                            TotalPrice = 100000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7511)
                        },
                        new
                        {
                            RequestCharacterId = "RC07",
                            CharacterId = "CH007",
                            CosplayerId = "A031",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7514),
                            Description = "Yêu cầu cosplay nhân vật CH007",
                            Quantity = 1,
                            RequestId = "R007",
                            TotalPrice = 110000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7515)
                        },
                        new
                        {
                            RequestCharacterId = "RC08",
                            CharacterId = "CH008",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7518),
                            Description = "Yêu cầu cosplay nhân vật CH008",
                            Quantity = 7,
                            RequestId = "R008",
                            TotalPrice = 120000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7518)
                        },
                        new
                        {
                            RequestCharacterId = "RC09",
                            CharacterId = "CH009",
                            CosplayerId = "A033",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7523),
                            Description = "Yêu cầu cosplay nhân vật CH009",
                            Quantity = 1,
                            RequestId = "R009",
                            TotalPrice = 130000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7523)
                        },
                        new
                        {
                            RequestCharacterId = "RC10",
                            CharacterId = "CH010",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7526),
                            Description = "Yêu cầu cosplay nhân vật CH010",
                            Quantity = 9,
                            RequestId = "R010",
                            TotalPrice = 140000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7527)
                        },
                        new
                        {
                            RequestCharacterId = "RC11",
                            CharacterId = "CH011",
                            CosplayerId = "A035",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7530),
                            Description = "Yêu cầu cosplay nhân vật CH011",
                            Quantity = 1,
                            RequestId = "R011",
                            TotalPrice = 150000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7530)
                        },
                        new
                        {
                            RequestCharacterId = "RC12",
                            CharacterId = "CH012",
                            CosplayerId = "A036",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7533),
                            Description = "Yêu cầu cosplay nhân vật CH012",
                            Quantity = 1,
                            RequestId = "R012",
                            TotalPrice = 160000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7533)
                        },
                        new
                        {
                            RequestCharacterId = "RC13",
                            CharacterId = "CH013",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7536),
                            Description = "Yêu cầu cosplay nhân vật CH013",
                            Quantity = 10,
                            RequestId = "R013",
                            TotalPrice = 170000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7537)
                        },
                        new
                        {
                            RequestCharacterId = "RC14",
                            CharacterId = "CH014",
                            CosplayerId = "A038",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7540),
                            Description = "Yêu cầu cosplay nhân vật CH014",
                            Quantity = 1,
                            RequestId = "R014",
                            TotalPrice = 180000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7540)
                        },
                        new
                        {
                            RequestCharacterId = "RC15",
                            CharacterId = "CH015",
                            CosplayerId = "A039",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7543),
                            Description = "Yêu cầu cosplay nhân vật CH015",
                            Quantity = 1,
                            RequestId = "R015",
                            TotalPrice = 190000.0,
                            UpdateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(7544)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "R001",
                            Description = "System Administrator",
                            RoleName = 0
                        },
                        new
                        {
                            Id = "R002",
                            Description = "Event and Service Manager",
                            RoleName = 1
                        },
                        new
                        {
                            Id = "R003",
                            Description = "Customer Service Consultant",
                            RoleName = 2
                        },
                        new
                        {
                            Id = "R004",
                            Description = "Professional Cosplayer",
                            RoleName = 3
                        },
                        new
                        {
                            Id = "R005",
                            Description = "Regular Customer",
                            RoleName = 4
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            ServiceId = "S001",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4574),
                            Description = "Rent characters for events and parties",
                            ServiceName = "Character Rental"
                        },
                        new
                        {
                            ServiceId = "S002",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4578),
                            Description = "Live cosplay performances at events",
                            ServiceName = "Cosplay Rental"
                        },
                        new
                        {
                            ServiceId = "S003",
                            CreateDate = new DateTime(2025, 4, 8, 17, 54, 55, 931, DateTimeKind.Utc).AddTicks(4579),
                            Description = "Professional photoshoot with cosplayers",
                            ServiceName = "Create event"
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractCharacterId")
                        .IsUnique()
                        .HasFilter("[ContractCharacterId] IS NOT NULL");

                    b.HasIndex("EventCharacterId")
                        .IsUnique()
                        .HasFilter("[EventCharacterId] IS NOT NULL");

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            TaskId = "T001",
                            AccountId = "A001",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5722),
                            Description = "Cosplay as anime characters",
                            EndDate = new DateTime(2025, 4, 12, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5720),
                            EventCharacterId = "EC001",
                            IsActive = true,
                            Location = "Tokyo",
                            StartDate = new DateTime(2025, 4, 11, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5706),
                            Status = 0,
                            TaskName = "CH001",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5723)
                        },
                        new
                        {
                            TaskId = "T002",
                            AccountId = "A004",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5730),
                            Description = "Join cosplay contest",
                            EndDate = new DateTime(2025, 4, 14, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5729),
                            EventCharacterId = "EC002",
                            IsActive = true,
                            Location = "Los Angeles",
                            StartDate = new DateTime(2025, 4, 13, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5728),
                            Status = 1,
                            TaskName = "CH002",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5730)
                        },
                        new
                        {
                            TaskId = "T003",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5736),
                            Description = "Teach costume making",
                            EndDate = new DateTime(2025, 4, 16, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5735),
                            EventCharacterId = "EC003",
                            IsActive = true,
                            Location = "New York",
                            StartDate = new DateTime(2025, 4, 15, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5734),
                            Status = 2,
                            TaskName = "CH003",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5736)
                        },
                        new
                        {
                            TaskId = "T004",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5744),
                            Description = "Host a live event",
                            EndDate = new DateTime(2025, 4, 10, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5742),
                            EventCharacterId = "EC004",
                            IsActive = true,
                            Location = "Online",
                            StartDate = new DateTime(2025, 4, 10, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5741),
                            Status = 3,
                            TaskName = "CH004",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5744)
                        },
                        new
                        {
                            TaskId = "T005",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5749),
                            Description = "Professional cosplay photoshoot",
                            EndDate = new DateTime(2025, 4, 18, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5748),
                            EventCharacterId = "EC005",
                            IsActive = true,
                            Location = "Paris",
                            StartDate = new DateTime(2025, 4, 17, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5747),
                            Status = 0,
                            TaskName = "CH005",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5750)
                        },
                        new
                        {
                            TaskId = "T006",
                            AccountId = "A010",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5754),
                            Description = "Evaluate contestants",
                            EndDate = new DateTime(2025, 4, 20, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5754),
                            EventCharacterId = "EC006",
                            IsActive = true,
                            Location = "Berlin",
                            StartDate = new DateTime(2025, 4, 19, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5753),
                            Status = 1,
                            TaskName = "CH006",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5755)
                        },
                        new
                        {
                            TaskId = "T007",
                            AccountId = "A012",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5760),
                            Description = "Walk in parade",
                            EndDate = new DateTime(2025, 4, 22, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5759),
                            EventCharacterId = "EC007",
                            IsActive = true,
                            Location = "Seoul",
                            StartDate = new DateTime(2025, 4, 21, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5758),
                            Status = 2,
                            TaskName = "CH007",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5761)
                        },
                        new
                        {
                            TaskId = "T008",
                            AccountId = "A013",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5768),
                            Description = "Perform on live TV",
                            EndDate = new DateTime(2025, 4, 24, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5767),
                            EventCharacterId = "EC008",
                            IsActive = true,
                            Location = "London",
                            StartDate = new DateTime(2025, 4, 23, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5766),
                            Status = 3,
                            TaskName = "CH008",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5768)
                        },
                        new
                        {
                            TaskId = "T009",
                            AccountId = "A015",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5773),
                            Description = "Perform for charity",
                            EndDate = new DateTime(2025, 4, 26, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5772),
                            EventCharacterId = "EC009",
                            IsActive = true,
                            Location = "Sydney",
                            StartDate = new DateTime(2025, 4, 25, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5771),
                            Status = 4,
                            TaskName = "CH008",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5773)
                        },
                        new
                        {
                            TaskId = "T010",
                            AccountId = "A005",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5778),
                            Description = "Talk about cosplay industry",
                            EndDate = new DateTime(2025, 4, 28, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5777),
                            EventCharacterId = "EC010",
                            IsActive = true,
                            Location = "San Diego",
                            StartDate = new DateTime(2025, 4, 27, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5776),
                            Status = 0,
                            TaskName = "CH009",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5778)
                        },
                        new
                        {
                            TaskId = "T011",
                            AccountId = "A008",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5783),
                            Description = "New character shoot",
                            EndDate = new DateTime(2025, 4, 30, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5782),
                            EventCharacterId = "EC011",
                            IsActive = true,
                            Location = "Bangkok",
                            StartDate = new DateTime(2025, 4, 29, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5781),
                            Status = 1,
                            TaskName = "CH010",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5783)
                        },
                        new
                        {
                            TaskId = "T012",
                            AccountId = "A007",
                            CreateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5788),
                            Description = "Host main event",
                            EndDate = new DateTime(2025, 5, 2, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5787),
                            EventCharacterId = "EC012",
                            IsActive = true,
                            Location = "Jakarta",
                            StartDate = new DateTime(2025, 5, 1, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5786),
                            Status = 2,
                            TaskName = "CH011",
                            UpdateDate = new DateTime(2025, 4, 9, 0, 54, 55, 931, DateTimeKind.Local).AddTicks(5789)
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ticketType")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            EventId = "E001",
                            Price = 50000.0,
                            Quantity = 500,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 2,
                            EventId = "E002",
                            Price = 40000.0,
                            Quantity = 300,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 3,
                            EventId = "E003",
                            Price = 30000.0,
                            Quantity = 200,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 4,
                            EventId = "E004",
                            Price = 60000.0,
                            Quantity = 600,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 5,
                            EventId = "E005",
                            Price = 45000.0,
                            Quantity = 400,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 6,
                            EventId = "E006",
                            Price = 55000.0,
                            Quantity = 350,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 7,
                            EventId = "E007",
                            Price = 35000.0,
                            Quantity = 250,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 8,
                            EventId = "E008",
                            Price = 50000.0,
                            Quantity = 450,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 9,
                            EventId = "E009",
                            Price = 65000.0,
                            Quantity = 550,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 10,
                            EventId = "E010",
                            Price = 70000.0,
                            Quantity = 700,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 11,
                            EventId = "E011",
                            Price = 25000.0,
                            Quantity = 150,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 12,
                            EventId = "E012",
                            Price = 75000.0,
                            Quantity = 800,
                            ticketType = 0
                        },
                        new
                        {
                            TicketId = 13,
                            EventId = "E001",
                            Price = 50000.0,
                            Quantity = 500,
                            ticketType = 1
                        },
                        new
                        {
                            TicketId = 14,
                            EventId = "E002",
                            Price = 50000.0,
                            Quantity = 500,
                            ticketType = 1
                        },
                        new
                        {
                            TicketId = 15,
                            EventId = "E003",
                            Price = 50000.0,
                            Quantity = 500,
                            ticketType = 1
                        },
                        new
                        {
                            TicketId = 16,
                            EventId = "E004",
                            Price = 50000.0,
                            Quantity = 500,
                            ticketType = 1
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Property<string>("TicketAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("TicketAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketAccount");

                    b.HasData(
                        new
                        {
                            TicketAccountId = "TA001",
                            AccountId = "A003",
                            Quantity = 2,
                            TicketCode = "TC001",
                            TicketId = 1,
                            TotalPrice = 100000.0
                        },
                        new
                        {
                            TicketAccountId = "TA002",
                            AccountId = "A006",
                            Quantity = 1,
                            TicketCode = "TC002",
                            TicketId = 2,
                            TotalPrice = 40000.0
                        },
                        new
                        {
                            TicketAccountId = "TA003",
                            AccountId = "A011",
                            Quantity = 3,
                            TicketCode = "TC003",
                            TicketId = 3,
                            TotalPrice = 90000.0
                        },
                        new
                        {
                            TicketAccountId = "TA004",
                            AccountId = "A014",
                            Quantity = 2,
                            TicketCode = "TC004",
                            TicketId = 4,
                            TotalPrice = 120000.0
                        },
                        new
                        {
                            TicketAccountId = "TA005",
                            AccountId = "A003",
                            Quantity = 4,
                            TicketCode = "TC005",
                            TicketId = 5,
                            TotalPrice = 180000.0
                        },
                        new
                        {
                            TicketAccountId = "TA006",
                            AccountId = "A006",
                            Quantity = 2,
                            TicketCode = "TC006",
                            TicketId = 6,
                            TotalPrice = 110000.0
                        },
                        new
                        {
                            TicketAccountId = "TA007",
                            AccountId = "A011",
                            Quantity = 1,
                            TicketCode = "TC007",
                            TicketId = 7,
                            TotalPrice = 35000.0
                        },
                        new
                        {
                            TicketAccountId = "TA008",
                            AccountId = "A014",
                            Quantity = 3,
                            TicketCode = "TC008",
                            TicketId = 8,
                            TotalPrice = 150000.0
                        },
                        new
                        {
                            TicketAccountId = "TA009",
                            AccountId = "A003",
                            Quantity = 2,
                            TicketCode = "TC009",
                            TicketId = 9,
                            TotalPrice = 130000.0
                        },
                        new
                        {
                            TicketAccountId = "TA010",
                            AccountId = "A006",
                            Quantity = 1,
                            TicketCode = "TC010",
                            TicketId = 10,
                            TotalPrice = 70000.0
                        },
                        new
                        {
                            TicketAccountId = "TA011",
                            AccountId = "A011",
                            Quantity = 5,
                            TicketCode = "TC011",
                            TicketId = 11,
                            TotalPrice = 125000.0
                        },
                        new
                        {
                            TicketAccountId = "TA012",
                            AccountId = "A014",
                            Quantity = 2,
                            TicketCode = "TC012",
                            TicketId = 12,
                            TotalPrice = 150000.0
                        },
                        new
                        {
                            TicketAccountId = "TA013",
                            AccountId = "A003",
                            Quantity = 3,
                            TicketCode = "TC013",
                            TicketId = 3,
                            TotalPrice = 90000.0
                        },
                        new
                        {
                            TicketAccountId = "TA014",
                            AccountId = "A006",
                            Quantity = 2,
                            TicketCode = "TC014",
                            TicketId = 5,
                            TotalPrice = 90000.0
                        },
                        new
                        {
                            TicketAccountId = "TA015",
                            AccountId = "A011",
                            Quantity = 1,
                            TicketCode = "TC015",
                            TicketId = 7,
                            TotalPrice = 35000.0
                        });
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("AccountCoupons")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Coupon", "Coupon")
                        .WithMany("AccountCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("AccountImages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithOne("Cart")
                        .HasForeignKey("CCSS_Repository.Entities.Cart", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CartProduct", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Category", "Category")
                        .WithMany("Characters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CharacterImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("CharacterImages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Request", "Request")
                        .WithOne("Contract")
                        .HasForeignKey("CCSS_Repository.Entities.Contract", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("ContractCharacters")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Character");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Category", "Category")
                        .WithMany("CustomerCharacters")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacterImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.CustomerCharacter", "CustomerCharacter")
                        .WithMany("CustomerCharacterImages")
                        .HasForeignKey("CustomerCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CustomerCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventActivity", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Activity", "Activity")
                        .WithMany("EventActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventActivities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("EventCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventCharacters")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Feedback", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.ContractCharacter", "ContractCharacter")
                        .WithOne("Feedback")
                        .HasForeignKey("CCSS_Repository.Entities.Feedback", "ContractCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("ContractCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Notification", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.OrderProduct", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Payment", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.AccountCoupon", "AccountCoupon")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "AccountCouponID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Order", "Order")
                        .WithMany("Payment")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.TicketAccount", "TicketAccount")
                        .WithOne("Payment")
                        .HasForeignKey("CCSS_Repository.Entities.Payment", "TicketAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccountCoupon");

                    b.Navigation("Contract");

                    b.Navigation("Order");

                    b.Navigation("TicketAccount");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ProductImage", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RefreshToken", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.AccountCoupon", "AccountCoupon")
                        .WithMany("Requests")
                        .HasForeignKey("AccountCouponId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Requests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Package", "Package")
                        .WithMany("Requests")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("AccountCoupon");

                    b.Navigation("Package");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.RequestCharacter", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Character", "Character")
                        .WithMany("RequestCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.Request", "Request")
                        .WithMany("RequestCharacters")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Task", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("Tasks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CCSS_Repository.Entities.ContractCharacter", "ContractCharacter")
                        .WithOne("Task")
                        .HasForeignKey("CCSS_Repository.Entities.Task", "ContractCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.EventCharacter", "EventCharacter")
                        .WithOne("Task")
                        .HasForeignKey("CCSS_Repository.Entities.Task", "EventCharacterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("ContractCharacter");

                    b.Navigation("EventCharacter");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Event", "Event")
                        .WithMany("Ticket")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.HasOne("CCSS_Repository.Entities.Account", "Account")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CCSS_Repository.Entities.Ticket", "Ticket")
                        .WithMany("TicketAccounts")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Account", b =>
                {
                    b.Navigation("AccountCoupons");

                    b.Navigation("AccountImages");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Requests");

                    b.Navigation("Tasks");

                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.AccountCoupon", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Activity", b =>
                {
                    b.Navigation("EventActivities");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Category", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("CustomerCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Character", b =>
                {
                    b.Navigation("CharacterImages");

                    b.Navigation("ContractCharacters");

                    b.Navigation("EventCharacters");

                    b.Navigation("RequestCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Contract", b =>
                {
                    b.Navigation("ContractCharacters");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.ContractCharacter", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Coupon", b =>
                {
                    b.Navigation("AccountCoupons");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.CustomerCharacter", b =>
                {
                    b.Navigation("CustomerCharacterImages");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Event", b =>
                {
                    b.Navigation("EventActivities");

                    b.Navigation("EventCharacters");

                    b.Navigation("EventImages");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.EventCharacter", b =>
                {
                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Package", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Request", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();

                    b.Navigation("RequestCharacters");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Service", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.Ticket", b =>
                {
                    b.Navigation("TicketAccounts");
                });

            modelBuilder.Entity("CCSS_Repository.Entities.TicketAccount", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
